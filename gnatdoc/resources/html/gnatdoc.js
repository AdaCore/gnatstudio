/**
 * A namespace that contains all the information generated by the compiler. See
 * the documentation of the fields below.
 *
 * @constructor
 */

function GNATdoc() {}

/**
 * Possible kinds for entities
 * @enum {string}
 */
GNATdoc.EntityKind = {
   CODE: 'code',
   PARAGRAPH: 'paragraph',
   UL: 'ul',
   LI: 'li',
   SPAN: 'span'
};

/**
 * The data that describes an entity
 * @typedef {{line: {number:Number},
 *            column: {number:Number},
 *            href: string,
 *            text: string,
 *            cssClass: string,
 *            kind: GNATdoc.EntityKind,
 *            children: Array.<GNATdoc.Entity>}}
 */
GNATdoc.Entity;

/**
 * ???
 * @type {{label:string, summary:string, entities:Array.<GNATdoc.Entity>, description:string}}
 */
GNATdoc.Documentation;

/**
 * ???
 * @type {Array}
 */
GNATdoc.DocumentationIndex = [];

/**
 * ???
 * @type {Array}
 */
GNATdoc.EntitiesCategoriesIndex = [];

/**
 * ???
 * @type {Array}
 */
GNATdoc.EntitiesCategory = [];

/**
 * ???
 * @type {Array}
 */
GNATdoc.InheritanceIndex = [];

/**
 * ???
 * @type {Array}
 */
GNATdoc.SourceFile = [];

/**
 * ???
 * @type {Array}
 */
GNATdoc.SourceFileIndex = [];

/**
 * ???
 *
 * @param {Element} root  The element to which we add the documentation.
 * @param {Array.<GNATdoc.Entity>} data    The data to convert.
 */

function buildText(root, data)
{
   /** @type {Element} */
   var element;

   for (var index = 0; index < data.length; index++)
   {
       switch (data[index].kind)
       {
           case GNATdoc.EntityKind.CODE:
               element = document.createElement('table');
               element.setAttribute('class', 'code');
               element.setAttribute('cellpadding', '0');
               element.setAttribute('cellspacing', '0');
               var code = document.createElement('tbody');

               for (var lineIndex = 0;
                    lineIndex < data[index].children.length;
                    lineIndex++)
               {
                   var line = data[index].children[lineIndex];
                   var row = document.createElement('tr');
                   var cell = document.createElement('th');
                   cell.setAttribute('id', 'L' + line.number.toString());
                   cell.appendChild(document.createTextNode(line.number));
                   row.appendChild(cell);
                   cell = document.createElement('td');
                   buildText(cell, line.children);
                   row.appendChild(cell);
                   code.appendChild(row);
               }

               element.appendChild(code);
               break;

           case GNATdoc.EntityKind.PARAGRAPH:
               element = document.createElement('p');
               buildText(element, data[index].children);
               break;

           case GNATdoc.EntityKind.UL:
               element = document.createElement('ul');
               buildText(element, data[index].children);
               break;

           case GNATdoc.EntityKind.LI:
               element = document.createElement('li');
               buildText(element, data[index].children);
               break;

           case GNATdoc.EntityKind.SPAN:
               element = document.createElement('span');

               if (typeof data[index].href !== 'undefined')
               {
                   var href = document.createElement('a');
                   href.setAttribute('href', '../' + data[index].href);
                   href.appendChild(document.createTextNode(data[index].text));
                   element.appendChild(href);

               } else
               {
                   element.appendChild(
                     document.createTextNode(data[index].text));
               }

               if (typeof data[index].cssClass !== 'undefined')
               {
                   element.setAttribute('class', data[index].cssClass);
               }

               break;
       }
       root.appendChild(element);
   }
}

function buildDocumentationPage()
{
    var pane;
    var header;
    var text;
    var href;
    var sup;

    pane = document.getElementById('body');

    /* Build 'Summary' section */

    header = document.createElement('h1');
    text = document.createTextNode(GNATdoc.Documentation.label);
    header.appendChild(text);
    pane.appendChild(header);
    buildText(pane, GNATdoc.Documentation.summary);
    href = document.createElement('a');
    href.setAttribute('href', '#Description');
    text = document.createTextNode('More...');
    href.appendChild(text);
    pane.appendChild(href);

    /* Build 'Entities' section */

    header = document.createElement('h2');
    text = document.createTextNode('Entities');
    header.appendChild(text);
    pane.appendChild(header);

    for (var index = 0; index < GNATdoc.Documentation.entities.length; index++)
    {
        var entity_set = GNATdoc.Documentation.entities[index];
        var table;
        var tbody;

        header = document.createElement('h3');
        text = document.createTextNode(entity_set.label);
        header.appendChild(text);
        pane.appendChild(header);

        table = document.createElement('table');
        table.setAttribute('class', 'entities');
        table.setAttribute('cellpadding', '0');
        table.setAttribute('cellspacing', '0');
        tbody = document.createElement('tbody');

        for (var eindex = 0; eindex < entity_set.entities.length; eindex++)
        {
            var entity = entity_set.entities[eindex];
            var row;
            var cell;

            row = document.createElement('tr');
            cell = document.createElement('th');
            href = document.createElement('a');

            if (typeof entity.href !== 'undefined')
            {
                href.setAttribute('href', entity.href);
            } else {
                href.setAttribute(
                  'href',
                  '#L' + entity.line.toString() +
                  'C' + entity.column.toString());
            }

            href.appendChild(document.createTextNode(entity.label));
            cell.appendChild(href);
            row.appendChild(cell);
            cell = document.createElement('td');
            buildText(cell, entity.summary);
            row.appendChild(cell);
            tbody.appendChild(row);
        }

        table.appendChild(tbody);
        pane.appendChild(table);
    }

    /* Build 'Description' section */

    header = document.createElement('h2');
    header.setAttribute('id', 'Description');
    text = document.createTextNode('Description');
    header.appendChild(text);
    pane.appendChild(header);
    buildText(pane, GNATdoc.Documentation.description);

    /* Build entities description sections */

    for (var index = 0; index < GNATdoc.Documentation.entities.length; index++)
    {
        var entity_set = GNATdoc.Documentation.entities[index];

        for (var eindex = 0; eindex < entity_set.entities.length; eindex++)
        {
            var list = null;
            var entity = entity_set.entities[eindex];

            if (typeof entity.href == 'undefined')
            {
                header = document.createElement('h3');
                header.setAttribute(
                  'id',
                  'L' + entity.line.toString() +
                  'C' + entity.column.toString());
                header.appendChild(document.createTextNode(entity.label));
                sup = document.createElement('sup');
                sup.setAttribute('class', 'srcHref');
                href = document.createElement('a');
                href.setAttribute(
                  'href',
                  '../' + entity.src +
                  '#L' + entity.line.toString());
                href.appendChild(document.createTextNode(' [source]'));
                sup.appendChild(href);
                header.appendChild(sup);
                pane.appendChild(header);
                buildText(pane, entity.description);

                if (typeof entity.inherits !== 'undefined')
                {
                    var paragraph = document.createElement('p');
                    paragraph.appendChild(document.createTextNode('Inherits '));

                    for (var iindex = 0;
                         iindex < entity.inherits.length;
                         iindex++)
                    {
                        if (iindex != 0)
                          paragraph.appendChild(document.createTextNode(', '));

                        if (typeof entity.inherits[iindex].docHref ==
                              'undefined')
                        {
                          paragraph.appendChild(
                            document.createTextNode(
                              entity.inherits[iindex].label));
                        }
                        else
                        {
                           href = document.createElement('a');
                           href.setAttribute(
                             'href', '../' + entity.inherits[iindex].docHref);
                           href.setAttribute('target', 'contentView');
                           href.appendChild(
                             document.createTextNode(
                               entity.inherits[iindex].label));
                           paragraph.appendChild(href);
                        }
                    }

                    pane.appendChild(paragraph);
                }

                if (typeof entity.inherited !== 'undefined')
                {
                    var paragraph = document.createElement('p');
                    paragraph.appendChild(
                      document.createTextNode('Inherited by '));

                    for (var iindex = 0;
                         iindex < entity.inherited.length;
                         iindex++)
                    {
                        if (iindex != 0)
                          paragraph.appendChild(document.createTextNode(', '));

                        href = document.createElement('a');
                        href.setAttribute(
                          'href', '../' + entity.inherited[iindex].docHref);
                        href.setAttribute('target', 'contentView');
                        href.appendChild(
                          document.createTextNode(
                            entity.inherited[iindex].label));
                        paragraph.appendChild(href);
                    }

                    pane.appendChild(paragraph);
                }

                if (typeof entity.parameters !== 'undefined')
                {
                    list = document.createElement('dl');

                    for (var pindex = 0;
                         pindex < entity.parameters.length;
                         pindex++)
                    {
                        var parameter = entity.parameters[pindex];
                        var term = document.createElement('dt');
                        term.setAttribute(
                          'id',
                          'L' + parameter.line.toString() +
                            'C' + parameter.column.toString());
                        term.appendChild(
                          document.createTextNode(parameter.label));
                        var description = document.createElement('dd');
                        buildText(description, parameter.description);

                        list.appendChild(term);
                        list.appendChild(description);
                    }
                }

                if (typeof entity.returns !== 'undefined')
                {
                    if (list == null) list = document.createElement('dl');

                    var term = document.createElement('dt');
                    term.appendChild(document.createTextNode('Return value'));
                    var description = document.createElement('dd');
                    buildText(description, entity.returns.description);

                    list.appendChild(term);
                    list.appendChild(description);
                }

                if (typeof entity.exceptions !== 'undefined')
                {
                    if (list == null) list = document.createElement('dl');

                    var term = document.createElement('dt');
                    term.appendChild(document.createTextNode('Exceptions'));
                    var description = document.createElement('dd');
                    buildText(description, entity.exceptions.description);

                    list.appendChild(term);
                    list.appendChild(description);
                }

                if (list != null) pane.appendChild(list);
            }
        }
    }
}

function buildPackagesIndex(toc)
{
    var header = document.createElement('h1');
    var text = document.createTextNode('Packages and Classes');
    var list = document.createElement('ul');

    header.appendChild(text);
    toc.appendChild(header);

    toc.appendChild(list);

    for (var index = 0; index < GNATdoc.DocumentationIndex.length; index++)
    {
        var entry = GNATdoc.DocumentationIndex[index];
        var item = document.createElement('li');
        var href = document.createElement('a');

        href.setAttribute('href', entry.file);
        href.setAttribute('target', 'contentView');
        text = document.createTextNode(entry.label);
        href.appendChild(text);
        item.appendChild(href);
        list.appendChild(item);
    }
}

function buildEntitiesCategoriesIndex(toc)
{
    var header = document.createElement('h1');
    var list = document.createElement('ul');

    header.appendChild(document.createTextNode('Entities Index'));
    toc.appendChild(header);

    for (var index = 0; index < GNATdoc.EntitiesCategoriesIndex.length; index++)
    {
        var item = document.createElement('li');
        var href = document.createElement('a');
        var entry = GNATdoc.EntitiesCategoriesIndex[index];

        href.setAttribute('href', entry.href);
        href.setAttribute('target', 'contentView');
        href.appendChild(document.createTextNode(entry.label));
        item.appendChild(href);
        list.appendChild(item);
    }

    toc.appendChild(list);
}

function buildSourcesIndex(toc)
{
    var header = document.createElement('h1');
    var text = document.createTextNode('Source Files');
    var list = document.createElement('ul');

    header.appendChild(text);
    toc.appendChild(header);
    toc.appendChild(list);

    for (var index = 0; index < GNATdoc.SourceFileIndex.length; index++)
    {
        var source = GNATdoc.SourceFileIndex[index];
        var item = document.createElement('li');
        var href = document.createElement('a');

        text = document.createTextNode(source.label);
        href.setAttribute('href', source.srcHref);
        href.setAttribute('target', 'contentView');
        href.appendChild(text);
        item.appendChild(href);
        list.appendChild(item);
    }
}

function buildEntitiesCategoryPage()
{
    var header = document.createElement('h1');
    var character = '';
    var list = document.createElement('dl');
    var page = document.getElementById('body');

    header.appendChild(document.createTextNode(GNATdoc.EntitiesCategory.label));
    page.appendChild(header);

    for (var index = 0;
         index < GNATdoc.EntitiesCategory.entities.length;
         index++)
    {
        var item;
        var href;
        var entity = GNATdoc.EntitiesCategory.entities[index];

        if (character == '' || character != entity.label[0].toUpperCase())
        {
            character = entity.label[0].toUpperCase();
            item = document.createElement('dt');
            item.appendChild(document.createTextNode(character));
            list.appendChild(item);
        }

        item = document.createElement('dd');
        href = document.createElement('a');
        href.setAttribute('href', '../' + entity.docHref);
        href.appendChild(document.createTextNode(entity.label));
        item.appendChild(href);
        item.appendChild(document.createTextNode(' from '));
        href = document.createElement('a');
        href.setAttribute('href', '../' + entity.srcHref);
        href.appendChild(document.createTextNode(entity.declared));
        item.appendChild(href);
        list.appendChild(item);
    }

    page.appendChild(list);
}

function buildInheritanceIndex(page)
{
    function build(list, entities)
    {
        for (var index = 0; index < entities.length; index++)
        {
            var item = document.createElement('li');
            var href = document.createElement('a');
            href.setAttribute('href', entities[index].docHref);
            href.appendChild(document.createTextNode(entities[index].label));
            item.appendChild(href);

            if (typeof entities[index].inherited !== 'undefined')
            {
                var sublist = document.createElement('ul');
                build(sublist, entities[index].inherited);
                item.appendChild(sublist);
            }
            list.appendChild(item);
        }
    }

    var list = document.createElement('ul');

    build(list, GNATdoc.InheritanceIndex);
    page.appendChild(list);
}

function displaySource()
{
    var pane;
    var header;

    pane = document.getElementById('body');
    header = document.createElement('h1');
    header.appendChild(document.createTextNode(GNATdoc.SourceFile.label));
    pane.appendChild(header);
    buildText(pane, [GNATdoc.SourceFile]);
}

function onDocumentationLoad()
{
    buildDocumentationPage();

    /* Scroll view to requested element. */

    var url = document.URL;
    var index = url.indexOf('#');

    if (index >= 0)
    {
        var id = url.slice(index + 1, url.length);
        var element = document.getElementById(id);

        if (element)
        {
            element.scrollIntoView();
        }
    }
}

function onLoad()
{
    var toc = document.getElementById('tocView');

    buildPackagesIndex(toc);
    buildEntitiesCategoriesIndex(toc);

    var header = document.createElement('h1');
    var href = document.createElement('a');
    href.setAttribute('href', 'inheritance_index.html');
    href.setAttribute('target', 'contentView');
    href.appendChild(document.createTextNode('Inheritance Tree'));
    header.appendChild(href);
    toc.appendChild(header);

    buildSourcesIndex(toc);
}

function onSourceFileLoad()
{
    displaySource();

    /* Scroll view to requested element. */

    var url = document.URL;
    var index = url.indexOf('#');

    if (index >= 0)
    {
        var id = url.slice(index + 1, url.length);
        var element = document.getElementById(id);

        if (element)
        {
            element.scrollIntoView();
            element.classList.add('target');
        }
    }
}

function onInheritanceLoad()
{
    var page = document.getElementById('body');

    buildInheritanceIndex(page);
}

function onEntitiesCategoryLoad()
{
    buildEntitiesCategoryPage();
}
