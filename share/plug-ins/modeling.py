"""
This plug-in adds support for GMC (the GNAT Modeling Compiler) which generates
Ada (SPARK 2014?) and C code from Simulink models.

=========================================
THIS IS WORK IN PROGRESS
As it is this module does not perform anything useful. It defines
the Simulink language, which you can use in your project, but expects
.mdl files to be a JSON definition compatible with
GPS.Browsers.Diagram.load_json. The JSON is loaded into a browser when
you open a .mdl file, for instance from the Project view.
=========================================

"""

import GPS
import GPS.Browsers
import glob
import gps_utils
import modules
import os.path
import os_utils
import re
import json

#############
# Constants #
#############

BLOCK_ID = "Block (\w_)+(/(\w_)+)*"
# A pattern for a block id

BLOCK_END = "End " + BLOCK_ID
BLOCK_START = BLOCK_ID
# Annotation patterns for the start and end of a block annotation

COMPILE_MODEL_ACTION_NAME = "compile model"
# The name of the general action which triggers a GMC compilation

GMC_NAME = "gmc"
# The name of the GMC executable

GMC_EXEC = os_utils.locate_exec_on_path(GMC_NAME)
# The GMC executable

GMC_HEADER = "Copyright \(C\) Project P consortium"
# A predefined header which appears in every source code file generated by a
# GMC compilation.

OUTPUT_DIRECTORY_ATTR_NAME = "Output_Dir"
# The name of the project attribute which denotes the output directory where a
# GMC compilation produces source code files.

SOURCE_MODEL_ATTR_NAME = "Source_Model"
# The name of the project attribute which denotes the Simulink model file

TARGET_NAME = "GMC for project"
# The name of the build target which starts a GMC compilation

###############
# Definitions #
###############

# Matlab and Simulink languages

LANGUAGE_DEFS = r"""<?xml version='1.0' ?>
  <GPS>
    <Language>
      <Name>Matlab</Name>
      <Body_Suffix>.m</Body_Suffix>
      <Obj_Suffix>-</Obj_Suffix>
    </Language>
    <Language>
      <Name>Simulink</Name>
      <Body_Suffix>.mdl</Body_Suffix>
      <Obj_Suffix>-</Obj_Suffix>
    </Language>
  </GPS>"""

GPS.parse_xml(LANGUAGE_DEFS)

# Various project-related attributes

PROJECT_DEFS = """<?xml version='1.0' ?>
  <GPS>
    <project_attribute
     package="GMC"
     name="%s"
     editor_page="GMC"
     label="Source model"
     description="The Simulink model to compile and view"
     hide_in="wizard library_wizard">
       <string type="file" filter="project"/>
    </project_attribute>

    <project_attribute
     package="GMC"
     name="%s"
     editor_page="GMC"
     label="Output directory"
     description="The location of all generated source code files"
     hide_in="wizard library_wizard">
       <string type="directory"/>
    </project_attribute>

    <target-model name="GMC" category="">
      <description>Generic launch of GMC</description>
      <command-line>
        <arg>gmc</arg>
      </command-line>
      <switches/>
      <icon>gps-build-all</icon>
    </target-model>

    <target model="GMC" category="_Project_" name="%s">
      <in-toolbar>FALSE</in-toolbar>
      <in-menu>FALSE</in-menu>
      <launch-mode>MANUALLY_WITH_NO_DIALOG</launch-mode>
      <read-only>TRUE</read-only>
      <command-line>
        <arg>gmc</arg>
      </command-line>
    </target>

    <tool
     name="GMC"
     package="GMC"
     index="Simulink">
      <language>Simulink</language>
      <switches lines="3">
        <title line="1">Files</title>
        <title line="2">Generation</title>
        <title line="3">Output</title>

        <field
         line="1"
         label="Matlab file"
         switch="-m"
         separator=" "
         as-file="true"
         tip="Provides variable declarations of the Matlab workspace"/>
        <field
         line="1"
         label="Decoration file"
         switch="-t"
         separator=" "
         as-file="true"
         tip="Provides Simulink block typing information"/>
        <field
         line="1"
         label="Reference file"
         switch="-b"
         separator=" "
         as-file="true"
         tip="Ask Matteo"/>

        <combo
         line="2"
         label="Target language"
         switch="-l"
         separator=" "
         tip="The language used by GMC to produce the generated files">
           <combo-entry label="Ada" value="ada"/>
           <combo-entry label="C" value="c"/>
        </combo>
        <check
         line="2"
         label="Flatten model"
         switch="--full-flattening"
         tip="Ask Matteo"/>

        <radio line="3">
          <radio-entry
           label="Delete"
           switch="-c"
           tip="Delete contents of output directory between compilations"/>
          <radio-entry
           label="Preserve"
           switch="-i"
           tip="Preserve contents of output directory between compilations"/>
        </radio>
      </switches>
    </tool>
  </GPS>
""" % (SOURCE_MODEL_ATTR_NAME, OUTPUT_DIRECTORY_ATTR_NAME, TARGET_NAME)


class GMC_Diagram(GPS.Browsers.Diagram):
    def on_selection_changed(self, item, *args):
        if item is None:
            GPS.Console().write("clear selection\n")
        else:
            GPS.Console().write(
                "selection_changed item=%s selected=%s\n" % (
                    item, self.is_selected(item=item)))


class GMC_Diagram_View(GPS.Browsers.View):
    def __init__(self, file, module):
        """
        A browser that shows the contents of a simulink file.
        :param GPS.File file: the file associated with the browser.
        :param modules.Module module: the module
        """
        self.file = file
        diagrams = GPS.Browsers.Diagram.load_json(
            file.name(), diagramFactory=GMC_Diagram)
        self.create(
            diagrams[0],
            title=os.path.basename(file.name()),
            save_desktop=module._save_desktop)
        self.set_read_only(True)
        self.set_background(
            GPS.Browsers.View.Background.GRID,
            GPS.Browsers.Style(stroke="rgba(200,200,200,0.8)"))
        self.scale_to_fit(max_scale=1.0)

    def on_item_clicked(self, topitem, item, x, y, *args):
        GPS.Console().write(
            "clicked on %s (%s), at %s,%s\n" % (topitem, item, x, y))

    def on_item_double_clicked(self, topitem, item, x, y, *args):
        GPS.Console().write(
            "double_clicked on %s (%s), at %s,%s\n" % (topitem, item, x, y))

    def on_create_context(self, context, topitem, item, x, y, *args):
        GPS.Console().write(
            "create_context on %s (%s), at %s,%s\n" % (topitem, item, x, y))
        context._simulink_item = item

    def on_key(self, topitem, item, key, *args):
        GPS.Console().write("key on %s (%s): %s\n" % (topitem, item, key))


class GMC_Module(modules.Module):

    # cod_files
    #    type   : list
    #    element: GPS.File - a source code file
    # List of all source code files in a particular target language pertaning
    # to a Simulink model.

    # fl_to_obj_map
    #    type : dictionary
    #    key  : GPS.File - a generated file
    #    value: dictionary
    #       key  : integer - line number
    #       value: list
    #          element: GPS.Browsers.View.Item - a graphical object
    # File-by-file, line-by-line map which links source code to corresponding
    # graphical objects.

    # lang_info
    #    type : dictionary
    #    key  : String - the target language
    #    value: Language
    # Table of target language-specific information

    # model_file
    #    type: GPS.File
    # The current Simulink model file being compiled or navigated

    # obj_to_fl_map
    #    type : dictionary
    #    key  : GPS.Browsers.View.Item - a graphical object
    #    value: dictionary
    #       key  : GPS.File  - generated file
    #       value: list
    #          element: integer - line number
    # Graphical object to file-by-file, line-by-line map

    def __build_language_info(self):
        """
        Create a repository of target language-specific information.
        """
        self.lang_info = {
            "ada": Language("ada", "--", ""),
            "c": Language("c", "/*", "*/")}

    def __build_navigation_maps(self):
        """
        Establish the mapping between graphical objects and locations in source
        code files.
        """
        def add_fl_to_obj_entry(self, cod_file, line_num, graph_obj):
            """
            Add a single entry in map fl_to_obj.
            :param GPS.File cod_file: a source code file
            :param integer line_num: the current line in the source code file
            :param GPS.Browsers.View.Item graph_obj: a graphical object
            """
            # Ensure that all parts of map fl_to_obj are initialized

            if not fl_to_obj_map:
                fl_to_obj_map = {}

            if cod_file not in fl_to_obj_map:
                fl_to_obj_map[cod_file] = {}

            if line_num not in fl_to_obj_map[cod_file]:
                fl_to_obj_map[cod_file][line_num] = ()

            # Create a new entry

            fl_to_obj_mal[cod_file][line_num].append(graph_obj)

        def add_obj_to_fl_entry(self, cod_file, line_num, graph_obj):
            """
            Add a single entry in map obj_to_fl.
            :param GPS.File cod_file: a source code file
            :param integer line_num: the current line in the source code file
            :param GPS.Browsers.View.Item graph_obj: a graphical object
            """
            # Ensure that all parts of map obj_to_fl are initialized

            if not obj_to_fl_map:
                obj_to_fl_map = {}

            if graph_obj not in obj_to_fl_map:
                obj_to_fl_map[graph_obj] = {}

            if cod_file not in obj_to_fl_map[graph_obj]:
                obj_to_fl_map[graph_obj][cod_file] = ()

            # Create a new entry

            obj_to_fl_map[graph_obj][cod_file].append(line_num)

        def build_id_to_obj_map():
            """
            Establish a mapping between block ids and graphical objects.
            :return: a mapping (dictionary) between String block ids to
                GPS.Browsers.View.Item.
            """
            pass

        def build_navigation_map(cod_file, id_to_obj_map):
            """
            Establish the mapping between graphical objects and locations in a
            single source code file.
            :param GPS.File cod_file: a source code file
            :param dictionary id_to_obj_map: a mapping from String block id to
                GPS.Browsers.View.Item.
            """
            # Local declarations

            graph_objs = []
            # List of graphical objects currently visible from the stand point
            # of a source code line. The list is maintained in a stack-like
            # fasion.

            # Remove all previous entries from the two maps concerning the
            # source code file as they will be replaced with new ones.

            fl_to_obj_map[cod_file] = None
            for item in obj_to_fl_map:
                if cod_file in obj_to_fl_map[item]:
                    obj_to_fl_map[item][cod_file] = None

            # Open the source code file and parse its contents. For each block
            # annotation, create a mapping of the form:
            #
            #    file, line => graphical object
            #    graphical object => file, line
            #
            # For a single non-empty source code line, create a mapping of the
            # form:
            #
            #    file, line => graphical object 1, graphical object N

            lang = lang_info[cod_file.language()]
            line_num = 0

            phys_file = open(cod_file.name())
            for line in phys_file:
                line_num = line_num + 1

                is_start_annot = lang.__is_block_start_annot(line)
                is_end_annot = lang.__is_block_end_annot(line)

                # The current line denotes a block annotation

                if is_start_annot or is_end_annot:
                    graph_obj = id_to_obj_map[lang.__block_id(line)]

                    # Add entries in both maps

                    add_fl_to_obj_entry(cod_file, line_num, graph_obj)
                    add_obj_to_fl_entry(cod_file, line_num, graph_obj)

                    # A source code line may be associated with several blocks
                    # in which case it must be mapped to all the relevant
                    # graphical objects.
                    #
                    #    <Block 1>
                    #    <Block 2>
                    #    source code line - associated with Block 1 and 2
                    #    <End Block 2>
                    #    source code line - associated with Block 1
                    #    <End Block 1>
                    #
                    # To accomodate this, graphical objects are maintained in a
                    # local stack-line list.

                    if is_start_annot:
                        if not graph_obj in graph_objs:
                            graph_objs.append(graph_obj)

                    else:
                        if graph_obj in graph_objs:
                            graph_objs.remove(graph_obj)

                # Otherwise the current line denotes a statement, a comment or
                # a blank line. Either way, the line is mapped to all of the
                # graphical objects which correspond to open blocks.

                else:
                    for graph_obj in graph_objs:
                        add_fl_to_obj_entry(cod_file, line_num, graph_obj)

            phys_file.close()

        # Start of processing for __build_navigation_maps

        # The navigation maps are recomputed each time GMC compiles a Simulink
        # model into source code and GPS displays the visual equivalent of the
        # Simulink model.

        if self.cod_files and self.__diagram_view():
            id_to_obj_map = build_id_to_obj_map

            for cod_file in cod_files:
                if self.__present(cod_file):
                    build_navigation_map(cod_file, id_to_obj_map)

    def __build_source_code_file_list(self):
        """
        Inspect the output directory of a GMC project and collect all source
        code files for further processing.
        """
        output_dir = GPS.Project.root().get_attribute_as_string(
            package="GMC", attribute=OUTPUT_DIRECTORY_ATTR_NAME)

        # Clear the contents of the source code file list because it is about
        # to be repopulated.

        self.cod_files = []

        # Open all files in the output directory and try to detect source code
        # files by matching their contents against a predefined GMC header.

        all_files = os.path.join(output_dir, "*")

        for cod_file in glob.glob(all_files):
            phys_file = open(cod_file)

            # The current file contains a GMC header making it a source code
            # file.

            if re.search(pattern=GMC_HEADER, string=phys_file.readline()):
                self.cod_files.append(GPS.File(cod_file))

            phys_file.close()

    def __compile_model(self):
        """
        Compile a Simulink model with GMC to generate source code files in a
        particular target language.
        """
        # Extract the various attributes and switches from the GMC project

        proj = GPS.Project.root()
        model_file = proj.get_attribute_as_string(
            package="GMC", attribute=SOURCE_MODEL_ATTR_NAME)
        output_dir = proj.get_attribute_as_string(
            package="GMC", attribute=OUTPUT_DIRECTORY_ATTR_NAME)
        switches = proj.get_tool_switches_as_string("GMC")

        # Handle a missing compilation behavior switch (-c/-i) by adding a
        # default.

        if not re.search(pattern="-(c|i)", string=switches):
            switches = switches + " -i"

        # Handle a missing target language switch (-l) by adding a default

        if not re.search(pattern="-l", string=switches):
            switches = switches + " -l ada"

        # Construct the argument list and call GMC to compile the Simulink
        # model.

        args = model_file + " -o " + output_dir + " " + switches
        targ = GPS.BuildTarget(TARGET_NAME)
        targ.execute(synchronous=False, extra_args=args)

    def __diagram_viewer(self):
        """
        Obtain the diagram viewer in charge of visualizing a Simulink model.
        :return: an instance of GMC_Diagram_View
        """
        # Return the diagram viewer displaying the current Simulink model

        if self.MDI_file:
            return GPS.MDI.get(self.MDI_file.name())

        return None

    def __handle_compilation_event(
        self, hook, category, target_name="", mode_name="", status=""
    ):
        """
        Process a compilation event and perform the appropriate action.
        """
        # GMC has finished compiling a Simulink model file. Reload the project
        # viewer as the compilation generates new files which must be displayed
        # accordingly. Inspect the output directory and collect all generated
        # source code files in a list for further processing.

        if target_name == TARGET_NAME:
            GPS.execute_action("/Project/Reload")
            self.__build_source_code_file_list()

    def __handle_context_menu_event(self):
        """
        Process a contextual menu event and perform the appropriate navigation
        action.
        """
        pass

    def __handle_editor_event(self):
        """
        Process an editor event and perform the appropriate navigation action.
        """
        pass

    def __handle_viewer_event(self):
        """
        Process a diagram viewer event and perform the appropriate navigation
        action.
        """
        pass

    def load_desktop(self, view, data):
        try:
            info = json.loads(data)
            if not isinstance(info, dict):
                return None
        except:
            return None

        v = GMC_Diagram_View(file=GPS.File(info["file"]), module=self)
        v.scale = info["scale"]
        v.topleft = info["topleft"]

        return GPS.MDI.get_by_child(v)

    def __on_open_file_action_hook(self, hook, file, *args):
        """Handles "open file" events"""
        if file.language() == 'simulink':
            v = GMC_Diagram_View(file=file, module=self)
            return True
        return False

    def __present(self, file):
        """
        Determine whether a file is physically present on disk. If this is not
        the case, issue an error dialog.
        :param GPS.File file: the file to be tested
        :return: Boolean
        """
        if os.path.exists(file.name()):
            return True

        # ??? produce a dialog here ???
        return False

    def __print_cod_files(self):
        """
        Output the contents of list cod_files.
        """
        if self.cod_files:
            print "Cod_Files"

            for file in self.cod_files:
                if file:
                    print "  File: " + file.name()

    def __print_fl_to_obj_map(self):
        """
        Output the contents of map fl_to_obj.
        """
        if self.fl_to_obj_map:
            print "FL_To_Obj_Map"

            for file in self.fl_to_obj_map:
                if file:
                    print "  File: " + file.name()

                    for line in self.fl_to_obj_map[file]:
                        print "    Line: " + line

                        for obj in self.fl_to_obj_map[file][line]:
                            print "      Object: " + obj

    def __print_lang_info(self):
        """
        Output the contents of table lang_info
        """
        if self.lang_info:
            print "Lang_Info"

            for lang in self.lang_info:
                if lang:
                    print "  Language: " + lang

    def __print_obj_to_fl_map(self):
        """
        Output the contents of map obj_to_fl
        """
        if self.obj_to_fl_map:
            print "Obj_To_FL_Map"

            for obj in self.obj_to_fl_map:
                if obj:
                    print "  Object: " + obj

                    for file in self.obj_to_fl_map[obj]:
                        if file:
                            print "    File: " + file

                            for line in self.obj_to_fl_map[obj][file]:
                                if line:
                                    print "      Line: " + line

    def save_desktop(self, child):
        view = child.get_child()
        info = {"file": view.file.name(),
                "scale": view.scale,
                "topleft": view.topleft}
        return json.dumps(info)

    def setup(self):
        """
        Setup the GMC plug-in.
        """
        # The module is loaded only when GMC is available

        if GMC_EXEC:
            GPS.parse_xml(PROJECT_DEFS)

            self.__build_language_info()
            self.__setup_hooks()
            self.__setup_menus()

    def __setup_hooks(self):
        """
        Enable the GMC plug-in functionaliry by registering various actions
        with corresponding GPS event hooks.
        """
        GPS.Hook("compilation_finished").add(
            self.__handle_compilation_event, last=False)
        GPS.Hook("open_file_action_hook").add(
            self.__visualize_model, last=False)

    def __setup_menus(self):
        """
        Enable the GMC plug-in menus and buttons.
        """
        gps_utils.make_interactive(
            callback=self.__compile_model,
            name=COMPILE_MODEL_ACTION_NAME)

    def show_source_for_item(self):
        """
        A callback for a contextual menu
        """
        GPS.Console().write('Showing source code is not implemented yet\n')

    def __visualize_model(self, model_file):
        """
        Create the visual representation of a Simulink model.
        :param GPS.File model_file: the model file to visualize
        """
        pass


class Language:

    # block_end
    #    type: String
    # A regexp denoting the end of a block annotation

    # block_start
    #    type: String
    # A regexp denoting the start of a block annotation

    # header
    #    type: String
    # A header annotation which appears at the beginning of each generated file

    # name
    #    type: String
    # The name of the language

    def __init__(self, name, comment_start, comment_end):
        """
        Construct a new language characterized by various attributes.
        :param String name: the name of the language
        :param String comment_start: the prefix of a comment
        :param String comment_end: the suffix of a comment
        """
        ce = " " + comment_end
        cs = comment_start + " "

        self.name = name
        self.header = cs + GMC_HEADER + ce
        self.block_start = cs + BLOCK_START + ce
        self.block_end = cs + BLOCK_END + ce

    def __block_id(self, line):
        """
        Extract the id of a block from a line that denotes a block annotation.
        :param String line: a line denoting a block annotation
        :return:the id of the block as a String
        """
        return re.search(pattern=BLOCK_ID, string=line)

    def __is_block_end_annot(self, line):
        """
        Determine whether a line denotes the end of a block annotation.
        :param String line: the line to test
        :return: Boolean
        """
        return re.search(pattern=self.block_end, string=line) is not None

    def __is_block_start_annot(self, line):
        """
        Determine whether a line denotes the beginning of a block annotation.
        :param String line: the line to test
        :return: Boolean
        """
        return re.search(pattern=self.block_start, string=line) is not None
