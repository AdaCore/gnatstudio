# for Emacs: -*- mode: org; mode: flyspell; fill-column: 79 -*-

# This table stores all project files info. In particular, it is used to check
# whether the current database applies to the project loaded in GPS.
# The intent is store the database in the project's object directory

| TABLE   | projects      | project  |       |                                  |
| id      | AUTOINCREMENT | PK       |       |                                  |
| path    | TEXT          | NOT NULL |       |                                  |
| name    | TEXT          | NOT NULL |       |                                  |
| is_root | BOOLEAN       |          | false | Whether this is the root project |

# Missing compared to Source_File_Record (this table also includes LI files)
#   - Entities: not needed, search for all references within that file,
#     filtering on reference kind (for instance "declaration")
#   - Scope_Tree_Computed: we should always compute it when loading the
#     database. In practice, we need for a lot of queries, so we might just
#     as well do it on the fly, that will not be much slower.
#
#  ??? Path comparison should be case insensitive, depending on the file system

| TABLE     | files              | file            |   |                                                                                                             |
| id        | AUTOINCREMENT      | PK              |   |                                                                                                             |
| path      | TEXT               | NOT NULL, INDEX |   | Full absolute path for the file                                                                             |
| stamp     | timestamp          | NOT NULL        |   | The timestamp the last time the file was read                                                               |
| language  | TEXT               | NOT NULL        |   | The language for this file (so that we can limit queries to specific languages). "ali" is a valid language. |
#| project   | FK projects(files) |                 |   | For LI files, checks whether the path has changed when the scenario changes                                 |

# Stores relationships between files
#   fileA depends on fileB
#   fileB is a ALI file for fileA

| TABLE | f2f_kind      |          |   |   |
| id    | AUTOINCREMENT | PK       |   |   |
| name  | TEXT          | NOT NULL |   |   |

| TABLE    | f2f                   |                       |   |                    |
| fromFile | FK files(links)       | PK, NOT NULL, NOINDEX |   |                    |
| toFile   | FK files(linked_from) | PK, NOT NULL, NOINDEX |   |                    |
| kind     | FK f2f_kind()         | PK, NOINDEX           |   | Kind of dependency |

# This table contains the "metaclasses" for the entities. These are not the
# types of the entities, but rather their general kind.

| TABLE                    | entity_kinds | entity_kinds |       |                                 |
| id                       | CHARACTER(1) | PK           |       |                                 |
| display                  | TEXT         | NOT NULL     |       | How to display this entity kind |
| is_subprogram            | BOOLEAN      |              | false |                                 |
| is_container             | BOOLEAN      |              | false |                                 |
| body_is_full_declaration | BOOLEAN      |              | false |                                 |

# Missing ?
#   - Live_Declaration : File_Location.  This seems independent of the ALI
#     info, and related to the completion database instead
#   - End_Of_Scope: seems we can directly look in the references, thus
#     removing special handling done in GPS when there is a scope in the
#     specs and one in the body.
#   - File_Timestamp_In_References.
#     This is related to iterators, might not be needed here
#   - Is_Valid: Not needed, we do atomic updates for a File so we will preserve
#     the ids of entities that still exist in a file.
#   - Trie_Tree_Index: will be stored independently. Perhaps a SQL's ILIKE
#     query replaces the need for a trie tree altogether.
#   - Is_Dummy: ???
#
#  ??? Name comparison should be case sensitive, depending on the language
#     Add "NOCASE" to the name attribute
#
# An entity is known by its name and the location of its declaration. An entry
# in this table cannot exist without a corresponding declaration. To make
# queries faster (when loading ALI files), we thus store the declaration
# directly in this table, rather than as a reference. This speeds up the check
# whether an entity already exists in the table, and removes one INSERT when
# we need to create the entity.
#
# ALI files do not provide the closure of the needed entities: for instance,
# an entity A might be an instantiation of a generic entity B. But all the
# ALI file provides is the file and line where B is declared, not its column.
# In addition, B does not necessarily appear in a.ali. So we need a forward
# declaration for B (since we don't know its name, we insert a new unnamed entity
# at the given line and column -1). We'll try to complete it when b.ali is
# parsed eventually.

| TABLE           | entities                             | entity            |       |                                                                                                                                                                               |
| id              | AUTOINCREMENT                        | PK                |       |                                                                                                                                                                               |
| name            | TEXT                                 | NOT NULL          |       | The name can be empty for a forward declaration: the ALI file does not always contain the name of all entities it references (for instance the parent type for a tagged type) |
| kind            | FK entity_kinds()                    | NOT NULL, NOINDEX |       | The E_Kind for this entity                                                                                                                                                    |
| class_static    | BOOLEAN                              |                   | false | The various attributes for the entity                                                                                                                                         |
| static_local    | BOOLEAN                              |                   | false |                                                                                                                                                                               |
| protected_field | BOOLEAN                              |                   | false |                                                                                                                                                                               |
| public_field    | BOOLEAN                              |                   | false |                                                                                                                                                                               |
| private_field   | BOOLEAN                              |                   | false |                                                                                                                                                                               |
| virtual         | BOOLEAN                              |                   | false |                                                                                                                                                                               |
| is_abstract     | BOOLEAN                              |                   | false |                                                                                                                                                                               |
| decl_file       | FK files(references)                 | NOT NULL, NOINDEX |       | Set to -1 for a predefined entity                                                                                                                                             |
| decl_line       | INTEGER                              | NOT NULL          |       | Set to -1 for a predefined entity                                                                                                                                             |
| decl_column     | INTEGER                              | NOT NULL          |       | Set to -1 for a predefined entity                                                                                                                                             |
| imports         | TEXT                                 |                   |       | Name of imported entity, if any. Format is "lang,name"b                                                                                                                       |
| INDEX:          | name,decl_file,decl_line,decl_column |                   |       | For Query_Find_Predefined_Entity                                                                                                                                              |
| INDEX:          | decl_file,decl_line,decl_column      |                   |       | For Query_Find_Entity_From_Decl                                                                                                                                               |

# Store links between entities.
# For instance, pointer to the parent types, pointed type, returned type,
# renames, primitive operations, instantiation_Of, parameters
#   - Called_Entities: not stored here, it is enough to search the
#     References table using the caller information

| TABLE | e2e_kind      |          |   |   |
| id    | AUTOINCREMENT | PK       |   |   |
| name  | TEXT          | NOT NULL |   |   |

# entity-to-entity relationships.
# We cannot have a (fromEntity, toEntity, kind) primary key, because in some
# cases the relationships will be duplicated (for instance, the .gli format for
# C files sometimes improperly record columns for entities. Thus a C subprogram
# might appear to have the same parameter multiple times, although in reality
# each parameter is different but just appears to be on the same column):
#    37V31*gnu_dev_makedev{long long unsigned int} 55>1 55>1 55b1 60t1
#    55m1 __major{unsigned int}
#    55m1 __minor{unsigned int} 57r12

| TABLE      | e2e                      |                   |   |                                                                            |
| fromEntity | FK entities(links)       | NOT NULL          |   |                                                                            |
| toEntity   | FK entities(linked_from) | NOT NULL          |   |                                                                            |
| kind       | FK e2e_kind()            | NOT NULL, NOINDEX |   | The type of link. Defined through an enumeration type in Ada               |
| order_by   | INTEGER                  | NOT NULL          | 1 | Ordering among the references. Used for instance for subprogram parameters |

# The various kinds of references.

| TABLE             | reference_kinds | reference_kind |       |                                                                                  |
| id                | CHARACTER(1)    | PK             |       | The character found in the ALI file                                              |
| display           | TEXT            | NOT NULL       |       | How to display the reference                                                     |
| is_real           | BOOLEAN         |                | true  | Whether this is a ref to the entity (as opposed to an end-of-scope for instance) |
| is_read           | BOOLEAN         |                | false |                                                                                  |
| is_write          | BOOLEAN         |                | false |                                                                                  |
| is_end            | BOOLEAN         |                | false | Whether this ref. indicates the end of scope for entity's spec or body           |
| show_in_callgraph | BOOLEAN         |                | true  | Whether this ref. should be shown in the call graph                              |

# Missing ?
#   - Is_Declaration : Boolean
#     Instead, the declaration is represented as a special kind. Compared to
#     GPS current data structures, we store the declaration in this table
#     rather than as a field in Entities. This also provides a place to
#     store the caller_at_declaration
#
# We store instantiations as a string for now: currently, they are only used to
# display tooltips in GPS as to where an entity comes from. This can easily be
# parsed from the string. But the string also makes it easy to find all
# references from the same instance as the one the user clicked on, which would
# be harder (and slower) to do if we stored the instances in a separate table,
# where each instance potentially points to its parent.

| TABLE              | entity_refs             | entity_ref                |   |                                                               |             |                        |                                       |       |
| entity             | FK entities(references) | NOT NULL                  |   | The entity to which we have a reference                       |             |                        |                                       |       |
| file               | FK files(references)    | NOT NULL, NOINDEX         |   |                                                               |             |                        |                                       |       |
| line               | INTEGER                 | NOT NULL                  |   |                                                               |             |                        |                                       |       |
| column             | INTEGER                 | NOT NULL                  |   |                                                               |             |                        |                                       |       |
| kind               | FK reference_kinds()    | NOT NULL, NOINDEX         |   | Type of reference (same letter as in ALI files)               |             |                        |                                       |       |
| caller             | FK entities(calling)    | NULL, NOINDEX             |   | Enclosing entity at that location                             |             |                        |                                       |       |
| from_instantiation | TEXT                    |                           |   | The instances in which the ref occurs, in the form "file1     | line1,file2 | line2,..." where file1 | line1 is itself instantiated by file2 | line2 |
| INDEX:             | "file","line","column"  | entity_refs_file_line_col |   | # Do not include 'entity' to speed up Query_Set_Entity_Rename |             |                        |                                       |       |

# ??? CREATE INDEX entity_refs__loc on entity_refs (file,kind,line,column);
# See http://www.sqlite.org/queryplanner.html
