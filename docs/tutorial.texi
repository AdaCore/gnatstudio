\input texiplus   @c -*-texinfo-*-
@c %**start of header
@setfilename tutorial.info
@settitle GNAT Programming System Tutorial
@syncodeindex fn cp

@set GPSVersion 1.0.1

@titlepage

@title GNAT Programming System Tutorial
@subtitle Version @value{GPSVersion}
@subtitle Document revision level $Revision$
@subtitle Date: $Date$
@author ACT-Europe

@page
@vskip 0pt plus 1filll

Copyright @copyright{} 2002, ACT-Europe.
This document may be copied, in whole or in part, in any form or by any
means, as is or with alterations, provided that (1) alterations are clearly
marked as alterations and (2) this copyright notice is included
unmodified in any copy.

@end titlepage

@ifinfo
@node Top, Introduction, (dir), (dir)
@top GNAT Programming System Tutorial

GNAT Programming System Tutorial

Version @value{GPSVersion}

Date: $Date$

Copyright @copyright{} 2002, ACT-Europe.
This document may be copied, in whole or in part, in any form or by any
means, as is or with alterations, provided that (1) alterations are clearly
marked as alterations and (2) this copyright notice is included
unmodified in any copy.

@menu
* Introduction::
* Quick overview of the GPS areas::
* Integrated Help for GNAT tools::
* Editing sources::
* Building applications::
* Source Navigation::
* Search Area::
* Project Explorer (entities)::
* Back to Source Navigation::
* Run::
* Debug::
* Call Graph::
* Back to Source navigation again::
* Projects::
* Epilogue::

@end menu
@end ifinfo

@c --------------------------------------------------------------------
@node Introduction
@chapter Introduction
@c --------------------------------------------------------------------

@noindent
This document provides a guide through the major capabilities
of the GNAT Programming System by working on a code example: sdc, a simple
desktop calculator.

It is important to realize that the features that you are about to
experiment with are available on multiple platforms, using the same user
interface and capabilities, providing a user-friendly environment
with a tight integration between the tools.

Start GPS in the directory containing the tutorial files, or if the directory
is read-only, copy the @file{tutorial} directory and its subdirectories in a
local (writable) area, and start GPS from the @file{tutorial} directory, so
that GPS will load the right context.

By default, the tutorial sources can be found under
@code{<prefix>/doc/gps/examples/tutorial}, where @code{<prefix>} is the
prefix directory of the GPS installation.

Alternatively, if you have already started GPS in another directory, you
can load the project @code{sdc.gpr} by using the menu @code{Project->Open...}

If you are reading this document from GPS itself, we recommend that you
select the window displaying this document by cliking on it: the title
bar should be displayed in @i{blue}; then select the menu item
@code{Window->Floating}: this will move the @i{Help} window outside GPS
itself, allowing you to easily read this document while following the
tutorial steps in the main window of GPS.

@c --------------------------------------------------------------------
@node Quick overview of the GPS areas
@chapter Quick overview of the GPS areas
@c --------------------------------------------------------------------

@noindent

Having launched GPS, you should now have access to a main window composed of
several areas:

@itemize @bullet
@item a menu bar at the top
@item a tool bar under the menu bar
@item a search area under the tool bar, on the left side
@item a project explorer located under the search area
@item a working area on the right of the search area and project explorer
@item a messages window under the working area
@item a status bar at the bottom left
@item a progress bar at the bottom right
@end itemize

@c --------------------------------------------------------------------
@node Integrated Help for GNAT tools
@chapter Integrated Help for GNAT tools
@c --------------------------------------------------------------------

@noindent

By default when you start GPS, the working area contains a help window
displaying HTML help files. On-line help for the GNAT tools is available
from the @code{Help} menu item.

@c --------------------------------------------------------------------
@node Editing sources
@chapter Editing sources
@c --------------------------------------------------------------------

@noindent

In the project explorer, click on the @code{common} icon, then
open the @code{common} directory by clicking
on the @code{[+]} box on the left of @code{common}.
This will open the directory and display a list of source files located
in this directory.

Now, double click on @file{sdc.adb}: this will open a source editor on this
file. You will notice that the source code is syntax-highlighted
(keywords, comments, strings have different colors).

As with many other properties, colors are configurable in GPS:

Select the menu @code{Edit->Preferences}. This will open a preferences
dialog window.

Select the @code{Editor} page by clicking on the tab named @code{Editor}.
Similarly, select the @code{Fonts & Colors} page.

As you go over the various lines and labels, you will notice that by
holding the mouse over a label, a tooltip pops up displaying on-line help
about the selected item.

Change the @code{Keyword color} by clicking on the down arrow on the right
of the @code{Keyword color} line.

Choose a color, e.g a light green. When you're done with the color
selection, simply click again on the arrow, or anywhere outside the
color selection area.

Click on the @code{Apply} button and look at the effects in the source
editor. If you like the new display, click on @code{OK} to confirm the
changes, otherwise clicking on @code{Cancel} will revert to the previous
(black) color.

@c --------------------------------------------------------------------
@node Building applications
@chapter Building applications
@c --------------------------------------------------------------------

@noindent

Select the menu @code{Build->Make->sdc.adb}: this will launch a complete
build of the @i{sdc} application. You may also notice that a key binding
is associated with this menu item (@key{F4}).

If you look at the progress bar, you will notice that while the build is in
progress the state of the compilation is displayed, giving you
the current number of files compiled, and the number of remaining files.

The build has generated a number of errors in the messages window, which
are highlighted in red.

Scroll to the first error message by using the scrollbar on the right of
the messages window, and
click on the first error message (@i{sdc.adb:28:06: (style) bad indentation})
to jump to the @file{sdc.adb} source editor,
at the line (28) and column (06) of the error.

Fix the error by hand by inserting a space.

Now you can fix the next error by moving the cursor to the line 30 (press
the @key{down} arrow twice), and by using @key{Ctrl-Tab} (press first the
@key{Control} key, and then the @key{Tab} key on your keyboard): this key
combination asks the source editor to automatically re-indent the current
line.

Note that on some window managers or desktop environments,
@key{Ctrl-Tab} is already defined. If this is the case, you can change this
shortcut from the preferences dialog (menu @code{Edit->Preferences},
@code{Editor} tab).

You can then fix all the remaining errors by selecting the whole block
(from line 28 to line 40) and pressing @key{Ctrl-Tab}.

Press the @key{F4} key to build again. You will be asked to save the file
@file{sdc.adb} before the build starts. Confirm by clicking on @code{Yes}.
This should now report a successful build.

@c --------------------------------------------------------------------
@node Source Navigation
@chapter Source Navigation
@c --------------------------------------------------------------------

@noindent

Now let's try to understand a little bit about how the program is working by
looking at the @file{sdc.adb} editor: there's a loop, the main processing is
done by the functions Process and Next (at line 30).

Move the mouse over @code{Process} and let a tooltip appear
(@file{tokens.ads:19}): this is the location (file and line) of the
procedure specification.

Do the same for @code{Next} (@file{tokens.ads:15}).

Keeping the mouse over @code{Next}, display the contextual menu by clicking on
the right mouse button,
then click on @code{Goto declaration of Next}: we're now in the package
@code{Tokens}, in file @file{tokens.ads}; but where is this file in the project?

@c --------------------------------------------------------------------
@node Search Area
@chapter Search Area
@c --------------------------------------------------------------------

@noindent

Click in the @code{Search for:} text entry. Type @file{tokens.ads}. Then
select @code{Project explorer} in the @code{Look in:} area. The search
area provides an easy way to search for text or regular expressions in
several contexts including the current file, the project explorer, the help
window, ...

Now click on @code{Find}. The file @file{tokens.ads}, in directory @code{struct}
is highlighted.

@c --------------------------------------------------------------------
@node Project Explorer (entities)
@chapter Project Explorer (entities)
@c --------------------------------------------------------------------

@noindent
Click on the @code{[+]} sign to open @file{tokens.ads} entities.
When you click on a file in the explorer, you get
language sensitive information about the file, such as
@code{packages}, @code{subprograms}, @code{tasks}, ... for @code{Ada}.

Open the @code{subprogram} category, click on @code{Process}: this
will open @file{tokens.ads} and move the cursor on the first line
corresponding to the procedure @code{Process}.

Similarly, click on @code{Next}, and move your mouse on @code{Next}
in the source editor.

@c --------------------------------------------------------------------
@node Back to Source Navigation
@chapter Back to Source Navigation
@c --------------------------------------------------------------------

@noindent

Using the contextual menu, select @code{Goto body of Next};
scroll through the procedure @code{Next}, and move mouse on
@code{Instructions.Read} at line 46, click on Read, and from the
contextual menu, select @code{Goto body of Read}.

We've now navigated quite a bit through the application source code,
which you can verify by clicking on the left arrow in the toolbar, to go
back to the previous location visited.

Repeat the operation until you're back in @file{sdc.adb}.
Note that the @code{goto previous/next location} is infinite, as is the
undo/redo capability in the source editor.

@c --------------------------------------------------------------------
@node Run
@chapter Run
@c --------------------------------------------------------------------

@noindent
It is now time to run the application: select the menu
@code{Build->Run->sdc}, which will open a dialog window.
Type @code{input.txt} in the text entry: this is the name of a text
file that will be passed as argument to the @i{sdc} program.

Now click on @code{OK}: the program displayed an unexpected internal error
in the messages window.
That's a good opportunity to use the integrated debugger.

@c --------------------------------------------------------------------
@node Debug
@chapter Debug
@c --------------------------------------------------------------------

@noindent

Open the preferences dialog (menu @code{Edit->Preferences}) and
click on the @code{Debugger} tab on the left; set the button
@code{Break on exceptions} to @i{True}: this will enable by default a special
breakpoint every time an exception is raised. Click on @code{OK} to confirm your
change.

Now select the menu @code{Debug->Initialize->sdc}: two new windows are
created, a data window and a debugger console.
You can also look at the various debug menu item and toolbar buttons which are
now activated.

Use the menu @code{Debug->Data->Call Stack}: this opens a new area in
the data window. If you select the contextual menu in the call stack,
you will notice that various pieces of information can be displayed or
removed in the call stack.  From this contextual, remove the
@code{Parameters} info by clicking on it.

Now select the menu @code{Debug->Run...}, type @code{input.txt} in the
arguments text entry, click on @code{OK}: the debugger stops on an exception
(@code{Contraint_Error} in the file @file{stack.adb}, at line 49).

Go up two frames by clicking on the @code{tokens.process} line in the call
stack. If needed, use the scrollbar on the right.

If you move the mouse over the parameter @code{T} at line 64, a tooltip is
displayed showing the value of @code{T}.

Select the contextual menu @code{Debug->Display T}: this displays in the data
window a box containing the different fields of @code{T}, each clearly
separated.

On @code{T} data display, select the contextual menu
@code{Show Value + Type}: this displays for all fields both their type and
value.

Special colors are used in the data display: blue for pointers that can be
dereferenced by a double-click (double click on @code{T.val}); red for fields that
have been modified since last step.

In the contextual menu that pops up when you hold the mouse over @code{T}.
select @code{View memory at &T}: the
memory view is opened.
Use the @code{up} and @code{down} arrows to visit memory.

Click in the memory dump, and modify it by typing numbers. Notice the
red color for modified values;
click on @code{Undo Changes} to cancel the modifications;
click on @code{Close} to close the memory window.

In the call stack, go back to @code{stack.push} frame.
Fix the current line to @code{Last := Last + 1;}

Save file (@key{Ctrl-S});
End the debug session: menu @code{Debug->Terminate};
Rebuild (press @key{F4} key);
Rerun (menu @code{Build->Run->sdc}): the program now completes as expected.

@c --------------------------------------------------------------------
@node Call Graph
@chapter Call Graph
@c --------------------------------------------------------------------

@noindent
Now go back to the file @file{sdc.adb}, move the mouse over the procedure
@i{sdc} at line 8, select the contextual menu
@code{References->Sdc calls...}: this will open a new window titled
@i{Call graph browser}.

Double click on the right arrow of @code{Process} (one of the first items on
the right). Also double click on the right arrow of @code{error_msg}.

Select @code{Orthogonal links} in the contextual menu of the graph to change the
way links are displayed in the graph.
Click on the canvas, then play with the zoom (@key{=} and @key{-} keys).

If you select @code{Hide links} from @code{error_msg} contextual menu, this
will hide all the links that are related to this item: the link between the
callers and callees of @code{error_msg} are no longer displayed. This can
be useful when the graph becomes complex, to hide some parts. If you go back to
the contextual menu, you can now select @code{Show links} to show the links
again.

Double click on right arrow of @code{process} (@file{instructions.ads:12},
the item at the top right of the graph).

The items can also be moved: move @code{msg} item down.

Double click on left arrow of @code{msg}
to display who is calling @code{msg}. Notice that @code{view} (on the left
of the graph) calls @code{msg}.

Double click on left arrow of @code{view}: the arrow disappears, and no
new items are created, which means that @code{view} isn't called by anyone,
so we're now going to remove this procedure.

@c --------------------------------------------------------------------
@node Back to Source navigation again
@chapter Back to Source navigation again
@c --------------------------------------------------------------------

@noindent
From @i{view}, select the contextual menu @code{Go to spec};
then from the source editor (file @file{stack.ads}), @code{Go to body of View}.
Remove @i{View} body by e.g selecting it, and pressing the @key{Delete} key,
then save the file (@key{Ctrl-S}).

Click on @code{Goto Previous Location} (left arrow in the toolbar),
remove @code{View} spec, Save the file.

Close the @file{stack.ads} and @file{stack.adb} files (menu File->Close,
or using the shortcut @key{Ctrl-W}).
Rebuild by pressing the @key{F4} key.

@c "Let's now have a look at all the changes we've done so far, by looking at
@c  the version control system explorer, aka VCS explorer"

@c --------------------------------------------------------------------
@c @node Version Control
@c @chapter Version Control
@c --------------------------------------------------------------------

@c @noindent
@c From the project explorer, contextual menu on project @i{sdc}, select
@c @code{VCS->Query status for project}. The VCS Explorer is opened, listing the
@c files in the project.
@c => Explain the use of icons for status, log files, ...
@c => The list can be sorted by status or by file name, by clicking
@c on the @code{Status} and @code{File name} labels.

@c Move the mouse over @file{stack.ads}, select the contextual menu
@c @code{Compare against head revision}:
@c this will open a visual comparison between the version in the repository,
@c and the local (modified) file; You can see that scrolling is synchronized
@c between the two files, and that colors are used to show lines
@c added, removed and modified.

@c Close the Visual Comparison window

@c Go back to the VCS Explorer

@c On @file{stack.ads}, contextual menu, @code{Edit changelog}

@c In the change log, type a log, e.g: @code{(View): Removed, since unused}

@c Save and close the log editor.
@c This log file will now associated with @file{stack.ads} until the
@c next check in.

@c Go back to the VCS Explorer, @file{stack.ads} has now an icon
@c showing that a log is associated with this file.

@c On @file{stack.ads}, commit the file using the contextual menu,
@c entry @code{Commit}.

Let's now see how to create a project corresponding to the @i{sdc}
project we've used in this tutorial.

@c --------------------------------------------------------------------
@node Projects
@chapter Projects
@c --------------------------------------------------------------------

@menu
* Project Wizard::
* Project properties::
* Variable editor::
* Switch editor::
* Source dependencies::
* Project dependencies::
@end menu

@node Project Wizard
@section Project Wizard
@noindent

@b{WARNING}: while in the project wizard, you will not be able to scroll through the
tutorial if you are reading it within GPS. You may want to resize the window
now so that the entire section on the wizard is visible, or reopen the tutorial
in another browser.

Go to the menu @code{Project->New...}: this is a standard wizard, with various
steps listed on the left area of the window.

Type @i{sdc2} in the project name field.
It is possible to create a multi-language project by selecting the C or C++
check box.

Click on @code{Forward}: we are now on the @code{VCS page}. @i{VCS} stands
for @i{Version Control System}.
GPS has a generic support for @i{VCS} which allows it to easily support
new systems. Currently GPS supports CVS and ClearCase.

Select @code{CVS}.

Click on @code{Forward}: this is the source directories selection,
used to specify the project's sources.

Open @file{tutorial}, click on @code{common}, and add it by clicking on the
left arrow.

Select the @file{tutorial} directory in the bottom area, and remove it by
clicking on the right arrow.

As for common, add @code{struct} directory.

Click on @code{Forward}: this is the @code{Build} and @code{Exec} directory
selection, used to store object, ali files, ...

Click on @code{Browse}, open @file{tutorial}, click on @code{obj}, click on
@code{OK}.

Click on @code{Forward}: this is the main units selection, used mainly for
building executables and debugging.

Click on @code{Add}, select the @code{common} directory on the left, click on
@code{sdc.adb} on the right, click on @code{OK}.

Click on @code{Forward}: we're now in the switch selector.
Select @code{Recompile if switches changed}, @code{Debug information}.

Click on @code{Ada} page.

Select @code{Style checks} and @code{Warning=Error}.
The boxes and the command line (the text entry at the
bottom of the page) are fully synchronized, e.g if you click on the
command line, and change @code{-gnatwe} to @code{-gnatw}, the
@code{Warning=Error} check box is unselected; now type @code{u} to get
@code{-gnatwu}, and notice that @code{Unused vars warning} is now selected.
Unselect it, and select @code{Warning=Error} again.

Click on @code{Forward}: this is the naming scheme editor.
GNAT is very flexible and can use any kind of naming scheme for Ada files.
In particular, you can easily set the default file
extensions (e.g by using one of the predefined schemes) and you
can also specify exceptions that use non standard file names.

Click on @code{Forward}: voila, we've created a project similar to the one
used in this tutorial.

Click on @code{Cancel} to close the wizard.

@node Project properties
@section Project properties
@noindent

In the project explorer, on the project @i{sdc}, use the contextual menu
@code{Edit project properties}.
All the properties set in the project wizard can be found here as well.
You can also switch between pages by clicking on the tabs.

Once you're done exploring the property pages, click on the @code{Cancel}
button to close the properties window.

@node Variable editor
@section Variable editor
@noindent

You have probably noticed the @code{Build} label between the search area and the
project explorer. This is a configuration variable. With GPS and the GNAT
project facility, you can define as many configuration variables as you want,
and modify any project settings (e.g switches, sources, ...) based on the
values of configuration variables. These variables can also take any
number of different values.

The @code{Build} variable shows a typical @code{Debug/Production} configuration
where we've set different switches for the two modes.

Click on the arrow at the right of the @code{Build DEBUG} entry and look at
the two values defined.

Now click on the button at the left (@code{Edit variable properties}): this
is the variable editor, where values can be added or renamed.
Close the variable editor by clicking on the @code{Cancel} button.

Now, let's take a look at the switches set in the project.

@node Switch editor
@section Switch editor
@noindent

Select the menu item @code{Project->Edit switches}: a global
switch editor is displayed in the working area.
This editor lists the switches associated with each file and
the gray area shows the default (global) switches; you will also notice
that @file{output.adb} has specific switches, which are highlighted using a
different font.

Switch between @code{Debug} and @code{Production} mode in the @code{Build}
combo box: the switches are updated at the same time.

Back to our project, let's now examine the dependencies between sources.

@node Source dependencies
@section Source dependencies
@noindent

Select @file{sdc.adb} in the explorer and then the contextual menu item
@code{Examine dependencies for sdc.adb}: this will open a new graph showing
the dependencies between sources of the project.

Double click on the right arrow of @file{tokens.ads} to display the files that
@file{tokens.ads} depends on. Similarly, double click on the right arrow of
@file{stack.ads}.

@node Project dependencies
@section Project dependencies
@noindent

On the @i{sdc} project, select the contextual menu
@code{Add dependency->From project file...}, then open the @i{sdc} directory and click
on the @code{projects} subdirectory. Select the file @code{prj1.gpr}.

You can see the new dependencies added in the project explorer, as a tree of
projects. In particular, project dependencies are duplicated: if you open
the @code{prj1} icon by clicking on the @code{[+]} sign, and then
similarly open the @code{prj2} icon, you will notice that the project
@file{prj4} is displayed twice: once as a dependency of @code{prj2}, and
once as a dependency of @file{prj1}.

GPS can also display the graph of dependencies between projects: on @i{sdc}
project, use the contextual menu
@code{Examine project hierarchy for sdc}: this will open a project hierarchy
browser.

In the browser, You can move the project items, and select them to highlight
the dependencies.

Close the project browser by clicking on the @code{[x]} sign at the top right
area of the window, or by typing @key{Ctrl-W}, or by using the menu
@code{File->Close}.

On @i{prj1} project, select the contextual menu
@code{Remove dependency sdc -> prj1} to remove the dependency added between
@i{sdc} and @i{prj1}.

@c --------------------------------------------------------------------
@node Epilogue
@chapter Epilogue
@c --------------------------------------------------------------------

@noindent
This terminates our tour of GPS, the GNAT Programming System.
We hope this tutorial gave you a good overview of the general capabilities
available with GPS. A non exhaustive list of the features not mentioned in
this document includes:

@itemize @bullet
@item Automatic generation of body files
@item Pretty printing
@item Visual comparison of files
@item Version control
@item Flexible multiple document interface
@end itemize

For more information, please look at the @i{User's Guide} (@url{gps.html}).

@c @printindex cp

@contents

@bye
