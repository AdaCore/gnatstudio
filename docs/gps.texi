\input texiplus   @c -*-texinfo-*-
@c %**start of header
@setfilename gvd.info
@settitle Using GPS
@syncodeindex fn cp

@set GPSVersion 0.9.1

@titlepage

@title Using GPS
@subtitle Version @value{GPSVersion}
@subtitle Document revision level $Revision$
@subtitle Date: $Date$
@author ACT-Europe

@page
@vskip 0pt plus 1filll

Copyright @copyright{} 2001-2002, ACT-Europe.
This document may be copied, in whole or in part, in any form or by any
means, as is or with alterations, provided that (1) alterations are clearly
marked as alterations and (2) this copyright notice is included
unmodified in any copy.

@end titlepage

@ifinfo
@node Top, Introduction, (dir), (dir)
@top Using GPS

Using GPS

GPS, the GNAT Programming System

Version @value{GPSVersion}

Date: $Date$

Copyright @copyright{} 2001-2002, ACT-Europe.
This document may be copied, in whole or in part, in any form or by any
means, as is or with alterations, provided that (1) alterations are clearly
marked as alterations and (2) this copyright notice is included
unmodified in any copy.

@menu
* Introduction::
* Description of the Main Windows::
* Editing File::
* Project Handling::
* Compilation/Build::
* Source Navigation::
* Source Browsing::
* Debugging::
* Version Control System::
* Preferences/Settings::
* Working in a cross environment::
* Customization::
* Environment::

@detailmenu

 --- The Detailed Node Listing ---

Description of the main windows
* The Menu Bar::
* The Tool Bar::
* The Work Space::
* The Search Area::
* The Project Explorer::
* The Console::
* The Status Line::


Editing File
* General Information::
* Navigation in the Source Editor::
* Indentation::
* Cross References::
* Using an External Editor::


Project Handling


Compilation/Build


Source Navigation
* Spec/Body::
* Cross References::


Source Browsing
* General Issues::


Debugging


Version Control System


Preferences/Settings


Working in a cross environment
* Customizing your projects::
* Debugger issues::


Customization
* Customizing the Menu Bar::
* Customizing the Tool Bar::
* Changing Colors Fonts and Key Bindings::


Environment
* Command Line Options::
* Environment Variables::
* Files::
* Reporting Suggestions and Bugs::

@end detailmenu
@end menu
@end ifinfo

@c --------------------------------------------------------------------
@node Introduction
@chapter Introduction
@c --------------------------------------------------------------------

@noindent
GPS is a complete integrated development environment that gives access
to a wide range of tools and integrates them smoothly.

This version is considered as beta software, meaning that you may encounter
some instabilities or some missing features. For this reason we will
particularly welcome bug reports, as well as suggestion for possible
improvements (see @ref{Reporting Suggestions and Bugs}).

GPS gives access to built-in file editing; HTML based help system;
complete compile/build/run cycle; intelligent source navigation;
project management; general graph technology giving access to many different
browsers such as source dependency, project dependency, call graphs, etc...;
fully integrated visual debugger, based on the GVD technology, and enhanced
for inclusion in GPS; generic version control system, providing access
to CVS, ClearCase, and possibly others in the future; many other tools
such as a visual comparison, automatic generation of files, source reformatting.

GPS is fully customizable, providing several levels of customizations:
a first level, available through the preferences dialog (see
@ref{Preferences/Settings}); a second level, which allows you to
customize your menu items, tool bar and key bindings (see @ref{Customization}),
and a third level, which allows any kind of very specific or tight
integration, due to the open nature of GPS, and to its architecture.

GPS also integrates with existing editors such as Emacs and Vi, see
@ref{Using an External Editor}.

@c --------------------------------------------------------------------
@node Description of the Main Windows
@chapter Description of the Main Windows
@c --------------------------------------------------------------------

@menu
* The Menu Bar::
* The Tool Bar::
* The Work Space::
* The Search Area::
* The Project Explorer::
* The Console::
* The Status Line::
@end menu

@node The Menu Bar
@section The Menu Bar
@noindent

@node The Tool Bar
@section The Tool Bar
@noindent

@node The Work Space
@section The Work Space
@noindent

@node The Search Area
@section The Search Area
@noindent

@node The Project Explorer
@section The Project Explorer
@noindent

@node The Console
@section The Console
@noindent

@node The Status Line
@section The Status Line
@noindent

@c --------------------------------------------------------------------
@node Editing File
@chapter Editing File
@c --------------------------------------------------------------------

@menu
* General Information::
* Navigation in the Source Editor::
* Indentation::
* Using an External Editor::
@end menu

@node General Information
@section General Information
@noindent

@node Navigation in the Source Editor
@section Navigation in the Source Editor
@noindent

It is also possible to specify additional or alternate key bindings,
in particular the standard Emacs key bindings can be used in the source
editor, see @ref{Changing Colors Fonts and Key Bindings}.

@subsection Editing
@table @b
@item Ctrl-x
Cut to clipboard

@item Ctrl-c
Copy to clipboard

@item Ctrl-s
Save file to disk

@item Ctrl-v
Paste from clipboard

@item Ctrl-z
Undo previous insertion/deletion

@item Ctrl-r
Redo previous insertion/deletion

@item Insert
Toggle overwrite mode
@end table

@node Indentation
@section Indentation
@noindent

@c --------------------------------------------------------------------------
@node Using an External Editor
@section Using an External Editor
@c --------------------------------------------------------------------------

@noindent

GPS is fully integrated with a number of external editors, in
particular @file{Emacs} and @file{vi}. The choice of the default
external editor is done in the preferences. The following values are
recognized:

@table @file
@item gnuclient
This is the recommended client. It is based on Emacs, but needs an
extra package to be installed. This is the only client that provides a
full integration in GPS, since any extended lisp command can be sent
to the Emacs server.

By default, gnuclient will open a new Emacs frame for every file
that is opened. You might want to add the following code to your
@file{.emacs} file (create one if needed) so that the same Emacs frame
is reused every time:

@smallexample
   (setq gnuserv-frame (car (frame-list)))
@end smallexample

See @url{http://www.hpl.hp.co.uk/people/ange/gnuserv/} for more information.


@item emacsclient
This is a program that is always available if you have installed
Emacs. As opposed to starting a new Emacs every time, it will reuse an
existing Emacs session. It is then extremely fast to open a file.


@item emacs
This client will start a new Emacs session every time a file needs to
be opened. You should use @file{emacsclient} instead, since it is much
faster, and makes it easier to copy and paste between multiple
files. Basically, the only reason to use this external editor is if
your system doesn't support @file{emacsclient}.


@item vim
@file{Vim} is a vi-like editor that provides a number of enhancements,
for instance syntax highlighting for all the languages supported by
GPS. Selecting this external editor will start an xterm (or command
window, depending on your system) with a running vim process editing
the file.

Note that one limitation of this editor is that if GPS needs to open
the same file a second time, it will open a new editor, instead of
reusing the existing one.

To enable this capability, the xterm executable must found in the PATH,
and thus is not currently supported on Windows systems.


@item vi
This editor works exactly like vim, but uses the standard @file{vi}
command instead of @file{vim}.


@item none
No external editor is used, and the contextual menus simply won't
appear.
@end table


In the cases that require an Emacs server, GPS will try several
solutions if no already running server was found. It will first try to
spawn the glide environment distributed with GNAT. If not found in the
PATH, it will then start a standard Emacs.


In the preferences, there are two settings that allow you to select
the external editor (if left to an an empty string, GPS will
automatically select the first editor available on your system) and
whether this editor should always be used every time you double-click
on a file, or whether you need to explicitely select the contextual
menu to open the external editor.

@c --------------------------------------------------------------------
@node Source Navigation
@chapter Source Navigation
@c --------------------------------------------------------------------

@menu
* Spec/Body::
* Cross References::
@end menu

@node Spec/Body
@section Spec/Body
@noindent

@node Cross References
@section Cross References
@noindent

GPS provides cross-references for all the entities defined in your
application, as well as some advanced browsers like a call graph.
For this to work, it needs some help from external tools, specific to
each of the supported languages.

@table @command
@item Ada
The GNAT compiler itself is used to generate the cross-references
information. This means that you need to compile your application to
get access to this feature or the various graphs. GPS doesn't provide
automatic recompilation at the moment, although this is a planned
feature. If your sources have been modified, you should recompile the
modified files.

If you need to navigate through sources that are not fully compilable
(e.g after heavy modifications, or while porting an application), GNAT
can still generate partial information if you specify the @code{-gnatQ}
compilation option. Along with the @code{-k} option of gnatmake, it is
then possible to generate as much relevant information as possible for a
complete set of non compilable sources.

There are a few special cases where GPS can not find the external file
(called @file{ALI file}) that contains the cross-references
information. Most likely, this is either because you haven't compiled
your sources first, or because the source code has changed since the
@file{ALI file} was generated.

It could also be that you haven't included in the project the object
directories that contain the @file{ALI files}.

In addition, one special case can not be handled automatically. This
is for separate units, whose file name have been krunched through the
@file{gnatkr} command. To handle this, you should force GPS to parse
all the @file{ALI files} in the appropriate object directory. This is
done by right-clicking on the object directory in the explorer
(left-side panel on the main window), and selecting the menu "Parse
all xref information".

@item C/C++
To enable the navigation features for C and C++ source files, you need
to first generate a database of symbol references, by going through the
menu Build->Recompute Xref information. Messages in the console window
will indicate the state of the processing. Due to the nature of these
languages, in order to provide accurate cross references, GPS needs to
generate the database in two phases: a first pass parses all the files
that have been modified since the previous parsing, and a second pass
generates global cross references by analysing the complete database.
It is thus expected that for large projects, this phase can take a
significant amount of cpu to proceed.

In some cases, GPS won't be able to determine the exact function involved
in a cross reference. This will typically occurs for overloaded functions,
or if multiple functions with the same name, but under different
@code{#ifdef} sections, are defined. In this case, GPS will display a
dialog listing the possible choices to resolve the ambiguity.

In addition, the C/C++ parser has the following limitations: namespaces
are currently ignored (no specific processing is done for namespaces);
no attempt is made to process the macros and other preprocessor defines.
Macros are considered as special entities, so it is possible to navigate
from a macro use to its definition, but the contents of the macro itself
is ignored, which means for example that function calls made through macros
won't be detected.

@end table

@c --------------------------------------------------------------------
@node Project Handling
@chapter Project Handling
@c --------------------------------------------------------------------

@noindent
To handle projects, GPS uses the GNAT project file facility, as described
in the GNAT User's Guide (@url{gnat_ug.html}) and in the GNAT Reference
Manual (@url{gnat_rm.html}). For a best use of the project capabilities, it
is recommended to first become familiar with this documentation.

The project files are text files following a syntax close to Ada, it is thus
possible to edit and modify them by hand, as well as generating them and
loading them within GPS, both manual and automatic generation can be
mixed. For example, you can first generate projects automatically using
the @i{Project Wizard}, and then modify them by hand.

All the non graphical GNAT tools are project aware, meaning that the notion
of project goes well beyond GPS' user interface, and most capabilities of
the project file can be accessed without using GPS itself, making the
project files very attractive.

@c --------------------------------------------------------------------
@node Compilation/Build
@chapter Compilation/Build
@c --------------------------------------------------------------------

@c --------------------------------------------------------------------
@node Source Browsing
@chapter Source Browsing
@c --------------------------------------------------------------------

@menu
* General Issues::
@end menu

@node General Issues
@section General Issues
@noindent

@c --------------------------------------------------------------------
@node Debugging
@chapter Debugging
@c --------------------------------------------------------------------

@noindent
Debugging is tightly integrated with the other components of GPS, in
particular it is possible to edit files and navigate through your sources
while debugging.

To start a debug session, go to the menu @code{Debug->Initialize}, and choose
either the name of your executable, if you have specified the name of
your main program(s) in the project properties, or start an empty debug
session using the @code{<no main file>} item. It is then possible to load
any file to debug, by using the menu @code{Debug->Debug->Load File...}.

After the debugger has been initialized, you have access to two new windows:
the data window (in the top of the working area), and the debugger console
(in a second page, after the GPS console). All the menus under @code{Debugger}
are now also accessible, and you also have access to additional contextual
menus, in particular in the source editor where it is possible to easily
display variables, set breakpoints, and get automatic display (via @i{tooltips})
of object values.

During a debugging session, you can use all the facilities provided by GVD.
See the GVD documentation (@url{gvd.html}) for a complete description
of these functionalities.

Once your debug session is terminated, go to the menu @code{Debug->Terminate},
which will terminate your debug session, by closing the data window and the
debugger console, as well as terminating the underlying debugger
(e.g @code{gdb}) used by GPS to handle the low level debugging.

@c --------------------------------------------------------------------
@node Version Control System
@chapter Version Control System
@c --------------------------------------------------------------------

@c --------------------------------------------------------------------
@node Preferences/Settings
@chapter Preferences/Settings
@c --------------------------------------------------------------------

@c --------------------------------------------------------------------
@node Working in a cross environment
@chapter Working in a cross environment
@c --------------------------------------------------------------------

@menu
* Customizing your projects::
* Debugger issues::
@end menu

@node Customizing your projects
@section Customizing your projects
@noindent

@node Debugger issues
@section Debugger issues
@noindent

@c --------------------------------------------------------------------
@node Customization
@chapter Customization
@c --------------------------------------------------------------------

@menu
* Customizing the Menu Bar::
* Customizing the Tool Bar::
* Changing Colors Fonts and Key Bindings::
@end menu

@node Customizing the Menu Bar
@section Customizing the Menu Bar
@noindent

The GPS menu bar can be customized through an XML file called
@file{custom} in the gps home directory (@file{~/.gps} on Unix
systems).

Here is an example for such a file:

@smallexample
<?xml version="1.0"?>

<Custom>

  <Submenu>
    <Title>custom menu</Title>

    <Menuitem>
    <Title>item 1</Title>
      <Action>shell command 1</Action>
    </Menuitem>

    <Submenu>
      <Title>other menu</Title>
      <Menuitem>
        <Title> (etc..)
      </Menuitem>

      <Submenu>
        (...)
      </Submenu>
    </Submenu>
  </Submenu>

  <Submenu>
    <Title>custom menu number 2</Title>
    (...)
  </Submenu>

 </Custom>
@end smallexample

The example above creates a two toplevel menus, named @file{custom menu}
and @file{custom menu number 2}. The first one contains a menu item named
@file{item 1}, which is associated to the shell command @file{shell command
1}, and a submenu named @file{other menu}, and so on.

You can define the accelerator keys for your menus, using underscores
in the titles. Thus, if you want an accelerator on the first letter in
a menu named @file{File}, set its title as @file{_File}.

You can add items or submenus to existing menus, using titles for
menus that already exist. For example, this adds an item named
@file{Robert} to the @file{Edit} menu.

@smallexample
<Submenu>
  <Title>Edit</Title>
  <Menuitem>
    <Title>Robert</Title>
  </Menuitem>
</Submenu>
@end smallexample

Use the @file{/} separator to identify the submenu in a menu. For
example, this adds a submenu named @file{Olga} containing an item named
@file{Item} to the @file{Edit} menu.

@smallexample
<Submenu>
  <Title>Edit/Olga</Title>
  <Menuitem>
    <Title>Item</Title>
  </Menuitem>
</Submenu>
@end smallexample

Adding an item with an empty title or no title at all inserts a
menu separator.

You can use macro arguments to pass to your shell
commands. Macro arguments are special parameters that are transformed
every time that the command is about to be executed. The following
macro arguments exist in GPS:

@table @file
@item %f
Base name of the currently opened file.

@item %F
Absolute name of the currently opened file.

@item %p
The current project.

@item %P
The root project.

@item %(p|P)[r](d|s)[f]
Substituted by the contents of a project :

P : the project is the root project

p : the project is the current project

r : indicates that the listing should be project-recursive, ie that
sub-projects should be listed as well, and their subprojects, and so
on. 

d : list the source directories

s : list the source files

f : output the list into a file and substitute the parameter with the
name of that file. 
@end table

Examples :

@table @file

@item %Ps
Replaced by a list of source files in the root project.

@item %prs
Replaced by a list of files in the current project, and all imported
subprojects, recursively.

@item %prdf
Replaced by the name of a file that contains a list of source
directories in the current project, and all imported subprojects,
recursively.
@end table


@node Customizing the Tool Bar
@section Customizing the Tool Bar
@noindent

@node Changing Colors Fonts and Key Bindings
@section Changing Colors Fonts and Key Bindings
@noindent

GPS can be configured through the usual gtk+ mechanisms of @file{rc
files}. The trick is to create a text file called @file{gtkrc} in the
gps home directory (@file{~/.gps} on Unix systems), or as a global
change, in the directory etc/gps in the GPS installation. This file
contains the usual configuration description.

For instance, the following will set the default font for all widgets
in the interface. Note that this font is sometimes overridden by
GPS's own preferences, most notably in the source editor.

@smallexample
gtk-font-name = "Helvetica 9"
@end smallexample

The key shortcuts associated with the menus can be changed dynamically
if you want this behavior. It should be activated explicitely by
setting the following in the configuration file:

@smallexample
gtk-can-change-accels = 1
@end smallexample

Special effects can be achieved easily. For instance, the following
code will change the background color of any button, when it is
pressed. It will also set a background pixmap when it is not pressed.
The style also inherits from the one above, so that the buttons also
use the default font.

@smallexample
pixmap_path "<directory_that_contains_the_pixmap>"
style "button" = "default" @{
  bg_pixmap[NORMAL]="<pixmap_name>"
  bg[ACTIVE]="blue"
@}
class "*GtkButton*" style "button"
@end smallexample

Finally, you can configure the key bindings to suit your habits. In
the editor, you can for instance set @key{Ctrl-V} to scroll forward
one page, as usual under the Emacs editor. The following code takes
care of that. Configuring keys is trickier than the above, since you
need to know the signals that the widgets can receive. Basically, the
most useful will probably be @option{move_cursor}. The first
parameter should be one of @option{pages}, @option{paragraphs},
@option{words}, @option{display-lines} or
@option{logical-positions}. The second parameter is the number of
such units to skip

@smallexample
binding "custombind" @{
   bind "<ctrl>v" @{ "move_cursor" (pages, 1, 0) @}
@}
class "*GtkTextView*" binding : highest "custombind"
@end smallexample

Enabling key bindings similar to the popular Emacs editor is even
easier, since you only have to add the following line to the
configuration file:

@smallexample
gtk-key-theme-name = "Emacs"
@end smallexample

@c --------------------------------------------------------------------
@node Environment
@chapter Environment
@c --------------------------------------------------------------------

@menu
* Command Line Options::
* Environment Variables::
* Files::
* Reporting Suggestions and Bugs::
@end menu

@node Command Line Options
@section Command Line Options

@smallexample
Usage:
   gps [options...] [source files] [project file]
@end smallexample

@noindent

@c --------------------------------------------------------------------
@node Environment Variables
@section Environment Variables
@c --------------------------------------------------------------------

@noindent
The following environment variables can be set to override some default
settings in GPS:

@table @samp
   @item GPS_ROOT
Override the default root directory specified when GPS
is built (during the @i{configure} process, see the file @code{INSTALL} in
the GPS sources for more details) to access information such as the location
of the translation files.

   @item GPS_HOME
Override the variable HOME if present. All the configuration files and
directories used by GPS are either relative to $HOME/.gps (%HOME%\.gps
under Windows) if GPS_HOME is not set, or to $GPS_HOME/.gps (respectively
%GPS_HOME%\.gps) if set.

   @item GDK_USE_XFT
If this variable is set to 1, then the fonts used in most parts of gps will be
anti-aliased fonts, provided your Xserver supports the Xft extension, and you
have installed anti-aliased fonts on your system, like the truetype fonts
available at @url{http://keithp.com/~keithp/truetype.tar.gz}

@end table

@c --------------------------------------------------------------------
@node Files
@section Files
@c --------------------------------------------------------------------

@noindent

@table @file
   @item $HOME/.gps
GPS state directory

   @item $HOME/.gps/log
@anchor{log file}
Log file created automatically by GPS

   @item $HOME/.gps/preferences
Contains all the preferences in XML format, as specified in the
preferences menu. See also @file{<prefix>/etc/gps/preferences}.

   @item $HOME/.gps/window_settings
Contains all the settings of the windows (window sizes, pane
offset) in XML format. These settings are saved automatically when quitting
GPS, and loaded automatically at start up. To reset the settings, simply
remove this file.

   @item $HOME/.gps/sessions
Directory containing the debugging sessions.

   @item $HOME/.gps/gtkrc
The theme used by the gtk+ library on which gps is based. It allows you
to configure the colors and fonts used in your
application. @xref{Changing Colors Fonts and Key Bindings}.
See also @file{<prefix>/etc/gps/gtkrc}.

   @item $HOME/.gps/sessions/@i{session}
Each file in the @code{sessions} directory represents a particular session
saved by the user.

   @item $HOME/.gps/traces.cfg
Default configuration for the system traces. This traces are used to analyse
problems with GPS. By default, they are sent to the file @file{$HOME/.gps/log}.

   @item @i{prefix}
The prefix directory where GPS is installed, e.g @file{/opt/gps}.

   @item @i{prefix}/bin
The directory containing the GPS executables.

   @item @i{prefix}/etc/gps
The directory containing global configuration files for GPS.

   @item @i{prefix}/etc/gps/gtkrc
The global theme used by the gtk+ library. See also @file{$HOME/.gps/gtkrc}.

   @item @i{prefix}/etc/gps/pangorc
The pango (generic font handling) configuration file.

   @item @i{prefix}/etc/gps/pangox.aliases
File defining font aliases to X font set.

   @item @i{prefix}/etc/gps/preferences
Global preferences in XML format. See also @file{$HOME/.gps/preferences}.

   @item @i{prefix}/lib
This directory contains the shared libraries used by GPS.

   @item @i{prefix}/doc/gps/html
GPS will look for all the documentation files under this directory.

   @item @i{prefix}/share/gps/gps-animation.gif
Animated image displayed in the top right corner of GPS to indicate that
actions (e.g compilation) are going on.

   @item @i{prefix}/share/locale
Directory used to retrieve the translation files, when relevant.

@end table

@c --------------------------------------------------------------------
@node Reporting Suggestions and Bugs
@section Reporting Suggestions and Bugs
@c --------------------------------------------------------------------

@noindent
If you would like to make suggestions about GPS, or if you encountered a bug,
please report it to @uref{mailto:report@@gnat.com} following the usual GNAT
reports recommendations as explained in the file README.GNATPRO.

Please try to include a detailed description of the problem, including
sources to reproduce it if possible/needed, and/or a scenario describing the
actions performed to reproduce the problem, as well as the tools (e.g
@i{debugger}, @i{compiler}) involved.

The files $HOME/.gps/log and $HOME/.gps/debugger.log may also bring some
useful information when reporting a bug.

@c @printindex cp

@contents

@bye
