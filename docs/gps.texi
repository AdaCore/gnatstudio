\input texiplus   @c -*-texinfo-*-
@c %**start of header
@setfilename gps.info
@settitle Using the GNAT Programming System
@syncodeindex fn cp

@set GPSVersion 1.0.1

@titlepage

@title Using the GNAT Programming System
@subtitle Version @value{GPSVersion}
@subtitle Document revision level $Revision$
@subtitle Date: $Date$
@author ACT Europe

@page
@vskip 0pt plus 1filll

Copyright @copyright{} 2001-2002, ACT Europe.
This document may be copied, in whole or in part, in any form or by any
means, as is or with alterations, provided that (1) alterations are clearly
marked as alterations and (2) this copyright notice is included
unmodified in any copy.

@end titlepage

@ifinfo
@node Top, Introduction, (dir), (dir)
@top Using the GNAT Programming System

Using the GNAT Programming System

GPS, the GNAT Programming System

Version @value{GPSVersion}

Date: $Date$

Copyright @copyright{} 2001-2002, ACT Europe.
This document may be copied, in whole or in part, in any form or by any
means, as is or with alterations, provided that (1) alterations are clearly
marked as alterations and (2) this copyright notice is included
unmodified in any copy.

@menu
* Introduction::
* Description of the Main Windows::
* Multiple Document Interface::
* Editing File::
* Project Handling::
* Searching and Replacing::
* Compilation/Build::
* Source Navigation::
* Source Browsing::
* Debugging::
* Version Control System::
* Preferences/Settings::
* Working in a cross environment::
* Customization::
* Environment::

@detailmenu

 --- The Detailed Node Listing ---

Description of the main windows
* The Menu Bar::
* The Tool Bar::
* The Work Space::
* The Project Explorer::
* The Console::
* The Status Line::

Multiple Document Interface
* Closing Windows::
* Maximized and Iconified Windows::
* Docked Windows::
* Floating Windows::
* Moving Windows::

Editing File
* General Information::
* Navigation in the Source Editor::
* Indentation::
* Cross References::
* Using an External Editor::
* A note on the Clipboard::

Project Handling

Compilation/Build
* Ada Compilation and Build::
* C/C++ Compilation and Build::
* Multi-language Build::
* Integrating existing build procedures with the GPS build system::

Source Navigation
* Spec/Body::
* Cross References::


Source Browsing
* General Issues::


Debugging


Version Control System


Preferences/Settings


Working in a cross environment
* Customizing your projects::
* Debugger issues::


Customization
* Customizing the Menu Bar::
* Customizing the Tool Bar::
* Changing Colors Fonts and Key Bindings::


Environment
* Command Line Options::
* Environment Variables::
* Files::
* Reporting Suggestions and Bugs::
* Solving Problems::

@end detailmenu
@end menu
@end ifinfo

@c --------------------------------------------------------------------
@node Introduction
@chapter Introduction
@c --------------------------------------------------------------------

@noindent
GPS is a complete integrated development environment that gives access
to a wide range of tools and integrates them smoothly.

This version is considered as beta software, meaning that you may encounter
some instabilities or some missing features. For this reason we will
particularly welcome bug reports, as well as suggestions for possible
improvements (see @ref{Reporting Suggestions and Bugs}).

GPS gives access to built-in file editing; HTML based help system;
complete compile/build/run cycle; intelligent source navigation;
project management; general graph technology giving access to many different
browsers such as source dependency, project dependency, call graphs, etc@dots{};
fully integrated visual debugger, based on the GVD technology, and enhanced
for inclusion in GPS; generic version control system, providing access
to CVS, ClearCase, and possibly others in the future; many other tools
such as a visual comparison, automatic generation of files, source reformatting.

GPS is fully customizable, providing several levels of customizations:
a first level, available through the preferences dialog (see
@ref{Preferences/Settings}); a second level, which allows you to
customize your menu items, tool bar and key bindings (see @ref{Customization}),
and a third level, which allows any kind of very specific or tight
integration, due to the open nature of GPS, and to its architecture.

GPS also integrates with existing editors such as Emacs and Vi, see
@ref{Using an External Editor}.

@c --------------------------------------------------------------------
@node Description of the Main Windows
@chapter Description of the Main Windows
@c --------------------------------------------------------------------

@menu
* The Menu Bar::
* The Tool Bar::
* The Work Space::
* The Project Explorer::
* The Console::
* The Status Line::
@end menu

@c --------------------------------------------------------------------
@node The Menu Bar
@section The Menu Bar
@c --------------------------------------------------------------------
@noindent

@c --------------------------------------------------------------------
@node The Tool Bar
@section The Tool Bar
@c --------------------------------------------------------------------
@noindent

@c --------------------------------------------------------------------
@node The Work Space
@section The Work Space
@c --------------------------------------------------------------------

The whole work space is based on a multiple document interface,
@xref{Multiple Document Interface}.

@c --------------------------------------------------------------------
@node The Project Explorer
@section The Project Explorer
@c --------------------------------------------------------------------
@noindent

@subsection The explorer views

The project explorer is composed of multiple windows, which are
initially displayed on the left side of the GPS window. Its goal is to
show a full view of the various components of your projects. These
various components are presented below.

The following snapshot displays the two pages side-by-side: on the
left, the @code{Project View}, and on the right the @code{File View}.

@iftex
@image{explorer-views, 12.7cm}
@end iftex

@ifhtml
@image{explorer-views, 12.7cm}
@end ifhtml

The various components that are displayed in these explorers are the
following:

@table @b
@item projects
As mentioned before, all the sources you are working with are put under
control of projects. These projects are a way to store the switches to
use for the various tools, as well as a number of other setup.

They can be organized into a project hierarchy, where a root project
can import other projects, with their own set of sources.

Initially, a default project is created, that includes all the sources
in the current directory.

The @code{Project View} page of the explorer displays this project
hierarchy: the top node in this view is the root project of your
application (generally, this is where the source file that contains
the main subprogram will be located). Then a node is displayed for
each imported project, and recursively for their own imported
projects.

A given project might appear multiple times in the @code{Project
View}, if it is imported by several other projects.

A special icon with an exclamation mark is displayed if the project
was modified, but not saved yet. You can choose to save it at any time
by right-clicking on it. GPS will remind you to save it before any
compilation. 

@item directories
The files inside a project can be organized into several physical
directories on the disk. These directories are displayed under each
project node in the @code{Project View}, or directly mimicking their
physical organization on the disk (including windows drives) in the
@code{File View}.

@item files
The source files themselves are stored in the directories, and
displayed under the corresponding nodes. Note that in the
@code{Project View}, only the source files that actually belong to the
project (i.e. are written in a language supported by that project and
follow its naming scheme) are actually visible.

The @code{File View} will display all the files that actually exist
on the disk.

A given file might appear multiple times in the @code{Project View},
if the project it belongs to is imported by several other projects.

@item entities
If you open the node for a source file, the file is parsed by one of the
fast parsers integrated in GPS so that all entities declared in
the project can be shown. These entities are grouped into various
categories, which depend on the language. Typical categories include
subprograms, packages, types, variables, tasks,@dots{}

@end table

Double-clicking on an file, or simple clicking on any entity will open
a source editor and display respectively the first line in this file
or the line on which the entity is defined.

If you open the search dialog through the @code{Navigate->Find...}
menu, you have the possibility to search for anything in the explorer,
either a file or an entity. Note that searching for an entity might be
a little slow if you have lots of files.

A contextual menu is also provided when inside a source editor, or
anywhere when you right-click on a file, whose name is @code{Locate in
Explorer}, and that will automatically search for the first entry for
this file in the explorer.


@subsection The configuration variables

As described in the GNAT User's Guide, the project files can be
configured through external variables (typically environment
variables). This means that e.g. the exact list of source files, or the
exact switches to use to compile the application can be changed when
the value of these external variables is changed.

GPS provides a simple access to these variables, through a special
area on top of the @code{Project View}. These variables are called
@code{Configuration Variables}, since they provide various scenarios for
the same set of project files.

A combo box is displayed in this area for each of the environment
variable the project depends on. The current value of the variable can
be set simply by selecting it from the popdown window that appears
when you click on the arrow on the right of the variable name

New variables can be added through the contextual menu @code{Add
Configuration Variable} in the @code{Project View}. The list of
possible values for a variable can be changed by clicking on the
button on the left of the variable's name.

Whenever you change the value of one of the variables, the project is
automatically recomputed, and the list of source files or directories
is changed dynamically to reflect the new status of the
project. Starting a new compilation at that point will use the new
switches, and all the aspects of GPS are immediately affected
according to the new setup.


@c --------------------------------------------------------------------
@node The Console
@section The Console
@c --------------------------------------------------------------------
@noindent

@c --------------------------------------------------------------------
@node The Status Line
@section The Status Line
@c --------------------------------------------------------------------
@noindent

@c --------------------------------------------------------------------
@node Multiple Document Interface
@chapter Multiple Document Interface
@c --------------------------------------------------------------------

@menu
* Multiple Document Interface::
* Closing Windows::
* Maximized and Iconified Windows::
* Docked Windows::
* Floating Windows::
* Moving Windows::
@end menu

@noindent

All the windows that are part of the GPS environment are under control
of what is commonly called a multiple document interface (MDI for
short). This is a common paradigm on windowing systems, where related
windows are put into a bigger window which is itself under control of
the system or the windows manager.

This means that, by default, no matter how many editors, browsers,
explorers,@dots{} windows you have opened, your system will still see only
one window (On Windows systems, the task bar shows only one
icon). However, you can organize the GPS windows exactly the way you
want, all inside the GPS main window.

For instance, you can choose to iconify some windows which are
temporarily useless to you; you can choose to put some windows on top
of others; you can resize all the windows to the size you want; and so
on.

This section will show the various capacities that GPS provides to
help you organize your workspace.

At any time, there is only one selected window in GPS (the @b{active
window}). You can select a window either by clicking in its title bar,
which will then get a different color, or by selecting its name in the
menu @code{Window}.

@c --------------------------------------------------------------------
@node Closing Windows
@section Closing Windows
@c --------------------------------------------------------------------

@noindent

Wherever the windows are displayed, they are always closed in the same
manner. In the right side of the title bar of the window, three small
buttons are displayed. The rightmost button is a cross. Clicking on
this button will close the window

@iftex
@image{mdi-title-bar, 12.7cm}
@end iftex

@ifhtml
@image{mdi-title-bar, 12.7cm}
@end ifhtml

Alternatively, you can also select the window by clicking anywhere in
its title bar, and then select the menu @code{Window->Close}

@c --------------------------------------------------------------------
@node Maximized and Iconified Windows
@section Maximized and Iconified Windows
@c --------------------------------------------------------------------

@noindent

The MDI is initially split into three parts: one window to the left,
one to the bottom, and a bigger one that occupies the remaining space.

The first two will be discussed in @ref{Docked Windows}.
The third area is the one that provides the most flexibility:

@table @b

@item maximized windows
The windows in this area are initially maximized. This means that if
you have several windows, a notebook will be created, and only one
window will be visible at any given time. You select the window you want
to see by clicking on the appropriate tab.

Note that if there are a lot of windows, two small arrows will appear
on the right of the tabs. Clicking on these arrows will show the
remaining tabs.

@iftex
@image{mdi-scroll-tabs, 12.7cm}
@end iftex

@ifhtml
@image{mdi-scroll-tabs, 12.7cm}
@end ifhtml

You can go back to this maximized state in two ways: either select the
menu @code{Window->Maximize All}, or click on the middle button on the
right of the title bar of any window (this button shows two small
squares, and will toggle between maximized and unmaximized states.


@item unmaximized windows
As opposed to putting all the windows inside a notebook, GPS can also
let you organize them freely when they are unmaximized. Select the
menu @code{Window->Unmaximize All}, or click again in the middle
button on the right of the title bar.

In this mode, the windows can be resized freely by clicking on the
border of any side or in one of their four corners, as usual on
windowing systems.

They can also be moved around. As a result, you can choose for
instance to display several windows side by side, or one on top of
the others.

To make it easier to get to these standard organizations, GPS provides
a few shortcuts through menus:

@table @code
@item Window->Cascade
All the windows will be resized to the same size, and be moved one on
top of the other, so that the top and left sides of all windows are
visible. This way, you can easily select any window

@iftex
@image{mdi-cascade, 12.7cm}
@end iftex

@ifhtml
@image{mdi-cascade, 12.7cm}
@end ifhtml

@item Window->Tile Horizontally
All the windows are resized to the same dimensions, and are put side
by side, from left to right. No window will overlap any other.

@iftex
@image{mdi-tile-horizontal, 12.7cm}
@end iftex

@ifhtml
@image{mdi-tile-horizontal, 12.7cm}
@end ifhtml

@item Window->Tile Vertically
All the windows are resized to the same dimensions, and are put side
by side, from top to bottom. No window will overlap any other.

@iftex
@image{mdi-tile-vertical, 12.7cm}
@end iftex

@ifhtml
@image{mdi-tile-vertical, 12.7cm}
@end ifhtml

@end table


@item iconified windows
When the windows are unmaximized, you can also choose to temporarily
iconify some of them. This is done by clicking on the leftmost button
in the title bar (the one that shows a single line).

The window will then be resized so that only part of its title bar is
visible, and none of its actual contents. Icons can still be moved
around as you want, but they can not be resized. You need to first
de-iconify the window, by clicking once again on the same button.

When de-iconified, a window will restore the size and position it had
before it was iconified.

@iftex
@image{mdi-icons, 12.7cm}
@end iftex

@ifhtml
@image{mdi-icons, 12.7cm}
@end ifhtml

@end table

@c --------------------------------------------------------------------
@node Docked Windows
@section Docked Windows
@c --------------------------------------------------------------------

@noindent

As mentioned before, the GPS workspace is initially split into three
windows. The one on the left and the one at the bottom are called
@b{docking area}.

They have a different behavior from the central area, since windows in
these areas are necessarily grouped into a notebook. Thus, only one of
them is visible at any given time, and you select the one you want to
see by clicking on its name in the tabs area.

GPS includes four such areas, one on each side of the main area. Some
widgets will initially be displayed in one of these docking areas
instead of in the central one, like the project explorer, the message
window,@dots{} Although you can not control this initial position, it is
possible to change it later on (@ref{Moving Windows}).

However, you can still choose precisely the dimension you want for
this docking area (either its width for the left and right areas, or
its height for the top and bottom ones).

Between each docking area and the central one, there is a small handle
(on which a series of dots are drawn), that you can move interactively
with the mouse, to resize the docking areas). By default, when you
move such a handle, a line will appear on top of all other windows in
GPS to show you the new position the docking area will have when you
release the mouse. You can set up a preference (menu
@code{Edit->Preferences}) to indicate that you want the resizing to be
opaque, which might give more intuitive results.

Note that when a window is @b{docked} (i.e. put in a docking area), some
of the buttons in its title bar are greyed out and inactive.

A simple way to dock a window is to select it, and then select the
menu @code{Window->Docked}. We will see in @ref{Moving Windows} that
there is a more intuitive way to do the same thing.

@c --------------------------------------------------------------------
@node Floating Windows
@section Floating Windows
@c --------------------------------------------------------------------

@noindent

Although the MDI, as described so far, is already extremely flexible,
it is possible that you prefer to have several top-level windows under
direct control of your system or window manager. This would be the
case for instance if you want to benefit from some extra possibilities
that your system might provide (virtual desktops, different window
decoration depending on the window's type, transparent windows,@dots{}).

GPS is fully compatible with this behavior, since windows can also be
@b{floating windows}. Any window that is currenty embedded in the MDI
can be made floating at any time, simply by selecting the window and
then selecting the menu @code{Window->Floating}. The window will then
be detached, and can be moved anywhere on your screen, even outside of
GPS's main window.

There are two ways to put a floating window back under control of GPS.
The more general method is toselect the window through its title in
the menu @code{Window}, and then select @code{Window->Floatings}.

The second method assumes that the preference @b{Destroy Floats} in
the menu @code{Edit->Preferences} has been set to false. Then, you can
simply close the floating window by clicking in the appropriate title
bar button, and the window will be put back in GPS. If you actually
want to close it, you need to click once again on the cross button in
its title bar.

@c --------------------------------------------------------------------
@node Moving Windows
@section Moving Windows
@c --------------------------------------------------------------------

@noindent

As we have seen, the windows' state can be changed at any time, from
maximized to unmaximized to docked and floating and back, in any
order.

In all cases, the changes are done either through the buttons in the
title bar or through the menu @code{Window}.

On some systems, a more intuitive method is also provided, based on
the drag-and-drop paradigm. The idea is simply to select a window,
wherever it is, and then, by clicking on it and moving the mouse while
keeping the left button pressed, drop it anywhere else inside GPS.

Selecting an item so that it can be dragged is done simply by clicking
with the left mouse button in its title bar, and keep the button
pressed while moving the mouse. Although this is the general scheme,
this would work for unmaximized items, since the title bar is then
used to move them around. In that case, you need to press the
@key{control} key in addition to the left mouse button.

A third possibily can be used for maximized or docked windows: click
with the left mouse button in the notebook tab that contains their
name.

It is important to note that some widgets in GPS have their own
drag-and-drop support, and will not react when you drop a window on
them. For instance, editors use drag-and-drop for copy-paste
operations. Therefore, dropping a window on them will result in a
failed operation. In that case, it always work to drop the window in
the title bar of another window to adopt the same state.


Here are the various places where a window can be dropped:

@table @b
@item The central area
The window you are dropping will get the same state as the other
windows already in this area (maximized or unmaximized).

@item Docking areas
The window will immediately be adopted by this dropping area, and a
new notebook will be created as needed. Once again, since the message
window has its own handling of drag-and-drop, you can not drop items
on it. Instead, drop windows on its title bar.

In some cases, you might want to create a docking area that is not
currently visible (for instance, it is often useful to put an editor
in the right docking area, so that two editors can be seen
side-by-side, one in this area, and one in the central one).

To achieve this, drop the window on the small handle that surrounds
the whole GPS window (a black rectangle will appear on the screen when
your mouse is over that area). If you then drop the item, a new
docking area will be created.

@item System window
Under systems that support it, if you drop a window outside of GPS (for
instance, on the background of your screen), the window will be floated.
This is currently only supported under Linux, when using the GNOME 2 desktop.

@item Sides of the GPS window
On each side of the GPS window, a small zone (a few pixels high or
wide) is set up as a drop-area. If you drop a window on these zone
(they are briefly highlighted while the mouse rests on them), then the
window will be added to the dock on that side. If there is no dock
area on that side, one will be created.

This is especially useful if you want to put two editor windows side
by side. Drag one of them on the drop area on the right side.

@end table


@c --------------------------------------------------------------------
@node Editing File
@chapter Editing File
@c --------------------------------------------------------------------

@menu
* General Information::
* Navigation in the Source Editor::
* Indentation::
* Using an External Editor::
* A note on the Clipboard::
@end menu

@node General Information
@section General Information
@noindent

@c ??? No tooltips if there are no LI files

@node Navigation in the Source Editor
@section Navigation in the Source Editor
@noindent

It is also possible to specify additional or alternate key bindings,
in particular the standard Emacs key bindings can be used in the source
editor, see @ref{Changing Colors Fonts and Key Bindings}.

@subsection Editing
@table @b
@item Ctrl-x
Cut to clipboard

@item Ctrl-c
Copy to clipboard

@item Ctrl-s
Save file to disk

@item Ctrl-v
Paste from clipboard

@item Ctrl-z
Undo previous insertion/deletion

@item Ctrl-r
Redo previous insertion/deletion

@item Insert
Toggle overwrite mode
@end table

@node Indentation
@section Indentation
@noindent

@c --------------------------------------------------------------------------
@node Using an External Editor
@section Using an External Editor
@c --------------------------------------------------------------------------

@noindent

GPS is fully integrated with a number of external editors, in
particular @file{Emacs} and @file{vi}. The choice of the default
external editor is done in the preferences. The following values are
recognized:

@table @file
@item gnuclient
This is the recommended client. It is based on Emacs, but needs an
extra package to be installed. This is the only client that provides a
full integration in GPS, since any extended lisp command can be sent
to the Emacs server.

By default, gnuclient will open a new Emacs frame for every file
that is opened. You might want to add the following code to your
@file{.emacs} file (create one if needed) so that the same Emacs frame
is reused every time:

@smallexample
   (setq gnuserv-frame (car (frame-list)))
@end smallexample

See @url{http://www.hpl.hp.co.uk/people/ange/gnuserv/} for more information.


@item emacsclient
This is a program that is always available if you have installed
Emacs. As opposed to starting a new Emacs every time, it will reuse an
existing Emacs session. It is then extremely fast to open a file.


@item emacs
This client will start a new Emacs session every time a file needs to
be opened. You should use @file{emacsclient} instead, since it is much
faster, and makes it easier to copy and paste between multiple
files. Basically, the only reason to use this external editor is if
your system doesn't support @file{emacsclient}.


@item vim
@file{Vim} is a vi-like editor that provides a number of enhancements,
for instance syntax highlighting for all the languages supported by
GPS. Selecting this external editor will start an xterm (or command
window, depending on your system) with a running vim process editing
the file.

Note that one limitation of this editor is that if GPS needs to open
the same file a second time, it will open a new editor, instead of
reusing the existing one.

To enable this capability, the xterm executable must found in the PATH,
and thus is not currently supported on Windows systems.


@item vi
This editor works exactly like vim, but uses the standard @file{vi}
command instead of @file{vim}.


@item none
No external editor is used, and the contextual menus simply won't
appear.
@end table


In the cases that require an Emacs server, GPS will try several
solutions if no already running server was found. It will first try to
spawn the glide environment distributed with GNAT. If not found in the
PATH, it will then start a standard Emacs. The project file currently used
in GPS will be set appropriately the first time Emacs is spawned. This means
that if you load a new project in GPS, or modify the paths of the current
project, you should kill any running Emacs, so that a new one is spawned
by GPS with the appropriate project.

Of course, you can alternatively reload explicitely the project from
Emacs itself by using the menu @code{Project->Load}


In the preferences, there are two settings that allow you to select
the external editor (if left to an an empty string, GPS will
automatically select the first editor available on your system) and
whether this editor should always be used every time you double-click
on a file, or whether you need to explicitely select the contextual
menu to open the external editor.

@c --------------------------------------------------------------------------
@node A note on the Clipboard
@section A note on the Clipboard
@c --------------------------------------------------------------------------

This section concerns X-Window users who are used to cutting and
pasting with the middle mouse button. In the GPS text editor, as in
many recent X applications, the @i{GPS clipboard} is set by explicit
cut/copy/paste actions, either through menu items or keyboard
shorcuts, and the @i{primary clipboard} (i.e. the ``middle button''
clipboard) is set by the current selection.

Therefore, copy/paste between GPS and other X applications using the 
@i{primary clipboard} will still work, provided that there is some
text currently selected. The @i{GPS clipboard}, when set, will
override the @i{primary clipboard}.

See @url{http://www.freedesktop.org/standards/clipboards.txt} for more
information.

@c --------------------------------------------------------------------
@node Source Navigation
@chapter Source Navigation
@c --------------------------------------------------------------------

@menu
* Spec/Body::
* Cross References::
@end menu

@node Spec/Body
@section Spec/Body
@noindent

@node Cross References
@section Cross References
@noindent

GPS provides cross-references for all the entities defined in your
application, as well as some advanced browsers like a call graph.
For this to work, it needs some help from external tools, specific to
each of the supported languages.

@table @command
@item Ada
The GNAT compiler itself is used to generate the cross-references
information. This means that you need to compile your application to
get access to this feature or the various graphs. GPS doesn't provide
automatic recompilation at the moment, although this is a planned
feature. If your sources have been modified, you should recompile the
modified files.

If you need to navigate through sources that are not fully compilable
(e.g after heavy modifications, or while porting an application), GNAT
can still generate partial information if you specify the @code{-gnatQ}
compilation option. Along with the @code{-k} option of gnatmake, it is
then possible to generate as much relevant information as possible for a
complete set of non compilable sources.

There are a few special cases where GPS can not find the external file
(called @file{ALI file}) that contains the cross-references
information. Most likely, this is either because you haven't compiled
your sources first, or because the source code has changed since the
@file{ALI file} was generated.

It could also be that you haven't included in the project the object
directories that contain the @file{ALI files}.

In addition, one special case can not be handled automatically. This
is for separate units, whose file name have been krunched through the
@file{gnatkr} command. To handle this, you should force GPS to parse
all the @file{ALI files} in the appropriate object directory. This is
done by right-clicking on the object directory in the explorer
(left-side panel on the main window), and selecting the menu "Parse
all xref information".

@item C/C++
To enable the navigation features for C and C++ source files, you need
to first generate a database of symbol references, by going through the
menu Build->Recompute C/C++ Xref info. Messages in the console window
will indicate the state of the processing. Due to the nature of these
languages, in order to provide accurate cross references, GPS needs to
generate the database in two phases: a first pass parses all the files
that have been modified since the previous parsing, and a second pass
generates global cross references by analysing the complete database.
It is thus expected that for large projects, this phase can take a
significant amount of cpu to proceed.

In some cases, GPS won't be able to determine the exact function involved
in a cross reference. This will typically occur for overloaded functions,
or if multiple functions with the same name, but under different
@code{#ifdef} sections, are defined. In this case, GPS will display a
dialog listing the possible choices to resolve the ambiguity.

In addition, the C/C++ parser has the following limitations: namespaces
are currently ignored (no specific processing is done for namespaces);
no attempt is made to process the macros and other preprocessor defines.
Macros are considered as special entities, so it is possible to navigate
from a macro use to its definition, but the contents of the macro itself
is ignored, which means for example that function calls made through macros
won't be detected.

@end table

@c --------------------------------------------------------------------
@node Project Handling
@chapter Project Handling
@c --------------------------------------------------------------------

@noindent
To handle projects, GPS uses the GNAT project file facility, as described
in the GNAT User's Guide (@url{gnat_ug.html}) and in the GNAT Reference
Manual (@url{gnat_rm.html}). For a best use of the project capabilities, it
is recommended to first become familiar with this documentation.

The project files are text files following a syntax close to Ada, it is thus
possible to edit and modify them by hand, as well as generating them and
loading them within GPS, both manual and automatic generation can be
mixed. For example, you can first generate projects automatically using
the @i{Project Wizard}, and then modify them by hand.

All the non graphical GNAT tools are project aware, meaning that the notion
of project goes well beyond GPS' user interface, and most capabilities of
the project file can be accessed without using GPS itself, making the
project files very attractive.


@c --------------------------------------------------------------------
@node Searching and Replacing
@chapter Searching and Replacing
@c --------------------------------------------------------------------

GPS provides extensive search capabilities among its different
elements. For instance, it is possible to search in the currently
edited source file, or in all the source files belonging to the
project, even those that are not currently open. It is also possible
to search in the project explorer (on the left side of the main GPS
window), or the help modules,@dots{}

All these search contexts are grouped into a single graphical window,
that you can open either through the menu @code{Navigate->Find}, or
the shortcut @key{Control-F}.

Selecting either of these two options will pop up a dialog on the
screen, similar to the following:

@iftex
@image{search-hide, 12.7cm}
@end iftex

@ifhtml
@image{search-hide, 12.7cm}
@end ifhtml

On this screenshot, you can see three entry fields:

@table @b
@item @code{"Search for"}
This is the location where you type the string or pattern you are
looking for. The search widget supports two mode, either fixed strings
or regular expressions. You can commute between the two modes by
either clicking on the @code{Options} button and selecting the
appropriate check box, or by opening the combo box (click on the arrow
on the right of the entry field).

In this combo box, a number of predefined patterns are provided. The
top two ones are empty patterns, that automatically set up the
appropriate fixed strings/regular expression mode. The other regular
expressions are language-specific, and will match patterns like Ada
type definition, C++ method declaration,@dots{}

@item @code{"Replace with"}
This field should contain the string that will replace the occurrences
of the pattern defined above.
The combo box provided a history of previously used replacement
strings.

@item @code{"Look in"}
This field defines the context in which the search should
occur. Clicking on the arrow on the right will display the list of all
possible contexts. The exact list will depend on what modules were
loaded by GPS, since each module can add its own contexts.

Depending on the selected context, extra fields might be displayed on
the screen. For instance, if you select the context @code{Files...}
you will be asked what files or directories should be searched. These
are regular expressions.

When searching one or more source files, an extra field to select the
scope is provided. This is used to avoid matching on comments when you
are only interested in actual code, or to only search strings and
comments, and ignore the code.

GPS will automatically select the most appropriate context when you
open the search dialog, depending on which component currently has the
focus. However, you can of course change the context to the one you
prefer. 

@end table

The second part of the window is a row of buttons, to start the search
(or continue to the next occurrence), to stop the current search when
it is taking too long, or to display the options.

@iftex
@image{search-options, 12.7cm}
@end iftex

@ifhtml
@image{search-options, 12.7cm}
@end ifhtml

There are four check boxes in this options box.

@table @b
@item @code{"Search All Occurrences"}
The default mode for the search widget is interactive searching: its
stops as soon as one occurence of the pattern is found. You then have
to press the @code{Next} button (or the equivalent shortcut
@key{Control-N}) to go to the next occurrence.

However, if you press this check box, the search widget will start
searching for all occurrences right away, and put the results in a new
window called @code{Locations} (initially found in the bottom dock of
the GPS window). You can press the search at any time by pressing
Stop. It will then stop when the next occurrence is found.

@item @code{"Case Sensitive"}
By default, patterns are case insensitive (upper-case letters and
lower-case letters are considered as equivalent). You can alter this
behavior by clicking on this check box.

@item @code{"Whole Word Only"}
This check box, if activated, will force the search engine to ignore
substrings. "sensitive" will no longer match "insensitive".

@item @code{"Regular Expression"}
This button commutes between fixed string patterns and regular
expressions. As mentioned above, you can also commute these two modes
by selecting the arrow on the right of the @code{Search for} field.

@end table

As most GPS components, the search window is under control of the
multiple document interface, and can thus be integrated into the main
GPS window instead of being an external window.

To force this behavior, open the menu @code{Window}, select
@code{Search} in the list at the bottom of the menu, and then select
either @code{Floating} or @code{Docked}.

If you save the desktop (@code{File->Save->Desktop}, GPS will
automatically reopen the search dialog in its new place when it is
started next time.


@c --------------------------------------------------------------------
@node Compilation/Build
@chapter Compilation/Build
@c --------------------------------------------------------------------

@menu
* Ada Compilation and Build::
* C/C++ Compilation and Build::
* Multi-language Build::
* Integrating existing build procedures with the GPS build system::
@end menu

@node Ada Compilation and Build
@section Ada Compilation and Build
@noindent

@node C/C++ Compilation and Build
@section C/C++ Compilation and Build
@noindent

@node Multi-language Build
@section Multi-language Build
@noindent

@node Integrating existing build procedures with the GPS build system
@section Integrating existing build procedures with the GPS build system
@noindent

@c --------------------------------------------------------------------
@node Source Browsing
@chapter Source Browsing
@c --------------------------------------------------------------------

@menu
* General Issues::
@end menu

@node General Issues
@section General Issues
@noindent

@c --------------------------------------------------------------------
@node Debugging
@chapter Debugging
@c --------------------------------------------------------------------

@noindent
Debugging is tightly integrated with the other components of GPS. For
example, it is possible to edit files and navigate through your sources
while debugging.

To start a debug session, go to the menu @code{Debug->Initialize}, and choose
either the name of your executable, if you have specified the name of
your main program(s) in the project properties, or start an empty debug
session using the @code{<no main file>} item. It is then possible to load
any file to debug, by using the menu @code{Debug->Debug->Load File...}

After the debugger has been initialized, you have access to two new windows:
the data window (in the top of the working area), and the debugger console
(in a second page, after the Messages window).
All the menus under @code{Debugger}
are now also accessible, and you also have access to additional contextual
menus, in particular in the source editor where it is possible to easily
display variables, set breakpoints, and get automatic display (via @i{tooltips})
of object values.

During a debugging session, you can use all the facilities provided by GVD.
See the GVD documentation (@url{gvd.html}) for a complete description
of these functionalities.

When you want to quit the debugger without quitting GPS, go to the menu
@code{Debug->Terminate}, which will terminate your debug session, by closing
the data window and the debugger console, as well as terminating the underlying
debugger (e.g @code{gdb}) used by GPS to handle the low level debugging.

@c --------------------------------------------------------------------
@node Version Control System
@chapter Version Control System
@c --------------------------------------------------------------------

@c --------------------------------------------------------------------
@node Preferences/Settings
@chapter Preferences/Settings
@c --------------------------------------------------------------------

@c --------------------------------------------------------------------
@node Working in a cross environment
@chapter Working in a cross environment
@c --------------------------------------------------------------------

@menu
* Customizing your projects::
* Debugger issues::
@end menu

@node Customizing your projects
@section Customizing your projects
@noindent

@node Debugger issues
@section Debugger issues
@noindent

@c --------------------------------------------------------------------
@node Customization
@chapter Customization
@c --------------------------------------------------------------------

@menu
* Customizing the Menu Bar::
* Customizing the Tool Bar::
* Changing Colors Fonts and Key Bindings::
@end menu

@node Customizing the Menu Bar
@section Customizing the Menu Bar
@noindent

The GPS menu bar can be customized through an XML file called
@file{custom} in the gps home directory (@file{~/.gps} on Unix
systems).

Here is an example for such a file:

@smallexample
<?xml version="1.0"?>

<Custom>

  <Submenu>
    <Title>custom menu</Title>

    <Menuitem>
    <Title>item 1</Title>
      <Action>shell command 1</Action>
    </Menuitem>

    <Submenu>
      <Title>other menu</Title>
      <Menuitem>
        <Title> (etc..)
      </Menuitem>

      <Submenu>
        (...)
      </Submenu>
    </Submenu>
  </Submenu>

  <Submenu>
    <Title>custom menu number 2</Title>
    (...)
  </Submenu>

 </Custom>
@end smallexample

The example above creates a two toplevel menus, named @file{custom menu}
and @file{custom menu number 2}. The first one contains a menu item named
@file{item 1}, which is associated to the shell command @file{shell command
1}, and a submenu named @file{other menu}, and so on.

As well as shell commands, you can use custom menu item to invoke GPS
shell commands. The following example shows how to create menus to
invoke the @file{help} interactive command and to open the file
@file{main.c}.

@smallexample
<Submenu>
   <Title>Edit</Title>
     <Menuitem>
           <Title>List GPS commands</Title>
           <GPS_Action>help</GPS_Action>
     </Menuitem>
     <Menuitem>
           <Title>Edit main.c</Title>
           <GPS_Action>edit main.c</GPS_Action>
     </Menuitem>
</Submenu>
@end smallexample

You can define the accelerator keys for your menus, using underscores
in the titles. Thus, if you want an accelerator on the first letter in
a menu named @file{File}, set its title as @file{_File}.

You can add items or submenus to existing menus, using titles for
menus that already exist. For example, this adds an item named
@file{Robert} to the @file{Edit} menu.

@smallexample
<Submenu>
  <Title>Edit</Title>
  <Menuitem>
    <Title>Robert</Title>
  </Menuitem>
</Submenu>
@end smallexample

Use the @file{/} separator to identify the submenu in a menu. For
example, this adds a submenu named @file{Olga} containing an item named
@file{Item} to the @file{Edit} menu.

@smallexample
<Submenu>
  <Title>Edit/Olga</Title>
  <Menuitem>
    <Title>Item</Title>
  </Menuitem>
</Submenu>
@end smallexample

Adding an item with an empty title or no title at all inserts a
menu separator.

You can use macro arguments to pass to your shell
commands. Macro arguments are special parameters that are transformed
every time that the command is about to be executed. The following
macro arguments exist in GPS:

@table @file
@item %f
Base name of the currently opened file.

@item %F
Absolute name of the currently opened file.

@item %p
The current project.

@item %P
The root project.

@item %(p|P)[r](d|s)[f]
Substituted by the contents of a project :

P : the project is the root project

p : the project is the current project

r : indicates that the listing should be project-recursive, i.e. that
sub-projects should be listed as well, and their subprojects, and so
on. 

d : list the source directories

s : list the source files

f : output the list into a file and substitute the parameter with the
name of that file. 
@end table

Examples :

@table @file

@item %Ps
Replaced by a list of source files in the root project.

@item %prs
Replaced by a list of files in the current project, and all imported
subprojects, recursively.

@item %prdf
Replaced by the name of a file that contains a list of source
directories in the current project, and all imported subprojects,
recursively.
@end table

@node Customizing the Tool Bar
@section Customizing the Tool Bar
@noindent

@node Changing Colors Fonts and Key Bindings
@section Changing Colors Fonts and Key Bindings
@noindent

GPS can be configured through the usual gtk+ mechanisms of @file{rc
files}. You can create a text file called @file{gtkrc} in the
gps home directory (@file{~/.gps} on Unix systems), or as a global
change, in the directory etc/gps in the GPS installation. This file
contains the usual configuration description, following the gtk resource
files syntax.

Special effects can be achieved easily. For instance, the following
code will change the background color of any button, when it is
pressed. It will also set a background pixmap when it is not pressed.
The style also inherits from the one above, so that the buttons also
use the default font.

@smallexample
pixmap_path "<directory_that_contains_the_pixmap>"
style "button" = "default" @{
  bg_pixmap[NORMAL]="<pixmap_name>"
  bg[ACTIVE]="blue"
@}
class "*GtkButton*" style "button"
@end smallexample

Similarly, you can configure the key bindings to suit your habits. In
the editor, you can for instance set @key{Ctrl-V} to scroll forward
one page, as usual under the Emacs editor. The following code takes
care of that. Configuring keys is trickier than the above, since you
need to know the signals that the widgets can receive. Basically, the
most useful will probably be @option{move_cursor}. The first
parameter should be one of @option{pages}, @option{paragraphs},
@option{words}, @option{display-lines} or
@option{logical-positions}. The second parameter is the number of
such units to skip

@smallexample
binding "custombind" @{
   bind "<ctrl>v" @{ "move_cursor" (pages, 1, 0) @}
@}
class "*GtkTextView*" binding : highest "custombind"
@end smallexample

Enabling key bindings similar to the popular Emacs editor is even
easier, since you can specify it directly in the preferences dialog.

@c --------------------------------------------------------------------
@node Environment
@chapter Environment
@c --------------------------------------------------------------------

@menu
* Command Line Options::
* Environment Variables::
* Files::
* Reporting Suggestions and Bugs::
* Solving Problems::
@end menu

@node Command Line Options
@section Command Line Options

@smallexample
Usage:
   gps [-Pproject-file] [source1] [source2] ...
Options:
   --help              Show this help message and exit.
   --version           Show the GPS version and exit.

Source files are searched everywhere on the project's  source path

@end smallexample

@noindent

@c --------------------------------------------------------------------
@node Environment Variables
@section Environment Variables
@c --------------------------------------------------------------------

@noindent
The following environment variables can be set to override some default
settings in GPS:

@table @samp
   @item GPS_ROOT
Override the default root directory specified when GPS
is built (during the @i{configure} process, see the file @code{INSTALL} in
the GPS sources for more details) to access information such as the location
of the translation files.

   @item GPS_HOME
Override the variable HOME if present. All the configuration files and
directories used by GPS are either relative to $HOME/.gps (%HOME%\.gps
under Windows) if GPS_HOME is not set, or to $GPS_HOME/.gps (respectively
%GPS_HOME%\.gps) if set.

   @item GDK_USE_XFT
If this variable is set to 1, then the fonts used in most parts of gps will be
anti-aliased fonts, provided your Xserver supports the Xft extension, and you
have installed anti-aliased fonts on your system, like the truetype fonts
available at @url{http://keithp.com/~keithp/truetype.tar.gz}

@end table

@c --------------------------------------------------------------------
@node Files
@section Files
@c --------------------------------------------------------------------

@noindent

@table @file
   @item $HOME/.gps
GPS state directory

   @item $HOME/.gps/log
@anchor{log file}
Log file created automatically by GPS

   @item $HOME/.gps/custom
You can edit this file to add your own menu entries in GPS.
@xref{Customizing the Menu Bar}.

   @item $HOME/.gps/custom_key
Contains all the key bindings defined in GPS. This file is
automatically created if you have activated the dynamic key bindings feature
(@xref{Changing Colors Fonts and Key Bindings}.)

   @item $HOME/.gps/desktop
Desktop file in XML format (using the menu @code{File->Save...->Desktop}),
loaded automatically if found.

   @item $HOME/.gps/preferences
Contains all the preferences in XML format, as specified in the
preferences menu.

   @item $HOME/.gps/window_settings
Contains all the settings of the windows (window sizes, pane
offset) in XML format. These settings are saved automatically when quitting
GPS, and loaded automatically at start up. To reset the settings, simply
remove this file.

   @item $HOME/.gps/sessions
Directory containing the debugging sessions.

   @item $HOME/.gps/gtkrc
The theme used by the gtk+ library on which gps is based. It allows you
to configure the colors and fonts used in your
application. @xref{Changing Colors Fonts and Key Bindings}.
See also @file{<prefix>/etc/gps/gtkrc}.

   @item $HOME/.gps/sessions/@i{session}
Each file in the @code{sessions} directory represents a particular session
saved by the user.

   @item $HOME/.gps/traces.cfg
Default configuration for the system traces. This traces are used to analyse
problems with GPS. By default, they are sent to the file @file{$HOME/.gps/log}.

   @item @i{prefix}
The prefix directory where GPS is installed, e.g @file{/opt/gps}.

   @item @i{prefix}/bin
The directory containing the GPS executables.

   @item @i{prefix}/etc/gps
The directory containing global configuration files for GPS.

   @item @i{prefix}/etc/gps/gtkrc
The global theme used by the gtk+ library. See also @file{$HOME/.gps/gtkrc}.

   @item @i{prefix}/etc/gps/pangorc
The pango (generic font handling) configuration file.

   @item @i{prefix}/etc/gps/pangox.aliases
File defining font aliases to X font set.

   @item @i{prefix}/lib
This directory contains the shared libraries used by GPS.

   @item @i{prefix}/doc/gps/html
GPS will look for all the documentation files under this directory.

   @item @i{prefix}/doc/gps/examples
This directory contains source code examples.

   @item @i{prefix}/doc/gps/examples/tutorial
This directory contains the sources used by the GPS tutorial
(@url{gps-tutorial.html}).

   @item @i{prefix}/share/gps/gps-animation.gif
Animated image displayed in the top right corner of GPS to indicate that
actions (e.g compilation) are going on.

   @item @i{prefix}/share/gps/gps-splash.jpg
Splash screen displayed by default when GPS is started.

   @item @i{prefix}/share/themes
Directory containing the Gtk+ predefined themes.

   @item @i{prefix}/share/make
Directory containing shared makefiles used by the multi-language build
system.

   @item @i{prefix}/share/locale
Directory used to retrieve the translation files, when relevant.

@end table

@c --------------------------------------------------------------------
@node Reporting Suggestions and Bugs
@section Reporting Suggestions and Bugs
@c --------------------------------------------------------------------

@noindent
If you would like to make suggestions about GPS, or if you encountered a bug,
please report it to @uref{mailto:report@@gnat.com} following the usual GNAT
reports recommendations as explained in the file README.GNATPRO.

Please try to include a detailed description of the problem, including
sources to reproduce it if possible/needed, and/or a scenario describing the
actions performed to reproduce the problem, as well as the tools (e.g
@i{debugger}, @i{compiler}) involved.

The files @file{$HOME/.gps/log} and @file{$HOME/.gps/debugger.log} may also
bring some useful information when reporting a bug.

@c --------------------------------------------------------------------
@node Solving Problems
@section Solving Problems
@c --------------------------------------------------------------------

@noindent
This section addresses some common problems that arise when installing GPS
on a new machine.

@table @samp

@item Non-priviledged users cannot start GPS
Q: I have installed GPS originally as super user, and ran GPS successfully,
but normal users can't.

A: You should check the permissions of the directory $HOME/.gps and its
subdirectories, they should be owned by the user itself.

@item GPS crashes whenever I open a source editor
This is usually due to font problems. Typically, editing the file
@file{$HOME/.gps/preferences} and changing the name of the fonts, e.g
changing @i{Courier} by @i{Courier Medium}, and @i{Helvetica} by @i{Sans}.

@item GPS refuses to start the debugger
If GPS cannot properly initialize the debugger (using the menu
@code{Debug->Initialize}), it is usually because the underlying debugger
(gdb) cannot be launched properly. To verify this, try to launch the
'gdb' command from a shell (i.e outside GPS). If gdb cannot be launched from
a shell, it usually means that you are using a wrong version of gdb
(e.g a version of gdb built for Solaris 8, but run on Solaris 2.6).

@end table

@c @printindex cp

@contents

@bye
