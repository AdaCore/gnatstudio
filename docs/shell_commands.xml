<?xml version="1.0" ?>

<!--  This file contains the documentation of all the shell commands that
      are exported by GPS.
      We avoid hard-coded descriptions, so that it is easier to translate the
      GPS help, and to check the spelling in the documentation.
      User can also add their own knowledge database
  -->

<docs>
  <!--#################################################################
    ####   Top level functions
    ###################################################################-->

  <shell_doc name="GPS.get_system_dir">
     <return>The install directory for GPS</return>
     <description>Return the installation directory for GPS.
This directory always ends with a directory separator</description>
     <example lang="python">
        html = GPS.get_system_dir() + "doc/gps/html/gps.html"
        will compute the location of GPS's documentation
     </example>
     <see_also name="GPS.get_home_dir()" />
  </shell_doc>

  <shell_doc name="GPS.get_home_dir">
     <return>The user's GPS directory</return>
     <description>Return the directory that contains the user-specific files.
This directory always ends with a directory separator</description>
     <example lang="python">
        log = GPS.get_home_dir() + "log"
        will compute the name of the log file generated by GPS
     </example>
     <see_also name="GPS.get_system_dir()" />
  </shell_doc>

  <shell_doc name="GPS.insmod">
     <param name="shared_lib">Library containing the code of the module</param>
     <param name="module">Name of the module</param>
     <description>Dynamically register a new module, reading its code from shared_lib.
The library must define the following two symbols:
  - _init: This is called by GPS to initialize the library itself
  - __register_module: This is called to do the actual module registration, and
                       should call the Register_Module function in the GPS
                       source code

This is work in progress, and not fully supported on all systems.
     </description>
     <see_also name="GPS.lsmod()" />
  </shell_doc>

  <shell_doc name="GPS.lsmod">
     <return>List of strings</return>
     <description>Return the list of modules that are currently registered in
GPS. Each facility in GPS is provided in a separate module, so that users
can choose whether to activate specific modules or not. Some modules can also
be dynamically loaded</description>
     <see_also name="GPS.insmod()" />
  </shell_doc>

  <shell_doc name="GPS.supported_languages">
     <return>List of strings</return>
     <description>Return the list of languages for which GPS has special handling. Any file can be open in GPS, but some extensions are recognized specially by GPS to provide syntax highlighting, cross-references, or other special handling. See the GPS documentation on how to add support for new languages in GPS.

The returned list is sorted alphabetically, and the name of the language has been normalized (start with an upper case, and use lowercases for the rest except after an underscore character)</description>
     <example lang="python">
        GPS.supported_languages()[0]
        will return the name of the first supported language
     </example>
  </shell_doc>

  <shell_doc name="GPS.execute_action">
     <param name="action">Name of the action to execute</param>
     <param name="...">Any number of string parameters</param>
     <description>Execute one of the actions defined in GPS. Such actions are
either predefined by GPS or defined by the users through customization files.
See the GPS documentation for more information on how to create new actions.
Through this call, GPS will not wait for the action to terminate, therefore the
action should not contain external commands to execute, if you expect to get
their output.

The action's name can start with a '/', and be a full menu path. As a result,
the menu itself will be executed, just as if the user had pressed it.

The extra arguments must be strings, and are passed to the action, which can
use them through $1, $2,...

The list of existing actions can be found through the Edit->Actions menu.

The action will not be executed if the current context is not appropriate for
this action.
</description>
     <example lang="python">
        GPS.execute_action (action="Split vertically")
        will split the current window vertically
     </example>
  </shell_doc>

  <shell_doc name="GPS.parse_xml">
     <param name="xml">The XML string to parse</param>
     <description>Load an XML customization string. This string should contain one or more toplevel tags similar to what is normally found in custom files, such as &lt;key&gt;, &lt;alias&gt;, &lt;action&gt;,..

Optionally you can also pass the full contents of an XML file, starting from the &lt;?xml?&gt; header.</description>
     <example lang="python">
        GPS.parse_xml \
          ("""&lt;action name="A"&gt;&lt;shell&gt;my_action&lt;/shell&gt;&lt;/action&gt; \
              &lt;menu action="A"&gt;&lt;title&gt;/Edit/A&lt;/title&gt;&lt;/menu&gt;""")
        Adds a new menu in GPS, which executes the command my_action
     </example>
  </shell_doc>

  <shell_doc name="GPS.set_busy">
     <description>Activate the "busy" state in GPS by animating the GPS icon. This command can be called recursively, and GPS.unset_busy should be called a corresponding number of time to stop the animation.</description>
     <see_also>GPS.unset_busy()</see_also>
  </shell_doc>

  <shell_doc name="GPS.unset_busy">
     <description>Reset the "busy" state</description>
     <see_also>GPS.set_busy()</see_also>
  </shell_doc>

  <shell_doc name="GPS.current_context">
     <return>An instance of GPS.FileContext, GPS.AreaContext,...</return>
     <description>Returns the current context in GPS. This is the currently selected file, line, column, project,... depending on what window is currently active</description>
     <see_also name="GPS.Editor.get_line()"/>
     <see_also name="GPS.Editor.*: Most of these functions apply to the current editor" />
     <see_also name="GPS.MDI.current(): Access the current window" />
  </shell_doc>

  <shell_doc name="GPS.compute_xref">
      <description>Update the cross-reference information stored in GPS. This needs to be called after major changes to the sources only, since GPS itself is able to work with partially up-to-date information</description>
  </shell_doc>

  <shell_doc name="GPS.get_build_output">
      <return>List of strings, one per line in the output of the build</return>
      <description>Return the result of the last compilation command</description>
      <see_also name="GPS.File.make()"/>
      <see_also name="GPS.File.compile()"/>
  </shell_doc>

  <shell_doc name="GPS.macro_play">
      <param name="speed" default="1.0">A string</param>
      <description>Play current set of events</description>
  </shell_doc>

  <shell_doc name="GPS.macro_record">
      <description>Start recording set of events</description>
  </shell_doc>

  <shell_doc name="GPS.macro_load">
      <param name="file">A string</param>
      <description>Load file containing a set of recorded events</description>
  </shell_doc>

  <shell_doc name="GPS.add_location_command">
      <param name="command">A string</param>
      <param name="...">Any number of parameters</param>
      <description>Add a command to the navigation buttons in the toolbar. When the user presses the back button, this command will be executed, and should put GPS in a previous state. This is for instance used while navigating in the HTML browsers to handle the back button</description>
  </shell_doc>

  <shell_doc name="GPS.visual_diff">
     <param name="file1">A string</param>
     <param name="file2">A string</param>
     <param name="file3" default="">A string</param>
     <description>Open a Visual Diff between file1, file2 and file3</description>
  </shell_doc>

  <shell_doc name="GPS.pwd">
     <return>A string</return>
     <description>Print name of current/working directory</description>
     <example lang="python">
        This command will have the same return value as the standard Python
        command os.getcwd(). The current directory can also be changed through
        a call to os.chdir("dir").
     </example>
  </shell_doc>

  <shell_doc name="GPS.cd">
     <param name="dir">A string</param>
     <description>Change the current directory to dir</description>
  </shell_doc>

  <shell_doc name="GPS.delete">
     <param name="name">A string</param>
     <description>Delete file/directory name from the file system</description>
  </shell_doc>

  <shell_doc name="GPS.dir">
     <param name="pattern" default="">A string</param>
     <return>A list of strings</return>
     <description>list files following pattern (all files by default)</description>
  </shell_doc>

  <shell_doc name="GPS.ls">
     <param name="pattern" default="">A string</param>
     <return>A list of strings</return>
     <description>list files following pattern (all files by default)</description>
  </shell_doc>

  <shell_doc name="GPS.dump">
     <param name="string">A string</param>
     <param name="add_lf" default="False">A boolean</param>
     <return>A string, the name of the output file</return>
     <description>Dump string to a temporary file. Return the name of the file. If add_lf is TRUE, append a line feed at end of file</description>
  </shell_doc>

  <shell_doc name="GPS.dump_xref_db">
     <description>Dump in the file $HOME/.gps/db_dump the current contents of the cross-references database. This is intended for debugging purposes only</description>
  </shell_doc>

  <shell_doc name="GPS.reset_xref_db">
     <description>Reset the internal cross-reference database that GPS is using for most of its navigation facilities. You shouldn't have to call that yourself, since in general GPS should know by itself when it is necessary to refresh its database. However, this might be used as a workaround if you think you have troubles with the cross-reference information which isn't accurate.</description>
  </shell_doc>

  <!--#################################################################
    ####   GPS shell commands
    ###################################################################-->

  <shell_doc name="GPS.help">
     <param name="command" default="">A string</param>
     <return>A string</return>
     <description>Return the description of the command given in parameter, or the list of all commands exported by GPS. GPS.help is specific to the GPS shell</description>
  </shell_doc>

  <shell_doc name="GPS.echo">
     <param name="...">Any number of parameters</param>
     <description>Display a line of text. This command is specific to the GPS shell.</description>
  </shell_doc>

  <shell_doc name="GPS.load">
     <param name="filename">A string</param>
     <description>Load and execute a script file. This command is specific to the GPS shell.</description>
  </shell_doc>

  <shell_doc name="GPS.clear_cache">
      <description>Free the internal cache used for return values. This function needs to be called explicitly, or previously returned value are never freed. After calling this function, you can no longer use %1, %2,... to refer to previously returned values.</description>
  </shell_doc>

  <!--#################################################################
    ####   File class
    ###################################################################-->

  <shell_doc name="GPS.File">
      <description>Represents a source file of your application</description>
      <see_also name="GPS.File.__init__()" />
  </shell_doc>

  <shell_doc name="GPS.File.__str__">
      <param name="self">The instance of GPS.File</param>
      <return>A string</return>
      <description>Return a string suitable for the display of self on screen. This is called implicitly by GPS and Python</description>
  </shell_doc>

  <shell_doc name="GPS.File.__repr__">
      <param name="self">The instance of GPS.File</param>
      <return>A string</return>
      <description>Return a string suitable for the display of self on screen. This is called implicitly by GPS and Python</description>
  </shell_doc>

  <shell_doc name="GPS.File.__hash__">
      <param name="self">The instance of GPS.File</param>
      <return>An integer</return>
      <description>Return a hash value suitable for storing self in a dictionary</description>
  </shell_doc>

  <shell_doc name="GPS.File.__cmp__">
      <param name="self">The instance of GPS.File</param>
      <param name="file">An instance of GPS.File</param>
      <return>An integer</return>
      <description>Compare two instances of GPS.File, and return -1, 0 or 1 depending on their relative sort order</description>
  </shell_doc>

  <shell_doc name="GPS.File.__init__">
      <param name="self">The instance being constructed</param>
      <param name="name">Name of the file associated with this instance</param>
      <description>Initializes a new instance of the class File. This doesn't need to be called explicitly, since GPS will call it automatically when you create such an instance. If name is a base file name (no directory is specified), then GPS will attempt to search for this file in the list of source directories of the project. If a directory is specified, or the base file name wasn't found in the source directories, then the file name is considered as relative to the current directory.</description>
      <example lang="python">
         file=GPS.File("/tmp/work")
         print file.name()
      </example>
      <see_also name="GPS.File.name" />
  </shell_doc>

  <shell_doc name="GPS.File.name">
      <param name="self">The instance whose name you want to get</param>
      <return>A string, the name of the file</return>
      <description>Return the name of the file associated with self. This is an absolute file name, including directories from the root of the filesystem</description>
  </shell_doc>

  <shell_doc name="GPS.File.language">
     <param name="self">The instance of GPS.File</param>
     <return>A string</return>
     <description>Return the name of the language this file is written in. This is based on the file extension and the naming scheme defined in the project files or the XML files. The empty string is returned when the language is unknown</description>
  </shell_doc>

  <shell_doc name="GPS.File.other_file">
      <param name="self">The instance to which the operation applies</param>
      <return>An instance of GPS.File</return>
      <description>Return the name of the other file semantically associated with this one. In Ada this is the spec or body of the same package depending on the type of this file. In C, this will generally be the .c or .h file with the same base name.</description>
      <example lang="python">
         GPS.File ("tokens.ads").other_file().name()
         will print "/full/path/to/tokens.adb" in the context of the project
         file used for the GPS tutorial.
      </example>
  </shell_doc>

  <shell_doc name="GPS.File.project">
      <param name="self">The instance of File to which the operation applies</param>
      <return>An instance of GPS.Project</return>
      <description>Return the project to which file belongs. If file is not one of the souces of the project, the root project is returned.</description>
      <example lang="python">
         GPS.File ("tokens.ads").project().name()
         will print "/full/path/to/sdc.gpr" in the context of the project file
         used for the GPS tutorial
      </example>
  </shell_doc>

  <shell_doc name="GPS.File.uses">
      <param name="self">The instance of GPS.File</param>
      <description>Display in the dependency browser the list of files that file_name depends on.</description>
      <see_also name="GPS.File.used_by()"/>
  </shell_doc>

  <shell_doc name="GPS.File.used_by">
      <param name="self">The instance of GPS.File</param>
      <description>Display in the dependency browser the list of files that depends on file_name. This command might take some time to execute since GPS needs to parse the cross-reference information for multiple source files</description>
      <see_also name="GPS.File.uses()" />
  </shell_doc>

  <shell_doc name="GPS.File.compile">
      <param name="self">The instance of GPS.File</param>
      <description>Compile current file. This call will return only once the compilation is completed</description>
      <example lang="python">
          GPS.File ("a.adb").compile()
      </example>
      <see_also name="GPS.File.make()"/>
  </shell_doc>

  <shell_doc name="GPS.File.check_syntax">
      <param name="self">The instance of GPS.File</param>
      <description>Check the syntax for current file. This call will return only once the check is completed</description>
      <see_also name="GPS.File.shadow_check_syntax()"/>
  </shell_doc>

  <shell_doc name="GPS.File.shadow_check_syntax">
      <param name="self">The instance of GPS.File</param>
      <description>Check the syntax for current file. The current file will not be saved, but a temporary extending project will be created, and deleted when the compilation ends. This call will launch a background process and return immediately</description>
      <see_also name="GPS.File.check_syntax()"/>
  </shell_doc>

  <shell_doc name="GPS.File.make">
      <param name="self">The instance of GPS.File</param>
      <description>Compile and link the file and all its dependencies. This call will return only once the compilation is completed</description>
      <see_also name="GPS.File.compile()"/>
  </shell_doc>

  <shell_doc name="GPS.File.search">
      <param name="self">The instance of GPS.File</param>
      <param name="pattern">A string</param>
      <param name="case_sensitive" default="False">A boolean</param>
      <param name="regexp" default="False">A boolean</param>
      <param name="scope" default="whole">One of ("whole", "comments", "strings", "code")</param>
      <return>List of GPS.FileLocation instances</return>
      <description>Return the list of matches for pattern in the file. Default values are False for case_sensitive and regexp. Scope is a string, and should be any of 'whole', 'comments', 'strings', 'code'. The latter will match only for text outside of comments</description>
  </shell_doc>

  <shell_doc name="GPS.File.search_next">
      <param name="self">The instance of GPS.File</param>
      <param name="pattern">A string</param>
      <param name="case_sensitive" default="False">A boolean</param>
      <param name="regexp" default="False">A boolean</param>
      <return>An instance of GPS.FileLocation</return>
      <description>Return the next match for pattern in the file. Default values are False for case_sensitive and regexp. Scope is a string, and should be any of 'whole', 'comments', 'strings', 'code'. The latter will match only for text outside of comments</description>
  </shell_doc>

  <!--#################################################################
    ####   Entity class
    ###################################################################-->

  <shell_doc name="GPS.Entity">
      <description>Represents an entity from the source, based on the location of its declaration</description>
      <see_also name="GPS.Entity.__init__()" />
  </shell_doc>

  <shell_doc name="GPS.Entity.__str__">
      <param name="self">The instance of GPS.Entity</param>
      <return>A string</return>
      <description>Return a string suitable for the display of self on screen. This is called implicitly by GPS and Python</description>
  </shell_doc>

  <shell_doc name="GPS.Entity.__repr__">
      <param name="self">The instance of GPS.Entity</param>
      <return>A string</return>
      <description>Return a string suitable for the display of self on screen. This is called implicitly by GPS and Python</description>
  </shell_doc>

  <shell_doc name="GPS.Entity.__hash__">
      <param name="self">The instance of GPS.Entity</param>
      <return>An integer</return>
      <description>Return a hash value suitable for storing self in a dictionary</description>
  </shell_doc>

  <shell_doc name="GPS.Entity.__cmp__">
      <param name="self">The instance of GPS.Entity</param>
      <param name="file">An instance of GPS.Entity</param>
      <return>An integer</return>
      <description>Compare two instances of GPS.Entity, and return -1, 0 or 1 depending on their relative sort order</description>
  </shell_doc>

  <shell_doc name="GPS.Entity.__init__">
      <param name="self">The instance of GPS.Entity we are building</param>
      <param name="name">A string, the name of the entity</param>
      <param name="file" default="None">An instance of GPS.File, in which the entity is referenced</param>
      <param name="line" default="1">An integer, the line at which the entity is referenced</param>
      <param name="column" default="1">An integer, the column at which the entity is referenced</param>
      <description>Initializes a new instance of the Entity class, from any reference to the entity. The file parameter should only be omitted for a predefined entity of the language. This will only work for languages for which a cross-reference engine has been defined</description>
      <example lang="python">
          GPS.Entity ("foo", GPS.File ("a.adb"), 10, 23).declaration().file().name()
          will return the full path name of the file in which the entity "foo",
          referenced in a.adb at line 10, column 23, is defined.
      </example>
  </shell_doc>

  <shell_doc name="GPS.Entity.name">
      <param name="self">The instance of GPS.Entity</param>
      <return>A string, the name of the entity</return>
      <description>Return the name of the entity. The casing of the name has been normalized to lower-cases for case-insensitive languages</description>
  </shell_doc>

  <shell_doc name="GPS.Entity.declaration">
      <param name="self">The instance of GPS.Entity</param>
      <return>An instance of GPS.FileLocation, where the entity is declared</return>
      <description>Return the location of the declaration for the entity. The file's name is is "&lt;predefined&gt;" for predefined entities</description>
      <example lang="python">
          entity=GPS.Entity  ("integer")
          if entity.declaration().file().name == "&lt;predefined&gt;":
             print "This is a predefined entity"
      </example>
  </shell_doc>

  <shell_doc name="GPS.Entity.body">
      <param name="self">The instance of GPS.Entity</param>
      <return>An instance of GPS.FileLocation</return>
      <description>Return the location at which the implementation of the entity is found. For Ada subprograms and packages, this corresponds to the body of the entity. For Ada private types, this is the location of the full declaration for the type. For entities which do not have a notion of body, this returns the location of the declaration for the entity.</description>
      <example lang="python">
           entity = GPS.Entity ("bar", GPS.File ("a.adb"), 10, 23)
           body = entity.body()
           print "The subprogram bar's implementation is found at " \
              + body.file.name() + ':' + body.line() + ':' + body.column()
      </example>
  </shell_doc>

  <shell_doc name="GPS.Entity.find_all_refs">
      <param name="self">The instance of GPS.Entity</param>
      <param name="include_implicit" default="False">A boolean</param>
      <description>Display in the location window all the references to the entity. If include_implicit is true, then implicit uses of the entity will also be referenced, for instance when the entity appears as an implicit parameter to a generic instantiation in Ada</description>
      <see_also name="GPS.Entity.references()"/>
  </shell_doc>

  <shell_doc name="GPS.Entity.references">
      <param name="self">The instance of GPS.Entity</param>
      <param name="include_implicit" default="False">A boolean</param>
      <return>List of GPS.FileLocation</return>
      <description>List all references to the entity in the project sources. If include_implicit is true, then implicit uses of the entity will also
be referenced, for instance when the entity appears as an implicit parameter
to a generic instantiation in Ada.</description>
      <example lang="python">
         for r in GPS.Entity ("GPS", GPS.File("gps.adb")).references():
             print "One reference in " + r.file().name()
      </example>
      <see_also name="GPS.Entity.find_all_refs()"/>
  </shell_doc>

  <shell_doc name="GPS.Entity.calls">
      <param name="self">The instance of GPS.Entity</param>
      <return>A dictionary, see below</return>
      <description>Display the list of entities called by the entity. The returned value is a dictionary whose keys are instances of Entity called by this entity, and whose value is a list of FileLocation instances where the entity is referenced</description>
      <see_also name="GPS.Entity.is_called_by()"/>
  </shell_doc>

  <shell_doc name="GPS.Entity.called_by">
      <param name="self">The instance of GPS.Entity</param>
      <return>A dictionary, see below</return>
      <description>Display the list of entities that call the entity. The returned value is a dictionary whose keys are instances of Entity called by this entity, and whose value is a list of FileLocation instances where the entity is referenced. This command might take a while to execute, since GPS needs to get the cross-reference information for lots of source files.</description>
  </shell_doc>

  <shell_doc name="GPS.Entity.called_by_browser">
      <param name="self">The instance of GPS.Entity</param>
      <description>Open the call graph browser to show what entities call self</description>
  </shell_doc>

  <shell_doc name="GPS.Entity.show">
      <param name="self">The instance of GPS.Entity</param>
      <description>Display in the type browser the informations known about the entity: list of fields for records, list of primitive subprograms or methods, list of parameters, ...</description>
  </shell_doc>

  <shell_doc name="GPS.Entity.discriminants">
      <param name="self">The instance of GPS.Entity</param>
      <return>List of instances of GPS.Entity</return>
      <description>Return the list of discriminants for entity. This is a list of entities, empty if the type has no discriminant or if this notion doesn't apply to that language</description>
  </shell_doc>

  <shell_doc name="GPS.Entity.fields">
      <param name="self">The instance of GPS.Entity</param>
      <return>List of instances of GPS.Entity</return>
      <description>Return the list of fields for entity. This is a list of entities. This applies to Ada record and tagged types, or C structs for instance.</description>
  </shell_doc>

  <shell_doc name="GPS.Entity.parameters">
      <param name="self">The instance of GPS.Entity</param>
      <return>List of instances of GPS.Entity</return>
      <description>Return the list of parameters for entity. This is a list of entities. This applies to subprograms.</description>
  </shell_doc>

  <shell_doc name="GPS.Entity.return_type">
      <param name="self">The instance of GPS.Entity</param>
      <return>An instance of GPS.Entity</return>
      <description>Return the return type for entity. This applies to subprograms.</description>
  </shell_doc>


  <!--#################################################################
    ####   FileLocation class
    ###################################################################-->

  <shell_doc name="GPS.FileLocation">
      <description>Represents a location in a file</description>
      <see_also name="GPS.FileLocation.__init__()" />
  </shell_doc>

  <shell_doc name="GPS.FileLocation.__str__">
      <param name="self">The instance of GPS.FileLocation</param>
      <return>A string</return>
      <description>Return a string suitable for the display of self on screen. This is called implicitly by GPS and Python</description>
  </shell_doc>

  <shell_doc name="GPS.FileLocation.__repr__">
      <param name="self">The instance of GPS.FileLocation</param>
      <return>A string</return>
      <description>Return a string suitable for the display of self on screen. This is called implicitly by GPS and Python</description>
  </shell_doc>

  <shell_doc name="GPS.FileLocation.__hash__">
      <param name="self">The instance of GPS.FileLocation</param>
      <return>An integer</return>
      <description>Return a hash value suitable for storing self in a dictionary</description>
  </shell_doc>

  <shell_doc name="GPS.FileLocation.__cmp__">
      <param name="self">The instance of GPS.FileLocation</param>
      <param name="file">An instance of GPS.FileLocation</param>
      <return>An integer</return>
      <description>Compare two instances of GPS.FileLocation, and return -1, 0 or 1 depending on their relative sort order</description>
  </shell_doc>

  <shell_doc name="GPS.FileLocation.__init__">
      <param name="self">The instance we are building</param>
      <param name="filename">An instance of GPS.File</param>
      <param name="line">An integer</param>
      <param name="column">An integer</param>
      <description>Initializes a new instance of GPS.FileLocation.</description>
      <example lang="python">
          location = GPS.FileLocation (GPS.File ("a.adb"), 1, 2)
      </example>
  </shell_doc>

  <shell_doc name="GPS.FileLocation.line">
      <param name="self">The instance of GPS.FileLocation</param>
      <return>An integer, the line of the location</return>
      <description>Return the line of the location</description>
      <see_also>GPS.FileLocation.file()</see_also>
      <see_also>GPS.FileLocation.column()</see_also>
  </shell_doc>

  <shell_doc name="GPS.FileLocation.column">
      <param name="self">The instance of GPS.FileLocation</param>
      <return>An integer, the column of the location</return>
      <description>Return the column of the location</description>
      <see_also>GPS.FileLocation.file()</see_also>
      <see_also>GPS.FileLocation.line()</see_also>
  </shell_doc>

  <shell_doc name="GPS.FileLocation.file">
      <param name="self">The instance of GPS.FileLocation</param>
      <return>An instance of GPS.File, the file of the location</return>
      <description>Return the file of the location</description>
      <see_also>GPS.FileLocation.line()</see_also>
      <see_also>GPS.FileLocation.column()</see_also>
  </shell_doc>

  <!--#################################################################
    ####   Project class
    ###################################################################-->

  <shell_doc name="GPS.Project">
      <description>Represents a project file. See also the GPS documentation on how to create new project attributes.

Related hooks:
   "project_view_changed": Called whenever the project is recomputed, ie one
      of its attributes was changed by the user, the environment variables are
      changed,...
      Then is a good time to test the list of languages
      (GPS.Project.languages()) that the project supports, and do
      language-specific customizations

   "project_changed": A new project was loaded. The hook above will be called
      after this one
</description>
      <see_also name="GPS.Project.__init__()" />
  </shell_doc>

  <shell_doc name="GPS.Project.__str__">
      <param name="self">The instance of GPS.Project</param>
      <return>A string</return>
      <description>Return a string suitable for the display of self on screen. This is called implicitly by GPS and Python</description>
  </shell_doc>

  <shell_doc name="GPS.Project.__repr__">
      <param name="self">The instance of GPS.Project</param>
      <return>A string</return>
      <description>Return a string suitable for the display of self on screen. This is called implicitly by GPS and Python</description>
  </shell_doc>

  <shell_doc name="GPS.Project.__hash__">
      <param name="self">The instance of GPS.Project</param>
      <return>An integer</return>
      <description>Return a hash value suitable for storing self in a dictionary</description>
  </shell_doc>

  <shell_doc name="GPS.Project.__cmp__">
      <param name="self">The instance of GPS.Project</param>
      <param name="file">An instance of GPS.Project</param>
      <return>An integer</return>
      <description>Compare two instances of GPS.Project, and return -1, 0 or 1 depending on their relative sort order</description>
  </shell_doc>

  <shell_doc name="GPS.Project.__init__">
      <param name="self">The instance of GPS.Project that we are building</param>
      <param name="name">The project name</param>
      <description>Initializes an instance of GPS.Project. The project must be currently loaded in GPS</description>
      <see_also name="GPS.Project.name"/>
  </shell_doc>

  <shell_doc name="GPS.Project.root">
      <return>An instance of GPS.Project</return>
      <description>Return the root project currently loaded in GPS</description>
      <example lang="python">
           print "Current project is " + \
                 GPS.Project.root().name()
      </example>
  </shell_doc>

  <shell_doc name="GPS.Project.recompute">
       <description>Recompute the contents of a project, including the list of source files that are automatically loaded from the source directories. The project file is not reloaded from the disk, and this should only be used if you have created new source files outside of GPS for instance</description>
       <example lang="python">
            GPS.Project.recompute()
       </example>
  </shell_doc>

  <shell_doc name="GPS.Project.load">
       <param name="filename">A string, the full path to a project file</param>
       <param name="force" default="False">A boolean</param>
       <return>An instance of GPS.Project</return>
       <description>Load a new project, which replaces the current root project, and return a handle to it. All imported projects are also loaded at the same time. If the project is not found, a default project is loaded.
If force is True, then the user will not be asked whether to save the current project, whether it was modified or not</description>
  </shell_doc>

  <shell_doc name="GPS.Project.name">
       <param name="self">An instance of GPS.Project</param>
       <return>A string, the name of the project</return>
       <description>Return the name of the project. This doesn't include directory information, see self.file().name() if you wish to access that information</description>
  </shell_doc>

  <shell_doc name="GPS.Project.rename">
       <param name="self">An instance of GPS.Project</param>
       <param name="name">A string</param>
       <param name="path" default="&lt;current path&gt;">A string</param>
       <description>Rename and move a project file (the project will only be put in the new directory when it is saved, but will not be removed from its original directory). You must call GPS.Project.recompute() sometime after changing the name.</description>
  </shell_doc>

  <shell_doc name="GPS.Project.file">
       <param name="self">An instance of GPS.Project</param>
       <return>An instance of GPS.File</return>
       <description>Return the project file</description>
  </shell_doc>

  <shell_doc name="GPS.Project.ancestor_deps">
       <param name="self">An instance of GPS.Project</param>
       <return>A list of instances of GPS.Project</return>
       <description>Return the list of projects that might contain sources that depend on the project's sources. When doing extensive searches it isn't worth checking other projects. Project itself is included in the list.
This is also the list of projects that import self.</description>
       <example lang="python">
           for p in GPS.Project("kernel").ancestor_deps(): print p.name()
           will print the name of all the projects that import kernel.gpr
       </example>
  </shell_doc>

  <shell_doc name="GPS.Project.get_attribute_as_string">
       <param name="self">An instance of GPS.Project</param>
       <param name="attribute">A string, the name of the attribute</param>
       <param name="package" default="">A string, the name of the attribute's package</param>
       <param name="index" default="">A string, the name of the index for the specific value of this attribute</param>
       <return>A string, the value of this attribute</return>
       <description>Fetch the value of the attribute in the project.
If the package is not specified, the attribute at the toplevel of the project is queried.
The index only needs to be specified if it applies to that attribute.
If the attribute value is stored as a list, the result string is a concatenation of all the elements of the list. This function always returns the value of the attribute in the currently selected scenario.</description>
       <example lang="python">
           If the project file contains the following text:
               project Default is
                 for Exec_Dir use "exec/";
                 package Compiler is
                    for Switches ("file.adb") use ("-c", "-g");
                 end Compiler;
               end Default;

            Then the following commands;
                a = GPS.Project ("default").get_attribute_as_string ("exec_dir")
                b = GPS.Project ("default").get_attribute_as_string ("switches", package="compiler", index="file.adb")

            will set the variables to
                a = "exec/"
                b = "-c -g"
       </example>
       <see_also name="GPS.Project.scenario_variables()"/>
       <see_also name="GPS.Project.get_attribute_as_list()"/>
       <see_also name="GPS.Project.get_tool_switches_as_string()"/>
  </shell_doc>

  <shell_doc name="GPS.Project.get_attribute_as_list">
       <param name="self">An instance of GPS.Project</param>
       <param name="attribute">A string, the name of the attribute</param>
       <param name="package" default="">A string, the name of the attribute's package</param>
       <param name="index" default="">A string, the name of the index for the specific value of this attribute</param>
       <return>A list of strings</return>
       <description>Fetch the value of the attribute in the project.
If the package is not specified, the attribute at the toplevel of the project is queried.
The index only needs to be specified if it applies to that attribute.
If the attribute value is stored as a simple string, a list with a single element is returned. This function always returns the value of the attribute in the currently selected scenario.</description>
       <example lang="python">
           If the project file contains the following text:
               project Default is
                 for Exec_Dir use "exec/";
                 package Compiler is
                    for Switches ("file.adb") use ("-c", "-g");
                 end Compiler;
               end Default;

            Then the following commands;
                a = GPS.Project ("default").get_attribute_as_list ("exec_dir")
                b = GPS.Project ("default").get_attribute_as_list ("switches", package="compiler", index="file.adb")

            will set the variables to
                a = ("exec/")
                b = ("-c", "-g")
       </example>
       <see_also name="GPS.Project.scenario_variables()"/>
       <see_also name="GPS.Project.get_attribute_as_string()"/>
       <see_also name="GPS.Project.get_tool_switches_as_list()"/>
  </shell_doc>

  <shell_doc name="GPS.Project.get_tool_switches_as_list">
       <param name="self">An instance of GPS.Project</param>
       <param name="tool">The name of the tool whose switches you want to get</param>
       <return>A list of strings</return>
       <description>Same as get_attribute_as_list, but specialized for the switches of a specific tool. Tools are defined through XML customization files, see the GPS documentation for more information</description>
       <example lang="python">
           If GPS has loaded a customization file that contains the following
           tags:
               &lt;?xml version="1.0" ?&gt;
               &lt;toolexample&gt;
                  &lt;tool name="Find"&gt;
                     &lt;switches&gt;
                        &lt;check label="Follow links" switch="-follow" /&gt;
                     &lt;/switches&gt;
                  &lt;/tool&gt;
               &lt;/toolexample&gt;

           The user will as a result be able to edit the switches for Find in
           the standard Project Properties editor.

           Then the python command
               GPS.Project ("default").get_tool_switches_as_list ("Find")
           will return the list of switches that were set by the user in the
           Project Properties editor.
       </example>
       <see_also name="GPS.Project.get_attribute_as_list()"/>
       <see_also name="GPS.Project.get_tool_switches_as_string()"/>
  </shell_doc>

  <shell_doc name="GPS.Project.get_tool_switches_as_string">
       <param name="self">An instance of GPS.Project</param>
       <param name="tool">The name of the tool whose switches you want to get</param>
       <return>A string</return>
       <description>Same as GPS.Project.get_attribute_as_string, but specialized for a specific tool.</description>
       <see_also name="GPS.Project.get_tool_switches_as_list()"/>
  </shell_doc>

  <shell_doc name="GPS.Project.scenario_variables">
     <return>hash table associating variable names and values</return>
     <description>Return the list of scenario variables for the current project hierarchy, and their current value. These variables are visible at the top of the Project View in the GPS window. The initial value for these variables is set from the environment variables' value when GPS is started. However, changing the value of the environment variable later on doesn't change the value of the scenario variable.</description>
     <example lang="python">
        GPS.scenario_variables["foo"]
        returns the current value for the variable foo
     </example>
     <see_also name="GPS.Project.set_scenario_variable()" />
  </shell_doc>

  <shell_doc name="GPS.Project.set_scenario_variable">
      <param name="name">A string</param>
      <param name="value">A string</param>
      <description>Change the value of a scenario variable. You need to call GPS.Project.recompute() to activate this change (so that multiple changes to the project can be grouped</description>
      <see_also name="GPS.Project.scenario_variables()" />
  </shell_doc>

  <shell_doc name="GPS.Project.scenario_variables_cmd_line">
     <param name="prefix" default="">String to print before each variable in the output</param>
     <return>a string</return>
     <description>Return a concatenation of VARIABLE=VALUE, each preceded by the given prefix. This string will generally be used when calling external tools, for instance make or GNAT</description>
     <example lang="python">
        The following GPS action can be defined in an XML file, and will launch
        the make command with the appropriate setup for the environment
        variables:
           &lt;action name="launch make"&gt; \
             &lt;shell lang="python"&gt;GPS.scenario_variables_cmd_line()&lt;/shell&gt;  \
             &lt;external&gt;make %1&lt;/external&gt; \
           &lt;/action&gt;
     </example>
  </shell_doc>

  <shell_doc name="GPS.Project.add_main_unit">
      <param name="self">The instance of GPS.Project</param>
      <param name="...">Any number of arguments, at least one</param>
      <description>Add some main units to the current project, and for the current scenario. The project is not saved automatically</description>
  </shell_doc>

  <shell_doc name="GPS.Project.remove_dependency">
      <param name="self">The instance of GPS.Project</param>
      <param name="imported">An instance of GPS.Project</param>
      <description>Remove a dependency between two projects. You must call GPS.Project.recompute() once you are done doing all the modifications on the projects</description>
      <see_also name="GPS.Project.add_dependency()" />
  </shell_doc>

  <shell_doc name="GPS.Project.add_dependency">
      <param name="self">The instance of GPS.Project</param>
      <param name="path">The path to another project to depend on</param>
      <description>This commands adds a new dependency from self to the project file pointed to by path. This is the equivalent of putting a with clause in self, and means that the source files in self can depend on source files from the imported project</description>
      <see_also name="GPS.Project.remove_dependency()" />
  </shell_doc>

  <shell_doc name="GPS.Project.add_predefined_paths">
       <param name="sources" default="">A list of directories separated by the appropriate separator (':' or ';' depending on the system</param>
       <param name="objects" default="">As above</param>
       <description>Add some predefined directories to the source path or the objects path. These will be searched when GPS needs to open a file by its base name, in particular from the File->Open From Project dialog.
The new paths are added in front, so that they have priorities over previously defined paths.</description>
       <example lang="python">
           GPS.Project.add_predefined_paths (os.pathsep.join (sys.path))
       </example>
  </shell_doc>

  <shell_doc name="GPS.Project.sources">
      <param name="self">The instance of GPS.Project</param>
      <param name="recursive" default="false">A boolean</param>
      <return>A list of instances of GPS.File</return>
      <description>Return the list of source files for this project. If recursive is true, then all sources from imported projects are also returned. Otherwise, only the direct sources are returned. The basenames of the returned files are always unique: not two files with the same basenames are returned, and the one returned is the first one see while traversing the project hierarchy</description>
  </shell_doc>

  <shell_doc name="GPS.Project.source_dirs">
      <param name="self">The instance of GPS.Project</param>
      <param name="recursive" default="false">A boolean</param>
      <return>A list of strings</return>
      <description>Return the list of source directories for this project. If Recursive is True, the source directories of imported projects is also returned. There might be duplicate directories in the returned list</description>
      <see_also name="GPS.Project.add_source_dir()"/>
  </shell_doc>

  <shell_doc name="GPS.Project.languages">
      <param name="self">The instance of GPS.Project</param>
      <param name="recursive" default="false">A boolean</param>
      <return>A list of strings</return>
      <description>Return the list of languages that are used for the sources of the project (and its subprojects if recursive is True). This can be used to detect whether some specific action in a module should be activated or not. Language names are always lowercase</description>
      <example lang="python">
          The following example adds a new menu only if the current project
          supports C. This is refreshed every time the project is changed by
          the user.

          import GPS
          c_menu=None

          def project_recomputed (hook_name):
            global c_menu
            try:
               ## Check whether python is supported
               GPS.Project.root().languages (recursive=True).index ("c")
               if c_menu == None:
                  c_menu = GPS.Menu.create ("/C support")
            except:
               if c_menu:
                  c_menu.destroy()
                  c_menu = None

          GPS.Hook ("project_view_changed").add (project_recomputed)
      </example>
  </shell_doc>

  <shell_doc name="GPS.Project.object_dirs">
      <param name="self">The instance of GPS.Project</param>
      <param name="recursive" default="false">A boolean</param>
      <return>A list of strings</return>
      <description>Return the list of object directories for this project. If Recursive is True, the source directories of imported projects is also returned. There might be duplicate directories in the returned list</description>
  </shell_doc>

  <shell_doc name="GPS.Project.add_source_dir">
      <param name="self">The instance of GPS.Project</param>
      <param name="directory">A string</param>
      <description>Add a new source directory to the project. The new directory is added in front of the source path. You should call recompute() after calling this method, to recompute the list of source files. The directory is added for the current value of the scenario variables only</description>
      <see_also name="GPS.Project.source_dirs()"/>
      <see_also name="GPS.Project.remove_source_dir()"/>
  </shell_doc>

  <shell_doc name="GPS.Project.remove_source_dir">
      <param name="self">The instance of GPS.Project</param>
      <param name="directory">A string</param>
      <description>Remove a source directory from the project. You should call recompute() after calling this method, to recompute the list of source files. The directory is added for the current value of the scenario variables only</description>
      <see_also name="GPS.Project.add_source_dir()"/>
  </shell_doc>

  <shell_doc name="GPS.Project.search">
      <param name="self">The instance of GPS.Project</param>
      <param name="pattern">A string</param>
      <param name="case_sensitive" default="False">A boolean</param>
      <param name="regexp" default="False">A boolean</param>
      <param name="scope" default="whole">One of ("whole", "comments", "strings", "code")</param>
      <param name="recursive" default="True">A boolean</param>
      <return>A list of GPS.FileLocation instances</return>
      <description>Return the list of matches for pattern in all the files belonging to the project (and its imported projects if recursive is true (default). Scope is a string, and should be any of 'whole', 'comments', 'strings', 'code'. The latter will match only for text outside of comments</description>
  </shell_doc>

  <!--#################################################################
    ####  Editor class
    ###################################################################-->

  <shell_doc name="GPS.Editor">
      <description>Interface to all editor-related commands</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.edit">
      <param name="filename">A string</param>
      <param name="line" default="1">An integer</param>
      <param name="column" default="1">An integer</param>
      <param name="length" default="0">An integer</param>
      <param name="force" default="false">A boolean</param>
      <param name="position" default="5">An integer</param>
      <description>Open a file editor for file_name. Length is the number of characters to select after the cursor. If line and column are set to 0, then the location of the cursor is not changed if the file is already opened in an editor. If force is set to true, a reload is forced in case the file is already open. Position indicates the MDI position to open the child in (5 for default, 1 for bottom).

The filename can be a network file name, with the following general format:
   protocol://username@host:port/full/path
where protocol is one of the recognized protocols (http, ftp,.. see the GPS documentation), and the username and port are optional.
</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.create_mark">
      <param name="filename">A string</param>
      <param name="line" default="1">An integer</param>
      <param name="column" default="1">An integer</param>
      <param name="length" default="0">An integer</param>
      <return>A string</return>
      <description>Create a mark for file_name, at position given by line and column. Length corresponds to the text length to highlight after the mark. The identifier of the mark is returned. Use the command goto_mark to jump to this mark</description>
      <see_also name="GPS.Editor.goto_mark()"/>
      <see_also name="GPS.Editor.delete_mark()"/>
  </shell_doc>

  <shell_doc name="GPS.Editor.highlight">
      <param name="file">A string</param>
      <param name="category">A string</param>
      <param name="line" default="0">An integer</param>
      <description>Marks a line as belonging to a highlighting category. If line is not specified, mark all lines in file.</description>
      <see_also name="GPS.Editor.unhighlight()"/>
  </shell_doc>

  <shell_doc name="GPS.Editor.add_blank_lines">
      <param name="file">A string</param>
      <param name="start_line">An integer</param>
      <param name="number_of_lines">An integer</param>
      <param name="category" default="">A string</param>
      <description>Adds number_of_lines non-editable lines to the buffer editing file, starting at line start_line. If category is specified, use it for highlighting. Create a mark at beginning of block and return its ID</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.remove_blank_lines">
      <param name="mark">A string</param>
      <param name="number" default="0">An integer</param>
      <description>Remove blank lines located at mark. If number is specified, remove only the number first lines</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.block_fold">
      <param name="file">A string</param>
      <param name="line" default="">An integer</param>
      <description>Fold the block around line. If line is not specified, fold all blocks in the file.</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.block_unfold">
      <param name="file">A string</param>
      <param name="line" default="">An integer</param>
      <description>Unfold the block around line. If line is not specified, unfold all blocks in the file.</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.unhighlight">
      <param name="file">A string</param>
      <param name="category">A string</param>
      <param name="line" default="0">An integer</param>
      <description>Unmarks the line for the specified category. If line is not specified, unmark all lines in file</description>
      <see_also name="GPS.Editor.highlight()"/>
  </shell_doc>

  <shell_doc name="GPS.Editor.highlight_range">
      <param name="file">A string</param>
      <param name="category">A string</param>
      <param name="line" default="0">An integer</param>
      <param name="start_column" default="0">An integer</param>
      <param name="end_column" default="-1">An integer</param>
      <description>Highlights a portion of a line in a file with the given category</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.unhighlight_range">
      <param name="file">A string</param>
      <param name="category">A string</param>
      <param name="line" default="0">An integer</param>
      <param name="start_column" default="0">An integer</param>
      <param name="end_column" default="-1">An integer</param>
      <description>Remove highlights for a portion of a line in a file</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.register_highlighting">
      <param name="category">A string</param>
      <param name="color">A string</param>
      <param name="speedbar" default="False">A boolean</param>
      <description>Create a new highlighting category with the given color. The format for color is "#RRGGBB". If speedbar is true, then a mark will be inserted in the speedbar to the left of the editor to give a fast overview to the user of where the highlighted lines are.</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.set_background_color">
      <param name="file">A string</param>
      <param name="color">A string</param>
      <description>Set the background color for the editors for file</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.goto_mark">
      <param name="identifier">A string</param>
      <description>Jump to the location of the mark corresponding to identifier</description>
      <see_also name="GPS.Editor.create_mark"/>
  </shell_doc>

  <shell_doc name="GPS.Editor.delete_mark">
      <param name="identifier">A string</param>
      <description>Delete the mark corresponding to identifier</description>
      <see_also name="GPS.Editor.create_mark"/>
  </shell_doc>

  <shell_doc name="GPS.Editor.get_chars">
      <param name="filename">A string</param>
      <param name="line" default="0">An integer</param>
      <param name="column" default="1">An integer</param>
      <param name="before" default="-1">An integer</param>
      <param name="after" default="-1">An integer</param>
      <return>A string</return>
      <description>Get the characters around a certain position. Returns string between "before" characters before the mark and "after" characters after the position. If "before" or "after" is omitted, the bounds will be at the beginning and/or the end of the line.
If the line and column are not specified, then the current selection is returned, or the empty string if there is no selection</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.get_line">
      <param name="mark">An identifier</param>
      <return>An integer</return>
      <description>Returns the current line of mark</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.get_column">
      <param name="mark">An identifier</param>
      <return>An integer</return>
      <description>Returns the current column of mark</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.get_file">
      <param name="mark">An identifier</param>
      <return>A file</return>
      <description>Returns the current file of mark</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.get_last_line">
      <param name="file">A string</param>
      <return>An integer</return>
      <description>Returns the number of the last line in file</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.block_get_start">
      <param name="file">A string</param>
      <param name="line">An integer</param>
      <return>An integer</return>
      <description>Returns ending line number for block enclosing line</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.block_get_end">
      <param name="file">A string</param>
      <param name="line">An integer</param>
      <return>An integer</return>
      <description>Returns ending line number for block enclosing line</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.block_get_name">
      <param name="file">A string</param>
      <param name="line">An integer</param>
      <return>A string</return>
      <description>Returns name for block enclosing line</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.block_get_type">
      <param name="file">A string</param>
      <param name="line">An integer</param>
      <return>A string</return>
      <description>Returns type for block enclosing line</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.block_get_level">
      <param name="file">A string</param>
      <param name="line">An integer</param>
      <return>An integer</return>
      <description>Returns nested level for block enclosing line</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.subprogram_name">
      <param name="file">A string</param>
      <param name="line">An integer</param>
      <return>A string</return>
      <description>Returns the name of the subprogram enclosing line</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.cursor_get_line">
      <param name="file">A string</param>
      <return>An integer</return>
      <description>Returns current cursor line number</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.cursor_get_column">
      <param name="file">A string</param>
      <return>An integer</return>
      <description>Returns current cursor column number</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.cursor_set_position">
      <param name="file">A string</param>
      <param name="line">An integer</param>
      <param name="column" default="1">An integer</param>
      <description>Set cursor to position line/column in buffer file</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.cursor_center">
      <param name="file">A string</param>
      <description>Scroll the view to center cursor</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.get_buffer">
      <param name="file">A string</param>
      <description>Returns the text contained in the current buffer for file</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.save_buffer">
      <param name="file">A string</param>
      <param name="to_file" default="">A string</param>
      <description>Saves the text contained in the current buffer for file. If to_file is specified, the file will be saved as to_file, and the buffer status will not be modified</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.replace_text">
      <param name="file">A string</param>
      <param name="line">An integer</param>
      <param name="column">An integer</param>
      <param name="text">A string</param>
      <param name="before" default="-1">An integer</param>
      <param name="after" defalt="-1">An integer</param>
      <description>Replace the characters around a certain position. "before" characters before (line, column), and up to "after" characters after are removed, and the new text is inserted instead. If "before" or "after" is omitted, the bounds will be at the beginning and/or the end of the line</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.indent">
      <param name="current_line_only" default="False">A boolean</param>
      <description>Indent the selection (or the current line if requested) in current editor. Do nothing if the current GPS window is not an editor</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.indent_buffer">
      <description>Indent the current editor. Do nothing if the current GPS window is not an editor</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.refill">
      <description>Refill selected (or current) editor lines. Do nothing if the current GPS window is not an editor</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.cut">
      <description>Cut the selection in the current editor</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.copy">
      <description>Copy the selection in the current editor</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.paste">
      <description>Paste the selection in the current editor</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.select_all">
      <description>Select the whole editor contents</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.select_text">
      <param name="first_line">An integer</param>
      <param name="last_line">An integer</param>
      <param name="start_column" default="1">An integer</param>
      <param name="end_column" default="0">An integer</param>
      <description>Select a block in the current editor</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.insert_text">
      <param name="text">A string</param>
      <description>Insert a text in the current editor at the cursor position</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.undo">
      <param name="file">A string</param>
      <description>Undo the last edition command for file</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.redo">
      <param name="file">A string</param>
      <description>Redo the last undone edition command for file</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.close">
      <param name="file">A string</param>
      <description>Close all file editors for file</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.set_writable">
      <param name="file">A string</param>
      <param name="writable">A boolean</param>
      <description>Change the Writable status for the editors for file</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.save">
      <param name="interactive" default="True">A boolean</param>
      <param name="all" default="True">A boolean</param>
      <description>Save current or all files. If interactive is true, then prompt before each save. If all is true, then all files are saved</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.set_synchronized_scrolling">
       <param name="file1">A string</param>
       <param name="file2">A string</param>
       <param name="file3" default="">A string</param>
       <description>Synchronize the scrolling between multiple editors</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.add_case_exception">
       <param name="name">A string</param>
       <description>Add name into the case exception dictionary</description>
  </shell_doc>

  <shell_doc name="GPS.Editor.remove_case_exception">
       <param name="name">A string</param>
       <description>Remove name from the case exception dictionary</description>
  </shell_doc>

  <!--#################################################################
    ####  VCS class
    ###################################################################-->

  <shell_doc name="GPS.VCS">
     <description>General interface to version control systems</description>
  </shell_doc>

  <shell_doc name="GPS.VCS.supported_systems">
      <return>List of strings</return>
      <description>Show the list of supported VCS systems</description>
  </shell_doc>

  <shell_doc name="GPS.VCS.get_status">
      <param name="file">A string</param>
      <description>Query the status for file</description>
  </shell_doc>

  <shell_doc name="GPS.VCS.update">
      <param name="file">A string</param>
      <description>Update file</description>
  </shell_doc>

  <shell_doc name="GPS.VCS.commit">
      <param name="file">A string</param>
      <description>Commit file</description>
  </shell_doc>

  <shell_doc name="GPS.VCS.diff_head">
      <param name="file">A string</param>
      <description>Show differences between local file and the head revision</description>
  </shell_doc>

  <shell_doc name="GPS.VCS.diff_working">
      <param name="file">A string</param>
      <description>Show differences between local file and the working revision</description>
  </shell_doc>

  <shell_doc name="GPS.VCS.annotate">
      <param name="file">A string</param>
      <description>Display the annotations for file</description>
  </shell_doc>

  <shell_doc name="GPS.VCS.remove_annotations">
      <param name="file">A string</param>
      <description>Remove the annotations for file</description>
  </shell_doc>

  <shell_doc name="GPS.VCS.log">
      <param name="file">A string</param>
      <param name="revision">A string</param>
      <description>Get the revision changelog for file. If revision is specified, query the changelog for this specific revision, otherwise query the entire changelog</description>
  </shell_doc>

  <shell_doc name="GPS.VCS.status_parse">
      <param name="vcs_identifier">A string</param>
      <param name="string">A string</param>
      <param name="clear_logs">A boolean</param>
      <param name="local">A boolean</param>
      <param name="dir" default="">A string</param>
      <description>Parses a string for VCS status. This command uses the parsers defined in the XML description node for the VCS corresponding to vcs_identifier.
   - When local is FALSE, the parser defined by the node status_parser is used.
   - When local is TRUE, the parser defined by the node local_status_parser is used.
 If clear_logs is TRUE, the revision logs editors are closed for files that have the VCS status "up-to-date".
 Parameter dir indicates the directory in which the files matched in string are located.</description>
  </shell_doc>

  <shell_doc name="GPS.VCS.annotation_parse">
      <param name="vcs_identifier">A string</param>
      <param name="file">A string</param>
      <param name="string">A string</param>
      <description>Parses string to find vcs annotations in file. This command uses the parser in the XML description node for the VCS corresponding to vcs_identifier.</description>
  </shell_doc>


  <!--#################################################################
    ####  Context class
    ###################################################################-->

  <shell_doc name="GPS.Context">
      <description>Represents a context in GPS. Depending on the currently selected window, an instance of one of the derived classes will be used</description>
  </shell_doc>

  <!--#################################################################
    ####   FileContext class
    ###################################################################-->

  <shell_doc name="GPS.FileContext">
      <description>Represents an context that contains file information</description>
      <see_also name="GPS.FileContext.__init__()" />
  </shell_doc>

  <shell_doc name="GPS.FileContext.__init__">
      <param name="self">The instance we are building</param>
      <description>Dummy function, whose goal is to prevent user-creation of a GPS.FileContext instance. Such instances can only be created internally by GPS</description>
  </shell_doc>

  <shell_doc name="GPS.FileContext.file">
      <param name="self">The instance of GPS.FileContext</param>
      <return>An instance of GPS.File</return>
      <description>Return the name of the file in the context</description>
  </shell_doc>

  <shell_doc name="GPS.FileContext.project">
      <param name="self">The instance of GPS.FileContext</param>
      <return>An instance of GPS.Project</return>
      <description>Return the project in the context, or the root project if none was specified in the context</description>
  </shell_doc>

  <shell_doc name="GPS.FileContext.directory">
      <param name="self">The instance of GPS.FileContext</param>
      <return>A string</return>
      <description>Return the current directory in the context</description>
  </shell_doc>

  <!--#################################################################
    ####   AreaContext class
    ###################################################################-->

  <shell_doc name="GPS.AreaContext">
      <description>Represents an context that contains file information and a range of lines currently selected</description>
      <see_also name="GPS.AreaContext.__init__()" />
  </shell_doc>

  <shell_doc name="GPS.AreaContext.__init__">
      <param name="self">The instance we are building</param>
      <description>Dummy function, whose goal is to prevent user-creation of a GPS.AreaContext instance. Such instances can only be created internally by GPS</description>
  </shell_doc>

  <shell_doc name="GPS.AreaContext.start_line">
      <param name="self">The instance of GPS.AreaContext</param>
      <return>An integer</return>
      <description>Return the first selected line in the context</description>
  </shell_doc>

  <shell_doc name="GPS.AreaContext.end_line">
      <param name="self">The instance of GPS.AreaContext</param>
      <return>An integer</return>
      <description>Return the last selected line in the context</description>
  </shell_doc>

  <!--#################################################################
    ####   EntityContext class
    ###################################################################-->

  <shell_doc name="GPS.EntityContext">
      <description>Represents an context that contains entity information</description>
      <see_also name="GPS.EntityContext.__init__()" />
  </shell_doc>

  <shell_doc name="GPS.EntityContext.__init__">
      <param name="self">The instance we are building</param>
      <description>Dummy function, whose goal is to prevent user-creation of a GPS.EntityContext instance. Such instances can only be created internally by GPS</description>
  </shell_doc>

  <shell_doc name="GPS.EntityContext.entity">
      <param name="self">The instance of GPS.EntityContext</param>
      <return>An instance of GPS.Entity</return>
      <description>Return the entity stored in the context</description>
  </shell_doc>

  <shell_doc name="GPS.EntityContext.location">
      <param name="self">The instance of GPS.EntityContext</param>
      <return>An instance of GPS.FileLocation</return>
      <description>Return the file location stored in the context</description>
  </shell_doc>


  <!--#################################################################
    ####   Help class
    ###################################################################-->

  <shell_doc name="GPS.Help">
     <description>This class gives access to the external documentation for shell commands. This external documentation is stored in the file shell_commands.xml, part of the GPS installation, and is what you are currently seeing.
You almost never need to use this class yourself, since it is used implicitly by Python when you call the help(object) command at the GPS prompt.

The help browser understands the standard http urls, with links to specific parts of the document. For instance:
     "http://remote.com/my_document"
 or  "#link"

As a special case, it also supports links starting with '%'. These are shell commands to execute within GPS, instead of a standard html file. For instance:
    &lt;a href="%shell:Editor.edit g-os_lib.ads"&gt;GNAT.OS_Lib%lt;/a%gt;

The first word after '%' is the language of the shell command, the rest of the text is the command to execute</description>
      <see_also name="GPS.Help.__init__()" />
  </shell_doc>

  <shell_doc name="GPS.Help.__init__">
     <param name="self">The instance of Help</param>
     <description>Initializes the instance of the Help class. This parses the XML file that contains the description of all the commands. With python, the memory occupied by this XML tree will be automatically freed. However, with the GPS shell you need to explicitly call GPS.Help.reset()</description>
     <see_also name="GPS.Help.reset()" />
  </shell_doc>

  <shell_doc name="GPS.Help.getdoc">
     <param name="self">The instance of Help</param>
     <param name="name">The fully qualified name of the command</param>
     <return>A string, containing the help for the command</return>
     <description>Search, into the XML file shell_commands.xml, the documentation for this specific command or entity. If no documentation is found, an error is raised</description>
     <example lang="python">
        print GPS.Help().getdoc("GPS.Help.getdoc")
     </example>
     <example lang="shell">
        Help
        Help.getdoc %1 "GPS.Help.getdoc"
        Help.reset %2
     </example>
  </shell_doc>

  <shell_doc name="GPS.Help.reset">
     <param name="self">The instance of Help</param>
     <description>Free the memory occupied by this instance. This frees the XML tree that is kept in memory. As a result, you can no longer call GPS.Help.getdoc() afterward.</description>
  </shell_doc>

  <shell_doc name="GPS.Help.file">
     <param name="self">The instance of Help</param>
     <return>A string</return>
     <description>Return the name of the file that contains the description of the shell commands. You shouldn't have to access it yourself, since you can do so through GPS.Help().getdoc() instead</description>
     <see_also name="GPS.Help.getdoc()"/>
  </shell_doc>

  <!--#################################################################
    ####   HTML class
    ###################################################################-->

  <shell_doc name="GPS.HTML">
     <description>This class gives access to the help system of GPS, as well as to the integrated browser</description>
  </shell_doc>

  <shell_doc name="GPS.HTML.add_doc_directory">
     <param name="directory">Directory that contains the documentation</param>
     <description>Add a new directory to the GPS_DOC_PATH environment variable. This directory is searched for documentation files. If this directory contains a gps_index.xml file, it is parsed to find the list of documentation files to
add to the Help menu. See the GPS documentation for more information on the
format of the gps_index.xml files</description>
  </shell_doc>

  <shell_doc name="GPS.HTML.browse">
     <param name="URL">Name of the file to browse</param>
     <param name="anchor" default="">Location in the file where to jump to</param>
     <param name="navigation" default="True">A boolean</param>
     <description>Open the GPS html viewer, and load the given URL. If anchor matches a &lt;a&gt; tag in this file, GPS will jump to it. If URL isn't an absolute file name, it is searched in the path set by the environment variable GPS_DOC_PATH.

If navigation is True, then the URL is saved in the navigation list, so that users can move back and forward from and to this location later on.

The URL can be a network file name, with the following general format:
   protocol://username@host:port/full/path
where protocol is one of the recognized protocols (http, ftp,.. see the GPS documentation), and the username and port are optional.</description>
     <see_also name="GPS.HTML.add_doc_directory()"/>
     <example lang="python">
         GPS.HTML.browse ("gps.html")
         will open the GPS documentation in the internal browser

         GPS.HTML.browse ("http://host.com/my/document")
         will download documentation from the web
     </example>
  </shell_doc>

  <!--#################################################################
    ####   Codefix class
    ###################################################################-->

  <shell_doc name="GPS.Codefix">
      <description>This class gives access to GPS's features for automatically fixing compilation errors</description>
      <see_also name="GPS.CodefixError" />
      <see_also name="GPS.Codefix.__init__()" />
  </shell_doc>

  <shell_doc name="GPS.Codefix.parse">
      <param name="category">A string</param>
      <param name="output">A string</param>
      <param name="regexp" default="">A string</param>
      <param name="file_index" default="-1">An integer</param>
      <param name="line_index" default="-1">An integer</param>
      <param name="column_index" default="-1">An integer</param>
      <param name="style_index" default="-1">An integer</param>
      <param name="warning_index" default="-1">An integer</param>
      <description>Parse the output of a tool, and suggests auto-fix possibilities whenever possible. This adds small icons in the location window, so that the user can click on it to fix compilation errors. You should call Locations.parse with the same output prior to calling this command.
The regular expression specifies how locations are recognized. By default, it matches file:line:column. The various indexes indicate the index of the opening parenthesis that contains the relevant information in the regular expression. Set it to 0 if that information is not available.
Access the various suggested fixes through the methods of the Codefix class</description>
     <see_also name="GPS.Editor.register_highlighting()" />
  </shell_doc>

  <shell_doc name="GPS.Codefix.__init__">
      <param name="self">The instance we are building</param>
      <param name="category">A string</param>
      <description>Return the instance of codefix associated with the given category</description>
  </shell_doc>

  <shell_doc name="GPS.Codefix.errors">
      <param name="self">The instance of GPS.Codefix</param>
      <return>A list of instances of GPS.CodefixError</return>
      <description>List the fixable errors in that session</description>
  </shell_doc>

  <shell_doc name="GPS.Codefix.sessions">
      <return>A list of strings</return>
      <description>List all the existing Codefix sessions. The returned values can all be used to create a new instance of Codefix through its constructor.</description>
      <example lang="python">
           After a compilation failure, calling
              GPS.Codefix.sessions()
           will return a list similar to
              ['Builder results']
      </example>
  </shell_doc>


  <!--#################################################################
    ####   CodefixError class
    ###################################################################-->

  <shell_doc name="GPS.CodefixError">
      <description>This class represents a fixable error in the compilation output</description>
      <see_also name="GPS.Codefix" />
      <see_also name="GPS.CodefixError.__init__()" />
  </shell_doc>

  <shell_doc name="GPS.CodefixError.__init__">
      <param name="self">The instance we are building</param>
      <param name="codefix">An instance of GPS.Codefix</param>
      <param name="file">An instance of GPS.FileLocation</param>
      <param name="message" default="">A string</param>
      <description>Describe a new fixable error. If the message is not specified, the first error at that location is returned</description>
  </shell_doc>

  <shell_doc name="GPS.CodefixError.possible_fixes">
      <param name="self">The instance of GPS.CodefixError</param>
      <return>A list of strings</return>
      <description>List the possible fixes for the specific error</description>
      <example lang="python">
          for err in GPS.Codefix ("Builder results").errors():
              print err.possible_fixes()
      </example>
  </shell_doc>

  <shell_doc name="GPS.CodefixError.fix">
      <param name="self">The instance of GPS.CodefixError</param>
      <param name="choice" default="0">The index of the fix to apply, see output of GPS.CodefixError.possible_fixes()</param>
      <description>Fix the error, using one of the possible fixes. The index given in parameter is the index in the list returned by "possible_fixes. By default, the first choice is taken. Choices start at index 0.</description>
      <example lang="python">
          for err in GPS.Codefix ("Builder results").errors():
              print err.fix()
          Will automatically fix all fixable errors in the last compilation output
      </example>
  </shell_doc>

  <shell_doc name="GPS.CodefixError.message">
      <param name="self">The instance of GPS.CodefixError</param>
      <return>A string</return>
      <description>Return the error message, as issues by the tool</description>
  </shell_doc>

  <shell_doc name="GPS.CodefixError.location">
      <param name="self">The instance of GPS.CodefixError</param>
      <return>An instance of GPS.FileLocation</return>
      <description>Return the location of the error</description>
  </shell_doc>

  <!--#################################################################
    ####   Console class
    ###################################################################-->

  <shell_doc name="GPS.Console">
      <description>This class is used to create and interact with the interactive consoles in GPS. It can be used to redirect the output of scripts to various consoles in GPS, or to get input from the user has needed.</description>
      <example lang="python">
         The following example shows how to redirect the output of a script to a new console in GPS:
	    console = GPS.Console ("My_Script")
	    console.write ("Hello world")  ## Explicit redirection

	 The usual python's standard output can also be redirected to this console:
	    sys.stdout = GPS.Console ("My_Script")
	    print "Hello world, too"  ## Implicit redirection
	    sys.stdout = GPS.Console ("Python")  ## Back to python's console
	    sys.stdout = GPS.Console () ## Or back to GPS's console
      </example>
      <example lang="python">
         The following example shows an integration between the GPS.Console and GPS.Process classes, so that a window containing a shell can be added to GPS.

            import GPS
            class Console_Process (GPS.Console, GPS.Process):
              def on_output (self, unmatched, matched):
                self.write (unmatched + matched)
              def on_exit (self, status, remaining_output):
                self.destroy ()
              def on_input (self, input):
                self.send (input)
              def on_destroy (self):
                self.kill ()
              def __init__ (self, process, args=""):
                GPS.Console.__init__ \
		   (self, process, \
                    on_input=Console_Process.on_input, \
                    on_destroy=Console_Process.on_destroy, \
                    force=True)
                GPS.Process.__init__ \
		   (self, process + ' ' + args, ".+", \
                    on_exit=Console_Process.on_exit, \
                    on_match=Console_Process.on_output)

              bash = Console_Process ("/bin/sh", "-i")
      </example>
      <see_also name="GPS.Process" />
      <see_also name="GPS.Console.__init__" />
  </shell_doc>

  <shell_doc name="GPS.Console.__init__">
      <param name="self">The instance of GPS.Console</param>
      <param name="name">A string</param>
      <param name="force" default="False">A boolean</param>
      <param name="on_input" default="">A subprogram, see GPS documentation</param>
      <param name="on_destroy" default="">A subprogram</param>
      <description>Create a new instance of GPS.Console. GPS will try to reuse any existing console with the same name. If none exists yet, or the parameter force is set to True, then GPS will create a new console.

If GPS reuses an existing console, on_input overrides the callback that was
already set on the console, whereas on_destroy will be called in addition to
the one that was already set on the console.

If this is not the desired behavior, you can also call destroy() on the console, and call the constructor again.

The subprogram on_input is called whenever the user has entered a new command in the console and pressed &lt;enter&gt; to execute it. It is called with the following parameters:
   - $1: The instance of the GPS.Console
   - $2: The command to execute

The subprogram on_destroy is called whenever the user closes the console. It is called with a single parameter:
   - $1: The instance of the GPS.Console</description>
  </shell_doc>

  <shell_doc name="GPS.Console.write">
      <param name="self">The instance of GPS.Console</param>
      <param name="text">A string</param>
      <description>Output some text on the console</description>
  </shell_doc>

  <shell_doc name="GPS.Console.clear">
      <param name="self">The instance of GPS.Console</param>
      <description>Clear the current contents of the console</description>
  </shell_doc>

  <shell_doc name="GPS.Console.flush">
      <param name="self">The instance of GPS.Console</param>
      <description>Do nothing, needed for compatibility with Python's file class</description>
  </shell_doc>

  <shell_doc name="GPS.Console.isatty">
      <param name="self">The instance of GPS.Console</param>
      <return>A boolean</return>
      <description>Return True if the console behaves like a terminal. Mostly needed for compatibility with Python's file class</description>
  </shell_doc>

  <shell_doc name="GPS.Console.read">
      <param name="self">The instance of GPS.Console</param>
      <return>A String</return>
      <description>Read the available input in the console. Currently, this behaves exactly like readline()</description>
  </shell_doc>

  <shell_doc name="GPS.Console.readline">
      <param name="self">The instance of GPS.Console</param>
      <return>A String</return>
      <description>Ask the user to enter a new line in the console, and returns that line. GPS is blocked until enter has been pressed in the console</description>
  </shell_doc>

  <!--#################################################################
    ####   Toolbar class
    ###################################################################-->

  <shell_doc name="GPS.Toolbar">
     <description>Interface to commands related to the toolbar. This allows you to add new combo boxes to the GPS toolbars. Note that this can also be done through XML files, see the GPS documentation</description>
     <example lang="python">
         import GPS
         def on_changed (entry, choice):
             print "changed " + choice + ' ' + entry.custom
         def on_selected (entry, choice):
             print "on_selected " + choice + ' ' + entry.custom

         ent=GPS.Combo("foo", label="Foo", on_changed=on_changed)
         GPS.Toolbar().append (ent, tooltip => "What it does")
         ent.custom = "Foo"  ##  Create any field you want
         ent.add (choice="Choice1", on_selected=on_selected)
         ent.add (choice="Choice2", on_selected=on_selected)
         ent.add (choice="Choice3", on_selected=on_selected)
     </example>
     <example lang="shell">
         It is easier to use this interface through XML customization files, see the GPS documentation. However, this can also be done through standard shell commands.
         Combo "foo" "Foo" "on_changed_action"
         Toolbar
         Toolbar.append %1 %2 "What it does"

         Toolbar
         Toolbar.get %1 "foo"
         Combo.add %1 "Choice1" "on_selected"action"
     </example>
      <see_also name="GPS.Toolbar.__init__()" />
  </shell_doc>

  <shell_doc name="GPS.Toolbar.__init__">
     <param name="self">The instance of GPS.Toolbar</param>
     <description>Initializes a new instance of the toolbar, associated with the default toolbar of GPS. This is called implicitly from python</description>
  </shell_doc>

  <shell_doc name="GPS.Toolbar.get">
     <param name="self">The instance of GPS.Toolbar</param>
     <param name="id">A string, the name of the entry to get</param>
     <return>An instance of GPS.Combo</return>
     <description>Return the toolbar entry matching the given id. An error is raised if no such entry exists. The same instance of GPS.Combo is always returned for each specific id, therefore you can store your own fields in this instance and access it later.</description>
     <example lang="python">
         ent=GPS.Combo ("foo")
         GPS.Toolbar().append (ent)
         ent.my_custom_field="Whatever"

         print GPS.Toolbar().get ("foo").my_custom_field   ## "Whatever"
     </example>
  </shell_doc>

  <shell_doc name="GPS.Toolbar.get_by_pos">
     <param name="self">The instance of GPS.Toolbar</param>
     <param name="position">An integer, starting at 0</param>
     <return>An instance of a child of GPS.GUI</return>
     <description>Return the position-th widget in the toolbar. If the widget was created from a scripting language, its instance is returned. Otherwise, a generic instance of GPS.GUI is returned. This can be used to remove some items from the toolbar for instance</description>
     <example lang="python">
         GPS.Toolbar().get_by_pos (0).set_sensitive (False)
         can be used to gray out the first item in the toolbar
     </example>
  </shell_doc>

  <shell_doc name="GPS.Toolbar.append">
     <param name="self">The instance of GPS.Toolbar</param>
     <param name="widget">An instance of GPS.GUI</param>
     <param name="tooltip">A string</param>
     <description>Add a new widget in the toolbar. This should generally be an instance of GPS.Combo for proper rendering on the screen</description>
  </shell_doc>

  <!--#################################################################
    ####   Button class
    ###################################################################-->

  <shell_doc name="GPS.Button">
     <description>This class represents a button that can be pressed to trigger various actions</description>
      <see_also name="GPS.Button.__init__()"/>
  </shell_doc>

  <shell_doc name="GPS.Button.__init__">
     <param name="self">An instance of GPS.Button</param>
     <param name="id">A string, a unique identifier for the button</param>
     <param name="label">A string, the text that appears on the button</param>
     <param name="on_click">A subprogram, see the GPS documentation</param>
     <description>Initializes a new button. When the button is pressed by the user, on_click is called with the following single parameter:
   - $1 = The instance of GPS.Button</description>
     <example lang="python">
         def on_click (button):
             print "Button pressed"
         button = GPS.Button ("my_id", label="Press me", on_click=on_click)
         GPS.Toolbar().append (button)
     </example>
  </shell_doc>

  <shell_doc name="GPS.Button.set_text">
     <param name="self">An instance of GPS.Button</param>
     <param name="label">A string</param>
     <description>Change the text that appears on the button</description>
  </shell_doc>

  <!--#################################################################
    ####   Combo class
    ###################################################################-->

  <shell_doc name="GPS.Combo">
      <description>This class represents a combo box, ie a text entry widget with a number of predefined possible values. The user can interactively select one of multiple values through this widget</description>
      <see_also name="GPS.Toolbar"/>
      <see_also name="GPS.Combo.__init__()" />
  </shell_doc>

  <shell_doc name="GPS.Combo.__init__">
     <param name="self">The instance of GPS.Combo</param>
     <param name="id">A string, the name of the combo to create</param>
     <param name="label" default="">A string, the label to add next to the entry</param>
     <param name="on_changed" default="None">A subprogram, see the GPS documentaion on Subprogram parameters</param>
     <description>Create a new combo. The combo will graphically be preceded by some text if label was specified. On_Changed will be called every time the user selects a new value for the combo box. Its parameters are the following:
   - $1 = The instance of GPS.Combo (self)
   - $2 = The newly selected text (a string) </description>
     <see_also name="GPS.Toolbar.append()" />
     <see_also name="GPS.Toolbar.ge()" />
  </shell_doc>

  <shell_doc name="GPS.Combo.add">
     <param name="self">The instance of GPS.Combo</param>
     <param name="choice">A string</param>
     <param name="on_selected" default="">A subprogram, see the GPS documentation on Subprogram parameters</param>
     <description>Add a choice to specified entry, action will be executed whenever this choice is selected. It is called with the following parameters:
   - $1 = The instance of GPS.Combo (self)
   - $2 = The newly selected text (a string)
</description>
  </shell_doc>

  <shell_doc name="GPS.Combo.remove">
     <param name="self">The instance of GPS.Combo</param>
     <param name="choice">A string</param>
     <description>Remove a choice from specified entry</description>
     <see_also name="GPS.Combo.clear()"/>
  </shell_doc>

  <shell_doc name="GPS.Combo.clear">
     <param name="self">The instance of GPS.Combo</param>
     <description>Remove all choices from specified entry</description>
  </shell_doc>

  <shell_doc name="GPS.Combo.get_text">
     <param name="self">The instance of GPS.Combo</param>
     <return>A string</return>
     <description>Return the current selection in specified entry</description>
  </shell_doc>

  <shell_doc name="GPS.Combo.set_text">
     <param name="self">The instance of GPS.Combo</param>
     <param name="choice">A string</param>
     <description>Set the current selection in specified entry</description>
  </shell_doc>

  <!--#################################################################
    ####   Timeout class
    ###################################################################-->

  <shell_doc name="GPS.Timeout">
      <description>This class gives access to actions that must be executed regularly at specific intervals</description>
      <example lang="python">
         ## Execute callback three times and remove it
         import GPS;
         def callback (timeout):
            timeout.occur = timeout.occur + 1;
            print "A timeout occur=" + `timeout.occur`
            if timeout.occur == 3:
               timeout.remove ()
         t = GPS.Timeout (500, callback)
         t.occur = 0
      </example>
      <see_also name="GPS.Timeout.__init__"/>
  </shell_doc>

  <shell_doc name="GPS.Timeout.__init__">
      <param name="self">The timeout to initialize</param>
      <param name="timeout">The timeout in milliseconds at which to execute the action</param>
      <param name="action">A subprogram parameter to execute periodically</param>
      <description>A timeout object executes a specific action repeatedly, at a specified interval, as long as it is registered.
The action takes a single argument, which is the instance of GPS.Timeout that called it.</description>
  </shell_doc>

  <shell_doc name="GPS.Timeout.remove">
      <param name="self">The Timeout to remove</param>
      <description>Unregister a timeout</description>
  </shell_doc>

  <!--#################################################################
    ####   Process class
    ###################################################################-->

  <shell_doc name="GPS.Process">
      <description>Interface to expect-related commands. This class can be used to spawn new processes and communicate with them later on. It is similar to what GPS uses to communicate with gdb</description>
      <example lang="python">
The following example launches a gdb process, let is print its welcome message, and kills it as soon as a prompt is seen in the output.
In addition, it displays debugging messages in a new GPS window.
As you might note, some instance-specific data is stored in the instance of the process, and can be retrieve in each callback.

import GPS, sys

def my_print(msg):
   sys.stdout.set_console ("My gdb")
   print (msg)
   sys.stdout.set_console()

def on_match (self, unmatched, matched):
   my_print "on_match (" + self.id + ")=" + matched
   self.kill()

def on_exit (self, status, remaining_output):
   my_print "on_exit (" + self.id + ")"

def run():
   proc = GPS.Process("gdb", "^\\(gdb\\)", on_match=on_match, on_exit=on_exit)
   proc.id = "first session"

run()
      </example>
      <example lang="python">
A similar example can be implemented by using a new class. This is slightly
cleaner, since it doesn't pollute the global namespace.

class My_Gdb (GPS.Process):
   def matched (self, unmatched, matched):
      my_print ("matched " + self.id)
      self.kill()

   def exited (self, status, output):
      my__print ("exited " + self.id)

   def __init__ (self):
       self.id = "from class"
       GPS.Process.__init__ (self, "gdb", "^\\(gdb\\)", on_match=My_Gdb.matched, on_exit=My_Gdb.exited)


My_Gdb()
      </example>
      <see_also name="GPS.Process.__init__()" />
  </shell_doc>

  <shell_doc name="GPS.Process.__init__">
      <param name="self">The instance of GPS.Process</param>
      <param name="command">A string</param>
      <param name="regexp" default="">A string</param>
      <param name="on_match" default="None">A subprogram, see the section "Subprogram parameters" in the GPS documentation</param>
      <param name="on_exit" default="None">A subprogram</param>
      <description>Spawn specified command. If regexp is not-empty and on_match_action is specified, launch on_match_action when regexp is found in the process output. If on_exit_action is specified, execute it when the process terminates. Return the ID of the spawned process.
on_match is a subprogram called with the parameters:
  $1 = the instance of GPS.Process
  $2 = the string which matched the regexp
  $3 = the string since the last match

on_exit is a subprogram called with the parameters:
  $1 = the instance of GPS.Process
  $2 = the exit status
  $3 = the entire output of the process</description>
      <see_also name="GPS.Process"/>
  </shell_doc>

  <shell_doc name="GPS.Process.send">
      <param name="self">The instance of GPS.Process</param>
      <param name="command">A string</param>
      <param name="add_lf" default="true">A boolean</param>
      <description>Send a line of text to the process</description>
  </shell_doc>

  <shell_doc name="GPS.Process.interrupt">
      <param name="self">The instance of GPS.Process</param>
      <description>Interrupt a process controlled by GPS</description>
  </shell_doc>

  <shell_doc name="GPS.Process.kill">
      <param name="self">The instance of GPS.Process</param>
      <description>Terminate a process controlled by GPS</description>
  </shell_doc>

  <shell_doc name="GPS.Process.expect">
      <param name="self">The instance of GPS.Process</param>
      <param name="regexp">A string</param>
      <param name="timeout" default="-1">An integer, in milliseconds</param>
      <return>A string</return>
      <description>Block the execution of the script until either regexp has been seen in the output of the command, or the timeout has expired. If the timeout is negative, wait forever until we see the regexp or the process finishes its execution. While in such a call, the usual on_match callback will not be called.
This command returns the output of the process up to the point where regexp matched</description>
    <example lang="python">
       proc = GPS.Process ("/bin/sh")
       print ("Output till prompt=" + proc.expect (">"))
       proc.send ("ls")
    </example>
  </shell_doc>

  <shell_doc name="GPS.Process.wait">
      <param name="self">The instance of GPS.Process</param>
      <description>Block the execution of the script until the process has finished executing</description>
  </shell_doc>

  <!--#################################################################
    ####   Hook class
    ###################################################################-->

  <shell_doc name="GPS.Hook">
      <description>General interface to hooks. Hooks are commands executed when some specific events occur in GPS, and allow you to customize some of the aspects of GPS</description>
      <see_also name="GPS.Hook.__init__()" />
 </shell_doc>

  <shell_doc name="GPS.Hook.__init__">
      <param name="self">The instance of GPS.Hook we are initializing</param>
      <param name="name">A string, the name of the hook</param>
      <description>Create a new hook instance, which refers to one of the already defined hooks</description>
  </shell_doc>

  <shell_doc name="GPS.Hook.run">
      <param name="self">The instance of GPS.Hook</param>
      <param name="...">Any number of parameters to pass to the hook.
The specific list depends on the hook type</param>
      <description>Run the hook. This will call all the functions that attached to that hook</description>
      <see_also name="GPS.Hook.describe_type()" />
  </shell_doc>

  <shell_doc name="GPS.Hook.add">
      <param name="self">The instance of GPS.Hook</param>
      <param name="function_name">A subprogram, see the "Subprogram Parameters" section in the GPS documentation</param>
      <description>Connect a new function to a specific hook. Any time this hook is run through run_hook, this function will be called with the same parameters passed to run_hook.</description>
      <example lang="shell">
        parse_xml """&lt;action name="edited"&gt;&lt;shell&gt;echo "File edited hook=$1 file=$2"&lt;/shell&gt;&lt;/action&gt;"""
        Hook "file_edited"
        Hook.add %1 "edited"
     </example>
     <example lang="python">
        def filed_edited (hook_name, file):
            print "File edited (hook=" + hook_name + " file=" + file.name()
        GPS.Hook ("file_edited").add (file_edited)
     </example>
  </shell_doc>

  <shell_doc name="GPS.Hook.register">
      <param name="name">A string, the name of the hook to create</param>
      <param name="description">A string, the description of the hook</param>
      <param name="type" default="">A string, the type of the hook. See GPS.Hook.list_types()</param>
      <description>Defines a new hook. This hook can take any number of parameters, the default is none. The type and number of parameters is called the type of the hook, and this is described by the" optional third parameter. The value of this parameter should be either the empty string for a hook that doesn't take any parameter. Or it could be one of the predefined types exported by GPS itself (see list_hook_types). Finally, it could be the word ""generic"" if this is a new type of hook purely defined for this scripting language</description>
  </shell_doc>

  <shell_doc name="GPS.Hook.list">
      <return>A list of strings</return>
      <description>List all defined hooks. See also run_hook, register_hook and add_hook</description>
      <see_also name="GPS.Hook.list_types" />
  </shell_doc>

  <shell_doc name="GPS.Hook.describe">
      <param name="self">The instance of GPS.Hook</param>
      <return>A string</return>
      <description>Describe a hook, when it is executed, and what are the expected arguments</description>
  </shell_doc>

  <shell_doc name="GPS.Hook.describe_functions">
      <param name="self">The instance of GPS.Hook</param>
      <return>A list of strings</return>
      <description>List all the functions that are executed when the hook is executed. The returned list might contain &lt;internal&gt; strings, which indicate that some Ada function is connected to this hook</description>
  </shell_doc>

  <shell_doc name="GPS.Hook.list_types">
     <return>A list of strings</return>
     <description>List all defined type hooks</description>
     <see_also name="GPS.Hook.register"/>
  </shell_doc>

  <shell_doc name="GPS.Hook.describe_type">
     <param name="name">A string, the name of the hook type</param>
     <return>A string</return>
     <description>Describe a hook type and what are the expected arguments. Remember that all hooks get the hook name as the first parameter, in addition to the parameters described by this function.</description>
  </shell_doc>

  <!--#################################################################
    ####   MDI class
    ###################################################################-->

  <shell_doc name="GPS.MDI">
    <description>Represents GPS's Multiple Document Interface. This gives access to general graphical commands for GPS, as well as control over the current layout of the windows within GPS</description>
    <see_also name="GPS.MDIWindow" />
  </shell_doc>

  <shell_doc name="GPS.MDI.get">
     <param name="name">A string</param>
     <return>An instance of GPS.MDIWindow</return>
     <description>Return the window whose name is name. If there is no such window, None is returned</description>
  </shell_doc>

  <shell_doc name="GPS.MDI.get_by_child">
     <param name="child">An instance of GPS.GUI</param>
     <return>An instance of GPS.MDIWindow</return>
     <description>Return the window that contains child, or raise an error if there is none</description>
  </shell_doc>

  <shell_doc name="GPS.MDI.current">
     <return>An instance of GPS.MDIWindow</return>
     <description>Return the window that currently has the focus, or raise an error if there is none</description>
  </shell_doc>

  <shell_doc name="GPS.MDI.dialog">
     <param name="msg">A string</param>
     <description>Display a modal dialog to report information to a user. This blocks the interpreter until the dialog is closed</description>
  </shell_doc>

  <shell_doc name="GPS.MDI.yes_no_dialog">
     <param name="msg">A string</param>
     <return>A boolean</return>
     <description>Display a modal dialog to ask a question to the user. This blocks the interpreter until the dialog is closed. The dialog has two buttons Yes and No, and the selected button is returned to the caller</description>
     <example lang="python">
        if GPS.MDI.yes_no_dialog ("Do you want to print?"):
            print "You pressed yes"
     </example>
  </shell_doc>

  <shell_doc name="GPS.MDI.input_dialog">
     <param name="msg">A string</param>
     <param name="...">Any number of strings</param>
     <return>A list of strings</return>
     <description>Display a modal dialog and request some input from the user. The message is displayed at the top, and one input field is displayed for each remaining argument. The arguments can take the form ""label=value"", in which case ""value"" is used as default for this entry. The return value is the value that the user has input for each of these parameters.
An empty list is returned if the user presses Cancel</description>
     <example lang="python">
          a, b = GPS.MDI.input_dialog("Please enter values", "a", "b")
          print a, b
     </example>
  </shell_doc>

  <shell_doc name="GPS.MDI.save_all">
     <param name="force" default="false">A boolean</param>
     <description>Save all currently unsaved windows. This includes open editors, the project, and any other window that has registered some save callbacks.
If the force parameter is false, then a confirmation dialog is displayed so that the user can select which windows to save</description>
  </shell_doc>

  <shell_doc name="GPS.MDI.exit">
      <param name="force" default="false">A boolean</param>
      <description>Exit GPS. If there are unsaved changes, a dialog is first displayed to ask whether these should be saved. If the user cancels the operation through the dialog, GPS will not exit. If force is true, then no dialog is open, and nothing is saved</description>
  </shell_doc>



  <!--#################################################################
    ####   MDIWindow class
    ###################################################################-->

  <shell_doc name="GPS.MDIWindow">
     <description>This class represents one of the windows currently displayed in GPS. This includes both the windows currently visible to the user, and the
ones that are temporarily hidden, for instance because they are displayed below another window.
Windows acts as containers for other widgets</description>
  </shell_doc>

  <shell_doc name="GPS.MDIWindow.__init__">
     <param name="self">An instance of GPS.MDIWindow</param>
     <description>Prevents the creation of instances of GPS.MDIWindow. This is done by calling the various subprograms in the GPS.MDI class</description>
  </shell_doc>

  <shell_doc name="GPS.MDIWindow.split">
     <param name="self">An instance of GPS.MDIWindow</param>
     <param name="vertically" default="True">A boolean</param>
     <param name="reuse" default="False">A boolean</param>
     <description>Split the window in two parts, either horizontally (side by side), or vertically (one below the other). If reuse is true, attempt to reuse an existing space rather than splitting the current window. This should be used to avoid ending up with too small windows</description>
     <see_also name="GPS.MDIWindow.single()" />
  </shell_doc>

  <shell_doc name="GPS.MDIWindow.float">
     <param name="self">An instance of GPS.MDIWindow</param>
     <param name="float" default="True">A boolean</param>
     <description>Float the window, ie create a new toplevel window to display it. It is then under control of the user's operating system or window manager. If float is False, the window is reintegrated within the GPS MDI instead</description>
  </shell_doc>

  <shell_doc name="GPS.MDIWindow.raise_window">
     <param name="self">An instance of GPS.MDIWindow</param>
     <description>Raise the window so that it becomes visible to the user. The window also gains the focus</description>
  </shell_doc>

  <shell_doc name="GPS.MDIWindow.name">
     <param name="self">An instance of GPS.MDIWindow</param>
     <return>A string</return>
     <description>Return the name of the window</description>
  </shell_doc>

  <shell_doc name="GPS.MDIWindow.next">
     <param name="self">An instance of GPS.MDIWindow</param>
     <param name="visible_only" default="True">A boolean</param>
     <return>An instance of GPS.MDIWindow</return>
     <description>Return the next window in the MDI, or window itself if there is no other window. If visible_only is true, then only the windows currently visible to the user are visible. This always returns floating windows</description>
  </shell_doc>

  <shell_doc name="GPS.MDIWindow.get_child">
     <param name="self">An instance of GPS.MDIWindow</param>
     <return>An instance of GPS.GUI</return>
     <description>Return the child contained in the window. The returned value might be an instance of a subclass of GPS.GUI, if that window was created from a shell command</description>
     <example lang="python">
        Accessing the GPS.Console instance used for python can be done with:
           GPS.MDI.get ("Python").get_child()
     </example>
  </shell_doc>

  <!--#################################################################
    ####   Locations class
    ###################################################################-->

  <shell_doc name="GPS.Locations">
     <description>General interface to the locations window</description>
  </shell_doc>

  <shell_doc name="GPS.Locations.parse">
     <param name="output">A string</param>
     <param name="category">A string</param>
     <param name="regexp" default="">A string</param>
     <param name="file_index" default="-1">An integer</param>
     <param name="line_index" default="-1">An integer</param>
     <param name="column_index" default="-1">An integer</param>
     <param name="msg_index" default="-1">An integer</param>
     <param name="style_index" default="-1">An integer</param>
     <param name="warning_index" default="-1">An integer</param>
     <param name="highlight_category" default="">A string</param>
     <param name="style_category" default="">A string</param>
     <param name="warning_category" default="">A string</param>
     <description>Parse the contents of the string, which is supposedly the output of some tool, and add the errors and warnings to the locations window. A new category is created in the locations window if it doesn't exist. Preexisting contents for that category is not removed, see locations_remove_category.
The regular expression specifies how locations are recognized. By default, it matches file:line:column. The various indexes indicate the index of the opening parenthesis that contains the relevant information in the regular expression. Set it to 0 if that information is not available. Style_Index and Warning_Index, if they match, force the error message in a specific category.
highlight_category, style_category and warning_category reference the colors to use in the editor to highlight the messages when the regexp has matched. If none of them is specified, no highlighting is done in the editor. Create these categories with GPS.Editor.register_highlighting(). </description>
      <see_also name="GPS.Editor.register_highlighting()" />
  </shell_doc>

  <shell_doc name="GPS.Locations.add">
     <param name="category">A string</param>
     <param name="file">An instance of GPS.File</param>
     <param name="line">An integer</param>
     <param name="column">An integer</param>
     <param name="message">A string</param>
     <param name="highlight" default="">A string, the name of the highlight category</param>
     <param name="length" default="0">An integer</param>
     <description>Add a new entry in the location window. Nodes are created as needed for the category or file. If Highlight is specified to a non-empty string, the whole line is highlighted in the file, with a color given by that highlight category (see register_highlighting for more information). Length is the length of the highlighting. The default value of 0 indicates that the whole line should be highlighted</description>
     <example lang="python">
        GPS.Editor.register_highlighting ("My_Category", "blue")
        GPS.Locations.add (category="Name in location window",
                           file=GPS.File ("foo.c"),
                           line=320,
                           column=2,
                           message="message",
                           highlight="My_Category")
     </example>
  </shell_doc>

  <shell_doc name="GPS.Locations.remove_category">
     <param name="category">A string</param>
     <description>Remove a category from the location window. This removes all associated files</description>
  </shell_doc>

  <!--#################################################################
    ####   Debugger class
    ###################################################################-->

  <shell_doc name="GPS.Debugger">
     <description>Interface to debugger related commands</description>
      <see_also name="GPS.Debugger.__init__()" />
  </shell_doc>

  <shell_doc name="GPS.Debugger.__init__">
     <param name="self">An instance of GPS.Debugger</param>
     <description>Initializes a new instance of the debugger class. This is associated with the current debugger, and will always reference the debugger current at the time when a method is called. Thus, if the user changes the current debugger, the command in GPS.Debugger.send() will be sent to the new current debugger</description>
  </shell_doc>

  <shell_doc name="GPS.Debugger.send">
     <param name="self">An instance of GPS.Debugger</param>
     <param name="command">A string</param>
     <description>Send command to the debugger self</description>
  </shell_doc>

  <!--#################################################################
    ####   Preference class
    ###################################################################-->

  <shell_doc name="GPS.Preference">
     <description>Interface to the GPS preferences, as set in the Edit/Preferences dialog. New preferences are created through XML customization files (or calls to GPS.parse_xml(), see the GPS documentation</description>
     <example lang="python">
        GPS.parse_xml ("""
           &lt;preference name="custom-adb-file-color"
               label="Background color for .adb files"
               page="Editor:Fonts &amp;amp; Colors"
               default="yellow"
               type="color" /&gt;""")
        print "color is " + GPS.Preference ("custom-adb-file-color").get()
     </example>
      <see_also name="GPS.Preference.__init__()" />
  </shell_doc>

  <shell_doc name="GPS.Preference.__init__">
     <param name="self">The instance of GPS.Preference</param>
     <param name="name">A string</param>
     <description>Initializes an instance of the GPS.Preference class, associating it with the preference given in parameter</description>
  </shell_doc>

  <shell_doc name="GPS.Preference.get">
     <param name="self">The instance of GPS.Preference</param>
     <return>A string or an integer</return>
     <description>Get value for the given preference. The exact returned type depends on the type of the preference. Note that boolean values are returned as integers, for compatibility with older versions of Pythons</description>
     <example lang="python">
         if GPS.Preference ("MDI-All-Floating"):
            print "We are in all-floating mode"
     </example>
  </shell_doc>

  <shell_doc name="GPS.Preference.set">
     <param name="self">The instance of GPS.Preference</param>
     <param name="value">A string</param>
     <description>Set value for the given preference</description>
  </shell_doc>

  <!--#################################################################
    ####   GUI class
    ###################################################################-->

  <shell_doc name="GPS.GUI" >
     <description>This is an abstract class (ie no instances of it can be created from your code, which represents a graphical element of the GPS interface</description>
      <see_also name="GPS.GUI.__init__()" />
  </shell_doc>

  <shell_doc name="GPS.GUI.__init__">
     <param name="self">The instance of GPS.GUI</param>
     <description>Prevents the creation of instances of GPS.GUI. Such instances are created automatically by GPS as a result of calling other functions</description>
     <see_also name="GPS.Toolbar().apppend()" />
     <see_also name="GPS.Toolbar().entry()" />
     <see_also name="GPS.Menu.get()" />
  </shell_doc>

  <shell_doc name="GPS.GUI.set_sensitive">
     <param name="self">The instance of GPS.GUI</param>
     <param name="sensitive" default="True">A boolean</param>
     <description>Indicate whether the associated graphical element should respond to user interaction or not. If the element is not sensitive, then the user will not be able to click on it</description>
  </shell_doc>

  <shell_doc name="GPS.GUI.destroy">
     <param name="self">The instance of GPS.GUI</param>
     <description>Destroy the graphical element. It will disappear from the interface, and cannot necessarily be recreated later on</description>
  </shell_doc>

  <shell_doc name="GPS.GUI.hide">
     <param name="self">The instance of GPS.GUI</param>
     <description>Temporarily hide the graphical element. It can be shown again through a call to GPS.GUI.show()</description>
     <see_also name="GPS.GUI.show()" />
  </shell_doc>

  <shell_doc name="GPS.GUI.show">
     <param name="self">The instance of GPS.GUI</param>
     <description>Show again the graphical element that was hidden by hide()</description>
     <see_also name="GPS.GUI.hide()" />
  </shell_doc>

  <!--#################################################################
    ####   Contextual class
    ###################################################################-->

  <shell_doc name="GPS.Contextual" >
     <description>This class is a general interface to the contextual menus in GPS. It gives you control over which menus should be displayed when the user right clicks in parts of GPS</description>
     <see_also name="GPS.Contextual.__init__()" />
  </shell_doc>

  <shell_doc name="GPS.Contextual.__init__">
     <param name="self">The instance of GPS.Contextual</param>
     <param name="name">A string</param>
     <description>Initializes a new instance of GPS.Contextual. The name is the name that was given to the contextual menu when it was created, and is a static string independent of the actual label used when the menu is displayed (and which is dynamic, depending on the context). You can get the list of valid names by checking the list of names returned by GPS.Contextual.list</description>
     <see_also name="GPS.Contextual.list()" />
  </shell_doc>

  <shell_doc name="GPS.Contextual.list">
     <description>Return the list of all registered contextual menus. This is a list of strings which are valid names that can be passed to the constructor of GPS.Contextual. These names were created when the contextual menu was registered in GPS.</description>
     <see_also name="GPS.Contextual.__init__()" />
  </shell_doc>

  <shell_doc name="GPS.Contextual.show">
     <param name="self">The instance of GPS.Contextual</param>
     <description>Make sure the contextual menu will be shown when appropriate. The entry might still be invisible if you right clicked on a context where it doesn't apply, but it will be checked</description>
     <see_also name="GPS.Contextual.hide" />
  </shell_doc>

  <shell_doc name="GPS.Contextual.hide">
     <param name="self">The instance of GPS.Contextual</param>
     <description>Make sure the contextual menu will never appear when the user right clicks anywhere in GPS. This is the standard way to disable contextual menus</description>
     <see_also name="GPS.Contextual.show" />
  </shell_doc>

  <!--#################################################################
   ##### Socket class
   ####################################################################-->

  <shell_doc name="GPS.Socket">
     <description>This class provides an interface to the sockets created by GPS when using the --server switch</description>
     <see_also name="GPS.Socket.__init__()" />
  </shell_doc>

  <shell_doc name="GPS.Socket.__init__">
     <param name="self">The instance of GPS.Socket</param>
     <param name="id">A string</param>
     <description>Creates an interface to one of the specific clients connect to GPS through the --server socket. The id can be set by the client by sending the "id" command to GPS</description>
  </shell_doc>

  <shell_doc name="GPS.Socket.send">
     <param name="self">An instance of the Socket class</param>
     <param name="msg">A string</param>
     <description>When GPS is running in server mode (using the --server switch), send msg to the socket identified by self.</description>
  </shell_doc>

  <shell_doc name="GPS.Socket.close">
     <param name="self">An instance of the Socket class</param>
     <description>Closes the socket. The client that was connected to that socket will be notified by the system that the socket was closed, and react as needed</description>
  </shell_doc>

  <shell_doc name="GPS.Socket.list">
     <return>List of strings</return>
     <description>Return a list of all the registered socket identifiers. These strings can be used to instanciate GPS.Socket.</description>
   </shell_doc>


  <!--#################################################################
    ####   Menu class
    ###################################################################-->

  <shell_doc name="GPS.Menu" >
      <description>This class is a general interface to the menu system in GPS. It gives you control over which menus should be active, what should be executed when the menu is selected by the user,...</description>
      <see_also name="GPS.Menu.__init__()" />
  </shell_doc>

  <shell_doc name="GPS.Menu.__init__">
     <param name="self">The instance of GPS.Menu</param>
     <description>Prevents the creation of a menu instance. Such instances can only be created internally by GPS as a result of calling GPS.Menu.get or GPS.Menu.create. This is so that you always get the same instance of GPS.Menu when
you are refering to a given menu in GPS, and so that you can store your own
specific data with the menu</description>
  </shell_doc>

  <shell_doc name="GPS.Menu.get">
     <param name="path">A string</param>
     <return>The instance of GPS.Menu</return>
     <description>Return the menu found at the given path. Path is similar to what one finds on a hard disk, starting with the main GPS menu ('/'), down to each submenus. For instance, '/VCS/Directory/Update Directory' refers to the
submenu 'Update Directory' of the submenu 'Directory' of the menu 'VCS'. Path is case-sensitive</description>
     <example lang="python">
        The following example will prevent the user from using the VCS menu and
        all its entries:
           GPS.Menu.get ('/VCS').set_sensitive (False)
     </example>
  </shell_doc>

  <shell_doc name="GPS.Menu.create">
     <param name="path">A string</param>
     <param name="on_activate" default="">A subprogram, see the GPS documentation on subprogram parameters</param>
     <param name="ref" default="">A string</param>
     <param name="add_before" default="True">A boolean</param>
     <return>The instance of GPS.Menu</return>
     <description>Create a new menu in the GPS system. The menu is added at the given location (see GPS.Menu.get for more information on the path parameter). Submenus are created as necessary so that path is valid.
If on_activate is specified, it will be executed every time the user selects that menu. It is called with only one parameter, the instance of GPS.Menu that was just created.
If ref and add_before are specified, they specify the name of another item in the parent menu (and not a full path) before or after which the new menu should be added</description>
     <example lang="python">
         def on_activate (self):
             print "A menu was selected: " + self.data

         menu = GPS.Menu.create ("/Edit/My Company/My Action", on_activate)
         menu.data = "my own data"   ## Store your own data in the instance
     </example>
  </shell_doc>

  <shell_doc name="GPS.Menu.rename">
     <param name="self">The instance of GPS.Menu</param>
     <param name="name">A string</param>
     <description>Change the name of a menu. The first underscore character seen in name will be used as the keyboard shortcut to access this menu from now on. If you actually want to insert an underscore in the name, you need to double it</description>
  </shell_doc>
</docs>
