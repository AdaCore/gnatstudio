
# ??? This makefile requires GNU make ???

## The following variables should be defined in your own makefile, before
## adding a statement
##  
##  # List of C files to compile
##  C_FILES=
##
##  # Main file(s) to compile
##   MAIN=
##
##  # List of modules we depend on (supported are "gnat", "gvd", "gtkada")
##  MODULES=
##
##  # List of files that shouldn't be compiled with style checks on.
##  # This automatically include all GLADE generated files
##  NO_STYLE_FILES=
##
##  # (optional) directory in which object files and executables should be put
##  OBJ_DIR=
##
##    include ../../Makefile.common


# directory in which object files will be put. This is ignored if the user
# has already defined this
OBJ_DIR?=../obj


#################################################################
## Nothing to modify below
## The flags used for the compilation should be modified through
## the command line (make CFLAGS="..." GNATBIND_FLAGS="...")
#################################################################

# List of files automatically generated by GLADE, that won't compile with
# style checks on.
NO_STYLE_FILES+=${wildcard *_pkg.adb}

CFLAGS=-g
GNATBIND_FLAGS=-bargs -E
GNATMAKE_FLAGS=-gnataQ -m ${CFLAGS}
STYLE_FLAGS=-gnaty -gnatwu

all: ${MAIN}

#################
## GNAT module ##
#################

# Including the gnat runtime. This must be found before the gnat sources on the
# path, or the binder will complain that sources are more recent than objects
# !!! This is not needed if you use the same gnat version to compile this
# module as the sources of gnat you have !!!
ifneq (,$(findstring gnat,$(MODULES)))

# Location of GNAT sources. See the README file at the top-level for
# information on how to setup the required links
GNAT_SRC=../../gnat

# RUNTIME_HEAD=${shell gnatls -v | grep "gcc-lib" | head -1}
# RUNTIME_INC=${RUNTIME_HEAD:%=-aI%}
MODULE_INCLUDE+=-I${GNAT_SRC} ${RUNTIME_INC}

NO_STYLE_FILES+=sdefault.adb
endif

.PHONY: check_gnat
check_gnat: force
	@[ -f ${GNAT_SRC}/prj.ads ] || \
	   (echo "GNAT sources not found in ${GNAT_SRC}, see README"; false)

################
## GVD module ##
################

ifneq (,$(findstring gvd,$(MODULES)))

# Location of GVD sources. See the README file at the top-level for
# information on how to setup the required links
GVD_SRC=../../gvd

MODULE_INCLUDE+=-I${GVD_SRC}/gvd -I${GVD_SRC}/pixmaps
endif

.PHONY: check_gvd
check_gvd: force
	@[ -f ${GVD_SRC}/gvd/gvd.ads.in ] || \
	   (echo "GVD sources not found in ${GVD_SRC}, see README"; false)

###################
## Common module ##
###################

ifneq (,$(findstring common,$(MODULES)))
MODULE_INCLUDE+=-I../../common
endif

.PHONY: check_common
check_common: force

###################
## GTKADA module ##
###################
# Note that we separate cflags and libs so that MODULE_INCLUDE can be
# used to compile C files (even though the command line doesn't
# support the -largs argument)

ifneq (,$(findstring gtkada,$(MODULES)))
MODULE_INCLUDE+=`gtkada-config --cflags`
MODULE_LIB+=`gtkada-config --libs`
endif

.PHONY: check_gtkada
check_gtkada: force
	@[ `gtkada-config -v`" " != " " ] || \
	   (echo "GTKAda installation not found, see README"; false)

#############
## General ##
#############
# Handling of C files: since these can include directory names (for instance if
# we need to compile a C file from another module), we need to look for files
# in that other directory. This is done through the vpath directive.
# Not that we always want the object file in ../obj, thus the slightly complex
# form of C_OBJS. This is also the reason why we can not use VPATH directly,
# since we want to make sure that make will not search for object files in
# directories specified in VPATH.

ALL_FLAGS:=${GNATMAKE_FLAGS} -aI../src -aO../obj ${MODULE_INCLUDE} ${GNATBIND_FLAGS}
C_OBJS:=${foreach name,${C_FILES},${OBJ_DIR}/${notdir ${name:.c=.o}}}

.PHONY: all force check_modules clean

${MAIN}: check_modules ${NO_STYLE_FILES} ${C_OBJS} force
	cd ${OBJ_DIR}; gnatmake $@ ${STYLE_FLAGS} ${ALL_FLAGS} -largs ${C_OBJS} ${MODULE_LIB}

${NO_STYLE_FILES}: force
	@cd ${OBJ_DIR}; gnatmake -u $@ ${ALL_FLAGS}

empty:=
space:= $(empty) $(empty)
vpath %.c ${subst ${space},:,${dir ${C_FILES}}}

${OBJ_DIR}/%.o: %.c
	cd ${OBJ_DIR}; gcc ${CFLAGS} -Wall -c ../src/$< -I../src ${MODULE_INCLUDE}

# Check that the modules we depend on are available through links
check_modules: ${MODULES:%=check_%}

# Clean up all object files
clean: force
	cd ${OBJ_DIR}; ${RM} b~* *.o *.ali core ${MAIN}

force:
