New features in GVD 2.0.0

- [9305-037] A message dialog now pops up when trying to detach a process
  while the underlying debugger is busy.

- A new multiple document interface (MDI) is provided.

New features in GVD 1.2.1

- In addition to GVD_ROOT, the path where gvd is launched is used to retrieve
  dynamically the prefix. The manual can thus be found more easily on Windows
  systems.

New features in GVD 1.2.0

- Under Windows, the special pathnames //cygdrive/x/ and //x/ are now
  recognized and converted into appropriate names.
- The File->New Debugger dialog now provides the ability to replace the
  current debugger by default.
- The "run" and "start" buttons now set automatically the name of the
  module under VxWorks.
- The File->Attach Process menu now lists the tasks on the target when
  using Tornado VxWorks.
- The --target option now allows multiple ':' characters so that you
  can specify machine:1234 as the the machine (& port number).
  See the documentation for more details.
- The file corresponding to the main procedure is now displayed
  when loading an Ada executable (rather than the procedure containing the
  elaboration calls).
- The data window is now zoomable
- The breakpoint editor has been enhanced, and can now set advanced properties
  like ignore_count, commands to execute when reaching the breakpoint, or
  conditions to activate the breakpoint
- The handling of commands has been improved and is more reliable. Caching of
  commands has also been put in place giving better user feedback on slow
  machines.
- New item in the source editor contextual menu: display dereferenced variable
- New item in the source editor contextual menu: break on subprogram
- The option "break on exceptions" has been implemented
- It is possible to delete an exception by pressing the 'Delete' key in
  the Breakpoints Window.
- The Tab key is now supported in the debugger window.

New features in GVD 1.1.0

- Complete documentation now available.
- Under Windows, non ASCII characters are now displayed instead of being
  truncated.
- New command line option: --pargs to set program arguments on the command line
- New command line option: --dargs to specify additional debugger arguments.
- Start up of big programs have been significantly improved.
- Menu "Print" in the code editor contextual menu now prints the
  variable inside the command window instead of the canvas.
- Support for preferences (menu Edit->Preferences), with many user-configurable
  options. See documentation for more details.
- Scrolling of assembly window outside of displayed range is now possible
- The Data window can now be separated from the main window (Edit->Preferences,
  Data/Separate Window)
- The Memory View now handles editing in non-Hex mode, and the possibility of 
  displaying ASCII and another format at the same time.
- The different window settings are now remembered from one session to another.
- New command line option --editor-window that gives a much better integration
  with external editors such as Glide/Emacs.
- A graphical list of processes is now displayed when attaching to a process.
- New item in data and source editor contextual menus: view memory at the
  address of a given variable.
- New item in the source editor contextual menu: print dereferenced variable

New features in GVD 1.0.2

- Added support for C++ in gdb.
- Assembly window is now much more efficient.
- New menu File->Open Source... to open a source file without the explorer

New features in GVD 1.0.1

- Better internalization handling
  Some duplicate strings have been merged.
- Complete french translation available
- Instead of generating a bug box when the underlying debugger dies, GVD
  now properly closes the debugger window and notifies the user.
- Basic support for JDB. No support for displaying variables yet.
- New command line option: --jdb to enable jdb support.
- New command line option: --no-explorer to disable the explorer window.
- New command line switch: --target to specify the target host and protocol.
- Better recovering after a bug box
  In particular, the cursor no longer looks busy after a bug box.
- Better handling of the explorer tree. Previous implementation was too
  costly and caused very long start up times on slow machines with executable
  containing lots of files.
