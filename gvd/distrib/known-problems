
Known Problems fixed in GVD 2.2.3

- [9130-004] Explorer doesn't display complete profile for Ada subprograms
  Problem:   The source explorer displays the parameters of the subprograms,
             but doesn't display the returned type.
  Workaround: Click on the entity so that the source_editor displays the
             appropriate source file. The returned type is visible there.

Known Problems fixed in GVD 2.0.0

- [9320-018] Opening an empty file
  Problem:    When opening an empty file (either from the source explorer
              or from the Open Source menu), GVD generates a bug box.
  Workaround: The bug box can simply be ignored.

- [9305-028] File selection does not handle directory selection properly
  Problem:    When typing a directory name and then pressing the enter key in
              the file selection dialog, this generates a bug box instead of
              selecting the directory.
  Workaround: Use the tab key instead.

- [9305-014] Parsing array types in Ada
  Problem:    In some cases (array of strings declared in a declare block),
              GVD was trying to display the array as a pointer instead.
  Workaround: Use print or the tooltips instead to show the array in the
              gdb console, or display each element of the array separately.

- Data window items folded on update
  Problem:    When the items displayed in the data window are refreshed, they
              might become folded if they are too big, even though the user
              has explicitely unfolded them.
  Workaround: Clone the part of the item that you want to keep visible. This
              part, being smaller, will not be folded automatically.

- Aliasing detection with first field of a structure
  Problem:    In the data window, a structure (or Ada record) and its first
              field are always considered as aliases
  Workaround: Deactivate alias detections through the contextual menu in the
              data window or in the preferences.

- [9131-004] Constraint_Error when displaying the assembly code
  Problem:    In some cases, notably vxworks, gdb isn't able to display in what
              scope the assembly lines are, and the resulting assembly lines
              couldn't be parsed by gvd. They look like "0x1234:...", ie no
              space after the address.
  Workaround: When you get the bug box, click on the OK button and keep using
              gvd, which is still in a stable state. To display the assembly,
              type "disassemble" in the console window directly.

- Infinite loop when displaying the assembly code
  Problem:    When the application wasn't compiled with debug information,
              and you chose to display the assembly window, this resulted in
              an infinite loop.
  Workaround: Always compile your applications with debugging information.
              You need this anyway to do anything useful.

- [9126-005] Loading a program does not give a visual feedback
  Problem:    When loading a program (e.g using File->Open Program...), GVD
              does not show any visual feedback of the operation.
  Workaround: None. If the load command is unsuccessful, GVD will output
              an error message in the status bar.

- [9125-003] Incorrect parsing of incomplete record types
  Problem:    When trying to display an incomplete record (in some rare cases,
              when the compiler generates partial debug information), GVD will
              hang trying to parse its type.
  Workaround: Use the tooltips or print these types instead.

- Incorrect detection of file extension in the explorer
  Problem:    The explorer tree on the left of the GVD window incorrectly
              handles files with no extension, and they are put at the same
              level as the "adb files", "c files", .. nodes.
  Workaround: The problem is that the file names include directory names with a
              dot, and thus the extension is incorrectly detected. Try putting
              only absolute paths in the parameters to the compiler.

- [9124-001]  Update button in breakpoints editor doesn't work
  Problem:    When using the "Update" button in the breakpoints editor
              ("Advanced" section), gvd enters in a recursive loop.
  Workaround: Modify the breakpoints using the debugger console instead.

- Bad clean up when load another executable after source+asm view
  Problem:    When using the source+asm view on multiple files, and then
              loading another executable, a bug box is displayed.
  Workaround: Load the file in another debugger.

- [9118-007] Display update problems under Windows NT/2000
  Problem:    After a question dialog is displayed, drawing in the debugger
              console gets messed up.
  Workaround: When this happens, put another window in front to force the
              display, or use the scrollbar.

- [9022-014] Tab key does not work with long names
  Problem:    When using the tab key in the debugger console to complete
              a long identifier (longer than 100 characters), a bug box is
              displayed.
  Workaround: Type the long identifier entirely or use copy/paste.

- [9014-013] Run button under VxWorks may raise Constraint_Error
  Problem:    When using the Run button under VxWorks and no module has been
              loaded from GVD, a bug box is displayed.
  Workaround: Load the module from GVD first, or use the menu
              Program->Run/Start and specify the name of the module to debug
              in the parameters entry.

- [9012-008] Cannot input data in the debugger console
  Problem:    When debugging a program that reads standard input, it is
              not possible to run the program and send the inputs to the
              program, gvd treats them as gdb commands instead.
  Workaround: Run the program under a separate shell, and attach to the
              process; or redirect standard input from a file.

- Displaying Ada strings containing backslashes
  Problem:    When a string contains a backslash (Ada mode), the latter is
              not shown in the display.
  Workaround: Look at the value in the tooltip.

- Parsing arrays of null access types
  Problem:    When parsing an Ada array of null access types, gvd sometimes
              enters an infinite loop.
  Workaround: Display the variable in the gdb console instead, by selecting
              "print <var" instead of "display <var>" in the contextual
              menu.

- Parsing C++ classes with static members
  Problem:    gvd can not parse c++ classes that have static fields.
  Workaround: Display the variable in the gdb console instead, by selecting
              "print <var" instead of "display <var>" in the contextual
              menu.

- Parsing C++ classes with virtual functions
  Problem:    In some cases, gvd can not display c++ classes with virtual
              functions, and reports an Assert_Failure in the log file.
  Workaround: Display the variable in the gdb console instead, by selecting
              "print <var>" instead of "display <var>" in the contextual
              menu.

- [9109-004] Assembly window raises Constraint_Error in some cases
  Problem:    When the assembly window is displayed, some race condition may
              occur and gvd is not able to get a new range of addresses. This
              results in a Constraint_Error.
  Workaround: Try hiding the assembly window temporarily.

- Tab key does not work properly for non trivial commands
  Problem:    When using the tab key in the debugger console to complete
              a command that contains spaces (e.g 'print p'), gvd replaces
              the command by the last part of the completion.
  Workaround: Type the beginning of the command by hand.

Known Problems fixed in GVD 1.2.1

- File extensions not properly recognized
  Problem:    When opening a file with the last extension defined in
              Preferences/Ada,C,C++ (by default .dg, .h and .H), no syntax
              highlighting is performed.
  Workaround: Add an extra semicolon to the list of extensions, e.g .c;.h;

Known Problems fixed in GVD 1.2.0

- Question dialogs are off by one character
  Problem:    When GVD pops up a question with a list of choices, the last
              choice is truncated by one character.
  Workaround: The complete message appears in the console window.

- Editor contextual menu doesn't take the selection into account in C mode
  Problem:    If you are debugging a C file, and select some text in the
              source editor, then the contextual menu doesn't reference this
              selected text but still references the entity below the cursor.
              This behavior doesn't exist in Ada mode
  Workaround: Use the debugger console to emit the commands directly, through
              "graph display" and "break" (see documentation)

- Printing Ada arrays of access types with repeated values
  Problem:    when printing an Ada array that has repeated equal values,
              the indexes are incorrectly computed and displayed.
  Workaround: use the "print" contextual menu to see the value of the item.

- Dereferencing variable sometimes fails in C mode
  Problem:    When dereferencing a variable in the data window whose name
              already contains a dereference but no parentheses around
              (e.g *foo instead of (*foo)), gvd does not properly dereference
              fields contained inside such expression.
  Workaround: Put parentheses around the original expression.

- Switching files sometimes generates a Constraint_Error
  Problem:    From time to time, when you switch to a file whose number of
              lines is smaller than the line currently highlighted in the
              source editor, a Constraint_Error was raised.
  Workaround: In the preferences, deactive the "Highlight current line" button.

- Selecting a non-existent file in Open Source generates a bug box
  Problem:    When entering a non-existent file in the File->Open Source
              dialog, GVD generates a bug box.
  Workaround: The bug box can be ignored.

- Incorrect log-level causes a Constraint_Error.
  Problem:    Invoking GVD with a log level outside of the [0-4] range
              causes a Constraint_Error.
  Workaround: Use a correct log level :-).

- Load a module on the debugger console does not update the explorer
  Problem:    When using the load or file command in the debugger console
              window, the source explorer is not updated.

  Workaround: Either load using the File->Open Program... menu, or use the
              "Reload Sources" in the explorer contextual menu.

- Displaying list of tasks on a non running program.
  Problem:    Opening the menu Data->Tasks... will generate a bug box when the
              program being debugged has not been started or is terminated.

  Workaround: Close the task window when the program is not running.

- [8715-002] Explorer does not handle files starting with no comment/blank line
  Problem:    GVD will generate a bug box when trying to open in the explorer
              window a package that starts with no blank or comment line.

  Workaround: Add a comment or blank line at the beginning of the package.

- Parsing Ada exported variables in C
  Problem:    GVD will generate a bug box when trying to display in C mode
              a variable declared in Ada.

  Workaround: Set the language to Ada before displaying the variable.

- Parsing unconstrained Ada arrays
  Problem:    Some arrays are incorrectly displayed by GVD, and all the items
              appear to have an index equal to 0.

  Workaround: Try to display a slice of the array ("graph display A(2..5)")

- Display the manual with no open debugger
  Problem:    It isn't possible to display the GVD manual (from the menu
              Help->Manual) when no debugger is currently open.

  Workaround: Open a new debugger with the menu Files->Open Debugger

- Parsing C++ classes with virtual methods
  Problem:    When a class defines virtual methods, it has an extra invisible
              fields that breaks the display in the canvas.

  Workaround: Use the tooltips to examine the class

- Parsing C++ classes with no field
  Problem:    Gvd isn't able to correctly parse C++ classes that do not define
              any new field, but only methods.

  Workaround: Use the tooltips to examine the class


Known Problems fixed in GVD 1.1.0

- Tooltips are not always shown.
  Problem:    When starting the debugged program using the debugger console
              window (by e.g typing "run"), the tooltips are not activated.

  Workaround: Use the "Run" or "Start" buttons instead of using the console
              window.

- Dereferencing Ada string parameters
  Problem:    When trying to display/dereference the value of a string
              parameter or of a string access in the canvas, this creates a
              self-pointing link to the value, and it is not possible to see
              the value of the string.

  Workaround: Disable alias detection in the canvas, or display parameter.all
              explicitely.

- [8524-010] Refresh problem in the canvas on NT
  Problem:    When big items are moved in the canvas on NT, there appears some
              black areas which are incorrectly refreshed.

  Workaround: Force a refresh of the canvas, by iconizing the GVD window and
              de-iconizing it afterwards.

- ASM view does not work properly
  Problem:    When switching the source editor to Asm only mode, GVD generates
              error messages on standard output and does not handle properly
              the windows when switching back to Source mode.

  Workaround: Use the Asm+Source mode instead.

- [8524-008] Cannot call the editor under NT
  Problem:    When using the File->Edit Current Source menu under NT, GVD
              launches the external editor using forward slashes instead of
              backslashes.

  Workaround: Use an editor that understands forward slashes.

- Loading a non existant executable generates a bug box
  Problem:    When using the File->Open Program... menu and specifying
              a non existant file, GVD generates a bug box instead of
              reporting the error in the status bar.

  Workaround: The error can safely be ignored.

- Wrong command line "--log-level" not handled properly
  Problem:    When specifying the --log-level option with no parameter,
              GVD generates a bug box instead of displaying the help
              text.

  Workaround: Use proper syntax for --log-level argument.

- Support for CR characters on Unix systems
  Problem:    GVD can not correctly detect whether a file contains CR
              characters unless it is on a Windows system. This results in the
              current line being incorrectly highlighted in the source
              editor.

  Workaround: Strip the CR characters from the files before using them.
 
- [8531-006] --no-explorer option generates a bug box
  Problem:    When using the --no-explorer command line option, GVD generates
              an assert failure.

  Workaround: Do not use the --no-explorer option, or create a file
              $HOME/.gvd/preferences containing the following lines:
 
              <?xml version="1.0"?>
              <preferences>
                <Display_Explorer>FALSE</Display_Explorer>
              </preferences>

- Parsing of unsigned char variables.
  Problem:    When trying to display an unsigned char, GVD recurses infinitely.
  Workaround: Use the tooltips or the command window to display such variables.

- [8511-011] Parsing of Ada variant records with null part.
  Problem:    Variant records that have at least one alternative with a null
              part are incorrectly parsed (parsing error, nothing displayed in
              the canvas).

  Workaround: Use the tooltips in the source window to look at the value of
              the variable.

- Closing of the first of multiple debuggers.
  Problem:    When multiple debuggers are present, closing the first one raises
              an error.

  Workaround: No workaround for this problem, fixed in GVD 1.1.0.


Known Problems fixed in GVD 1.0.2

- [8325-005] Interrupt button does not work under Windows
  Problem:    Hitting the 'Interrupt' button does nothing under windows
              systems.

  Workaround: Use breakpoints instead to stop the underlying process.

- Cancel in File->Open Program does not work properly
  Problem:    Hitting the 'Cancel' button causes GVD to ask the debugger
              to open the '' program. One symptom is, when a program was
              already open, a question from gdb asking whether the symbols
              from the previous program should be discarded.

  Workaround: Do not press on the 'Cancel' button :-)

- [8408-001] Attach command in the debugger window does not start gvd properly
  Problem:    When typing the attach, load or add-symbol-file command in the
              debugger window, some functionalities like 'Display Files in
              Shared Libraries' are not enabled.

  Workaround: Use the menus instead, or click on the run button.

- Parsing of char* fields in C structs
  Problem:    The value of string fields in C structures is incorrectly parsed,
              and extended till the end of the line. As a result, the following
              fields are empty.

  Workaround: The value of the following fields is still visible, but not at
              the correct location.

- Parsing of array fields in C structs
  Problem:    Fields that are arrays of simple types (int, double,...) are
              incorrectly detected.

  Workaround: Look at the value of the variable directly in the source window
              through the tooltips.

- Current line highlighted with an offset
  Problem:    If the previous current line contained some tabs, then the next
              one is highlighted with an offset.

  Workaround: Force a redisplay of the source window (hide line numbers).

- Wrong handling of double in C structs.
  Problem:    When trying to display a C structure containing a double, GVD
              recurses infinitely, causing a stack overflow.

  Workaround: Print such variables in the debugger window instead.

- Incorrect highlighting of ex-current line
  Problem:    When the current line (with green background) changes, the
              previous one is incorrectly syntax-highlighted (comments are
              still in black).

  Workaround: Force a redisplay of the source window (for instance hide line
              numbers and display them again)

- Opening the preferences dialog multiple times
  Problem:    If the preferences dialog is closed with the title bar's X
              button, it isn't possible to reopen it afterwards.

  Workaround: Close the dialog with the Cancel button

- [8327-010] NT directory separators not handled properly in the command line.
  Problem:    When specifying an executable on the command line that contains
              backslashes under NT, GVD does not handle it properly.

  Workaround: Replace blackslashes by slashes, or use the menu File/Open
              Program instead.

- [8327-009] Highlighting misspelled in the Preferences dialog
  Problem:    Color Highlighting is mispelled in the preferences dialog.

  Workaround: None, this is a minor inconvenience with no consequences.

- Command line arguments --version and --help do not work under Windows.
  Problem:    When using the --version or --help command line option under
              windows systems, gvd starts and nothing happens.

  Workaround: No work around, either ignore this minor problem or use 1.0.2


Known Problems fixed in GVD 1.0.1

- Start with arguments
  Problem:    When starting a program with non null arguments, gvd only
              sets the arguments and does not actually start the program.

  Workaround: Set the arguments first, and then start the application

- Attaching to a process
  Problem:    When trying to attach using the File/Attach menu, GVD fails
              to attach to the process.

  Workaround: Attach by hand by using the attach command in the debugger window.

- Call stack not displayed after an attach
  Problem:    When trying to attach using the File/Attach menu, GVD fails
              to display the current call stack.

  Workaround: Either switch from one debugger to another, and back to the
              first one will force redisplay of the call stack. Any execution
              command (step, next, ...) will also trigger the call stack
              display.

- Task window does not display the last task name properly
  Problem:    The last task name in the task window is truncated by one
              character.

  Workaround: This is a small cosmetic problem that does not require any work
              around.

- Closing the attach process window would generate a bug box
  Problem:    When closing the attach process window using the close icon of
              the window manager, GVD generates a bug box instead of
              silently closing the window.

  Workaround: Use the close button instead.

- File/Edit Source is silently ignored
  Problem:    When using the File/Edit Source menu, nothing happens.

  Workaround: Set the environment variable GVD_EDITOR (e.g
              "xterm -e /bin/vi %f +%l") before launching gvd.

- Problem in the memory view address handling
  Problem:    In the memory view, when specifying some array variables whose
              bounds are unknown to gdb in the Address area, gvd hangs.

  Workaround: Do not try to display memory associated to arrays with non
              static bounds.

- Special characters not properly handled in file and directory names
  Problem:    GVD does not handle files containing special characters such as
              '!' or ' '.

  Workaround: Avoid using these characters, by e.g using links.

- Adding a breakpoint in the Breakpoint window would generate a bug box
  Problem:    When clicking on the Add button in the edit breakpoint window,
              gvd generates a Constraint_Error turned into a bug box.

  Workaround: Set breakpoints using the source code window or the debugger
              window instead.

- Incorrect highlighting with TAB characters in comments
  Problem:    Highlighting is incorrect for files containing tab characters
              inside comments.

  Workaround: Ignore the highlighting, or remove tabs from comments.

- Under Windows NT/2000, GVD would crash on directory selection
  Problem:    When using the "File/Change Directory" menu item under NT/2000,
              GVD generates a bug box.

  Workaround: Type the directory name explicitely without any pending
              slash/backslashes or use the "cd" command in the debugger window.

