Design of a multi-language tool build, called gprmake.

The purpose of this tool is handle automatically multi-language builds,
based on the GNAT Project files.

Similarly, other GNAT tools will be reviewed wrt support for mult-language
support. In particular:

- gnatclean: verify that gnatclean handles multi-language objects/projects.
- gnatname: add support for non Ada languages in gnatname.
- gnatls: ditto.

Requirements:
- Be easily extensible to new programming languages
- Handle source dependencies automatically
- Handle different compilers for different languages
  - including Ada
  - not restricted to GCC

- Provide language-specific compilation/link options
- Provide file-specific compilation options
- Provide conditional sections based on configurable variables
- Handle building and use of libraries
- Use a process as similar as possible for each language
- Should be independent of the compiler version (in particular of the
  gnat version) as much as possible.
- Be as compatible as possible with gpr2make
- Provide useful defaults to ease set up and use with GNU compilers.

Related tools:
- gnatmake
- gcc
- make
- ant

Process:

- The tool will take a GNAT project file as its input,
  and generate calls to underlying tools to handle the compilation, bind and
  link process.

- sources files are recompiled when
  - no dependency info is available for this file
  - one of the dependencies has a timestamp more recent than the corresponding
    object file

- We do not want to get too deep in the handling of extra build processes (e.g.
  build of documentation, automatic code generation tools, extra preprocessing,
  ...), so this is intentionally left outside the control of this tool, to
  keep the process straight and simple. It is expected (and will be documented)
  that extra scripts or makefiles will be provided by the user that will take
  care of these extra steps, and that will call gprmake as part of these
  actions.

  However, a simple mechanism will be provided to perform such basic operations,
  as a way to generalize the current use of 'gnatmake' as the Ada driver
  (as opposed to calling separate 'gcc' for other languages and checking the
  dependencies). See below for more information.

  Rationale: the gprmake tool is focused on handling specific operations
  in an automated and simple way (namely, compiling, binding and linking a
  set of sources written in different languages). Trying to providing extra
  capabilities around this initial goal would mean starting to reimplement
  and reinvent most of the capabilities already provided by existing tools
  such as 'make', only in a more limited way.
  In addition, the main idea behind project files is to describe some
  project properties to external tools that will perform dedicated processing
  based on this information, whereas Makefile and similar files are a general
  way to describe a set of dependencies and actions to perform when these
  dependencies are outdated (this includes compiling sources, but is also
  used for pretty much anything, such as running a test case, launching
  a debugger, etc...); Keeping these two very distinct goals in the gprmake
  design is desirable, and introducing some (even simple) notions of
  'post-processing' or 'pre-processing' would inevitably bring the added
  complexity associated with the 'make'-like tools that we want to avoid.

TBC
[...]

Input needed from gprmake:

- Specify compiler command
  Currently specified using IDE'Compiler_Command (<language>)

  IDE is not the best package to store this info now that we are using it
  in non IDE tools. So this design seems a good opportunity to change that now
  rather than later.

  Question:
  - Should the GNAT compiler command be "gcc" or "gnatmake" ?
    It's currently "gnatmake" because that's what GPS needed, but this could
    be changed.

    -> The compiler command should be "gcc", since there's no reason to make
    a distinction between how Ada and non-Ada files are compiled. However,
    from a practical point of view, being able to delegate to gnatmake the
    process of compiling Ada files has also its advantages, in particular it
    insulates more gprmake from incompatible changes in e.g. ALI format.

    Therefore, in order to support and generalize the use of gnatmake for Ada
    files on one hand, and on the other hand, support the invocation of
    'external tools' to handle build of a set of sources, we could add a new
    attribute Builder'Builder_Driver (<language>) that will, if specified, be
    called to check sources and compile them if needed. In this case, gprmake
    won't perform any timestamp check nor compilation for the sources of the
    designated language.

  Suggestion:
  - Use existing packages 'Compiler', 'Builder'

  - Add new attributes:
    - Builder'Builder_Driver (<language>): If set, use this tool to check
      dependencies of sources for a given language, and rebuild them if
      needed.
      Defaults to ("<prefix>gnatmake", "-c", "-P", <Project_Name>) for "ada".
      Defaults to () otherwise.

    - Compiler'Compiler_Kind (<language>): Kind of compiler used for a given
      language. Recognized values are:
      - "GNU" (the default)
      - possibly others in the future, such as "Diab"
      This attribute is used by gprmake to set various defaults and change the
      way the build is handled in some cases.

    - Compiler'Compiler_Driver (<language>): name of the tool that knows
      how to compile files of the given language. Defaults to "<prefix>gcc"
      where <prefix> is an optional prefix computed based on the name
      of the gprmake tool when launched (e.g. calling powerpc-elf-gprmake
      will set the default Compiler_Driver to "powerpc-elf-gcc").

    - Compiler'Compilation_Option (<language>): list of switches to be
      used to tell the Compiler_Driver to compile-only (defaults to ("-c")).
      Note: there's a potential risk of misuse of this attribute vs
      Default_Switches (<language>)

    See below 'Specify how to handle dependencies' for more info on the
    following attributes:

    - Compiler'Dependency_Kind (<language>): kind of dependency produced
      by Compiler_Driver (<language>).
      Recognized values are:
      - "ali"  (default for "Ada")
      - "makefile"  (default for other languages)

      This option tells gprmake how to retrieve the dependency information

    - Compiler'Dependency_Option (<language>): list of switches to
      be used to tell the Compiler_Driver to generate a dependency file
      as part of the compilation process, e.g: ("-Wp,-MD,"),
      appended by Object_Dir & "file".d
      Defaults to ("-Wp,-MD,") for "c" and "c++" if the Compiler_Kind is set
      to "GNU".
      Defaults to () otherwise

      See related attribute Compiler'Compute_Dependency below.
 
      Question: How to specify whether the filename is part of the option,
      or should be the next option on the command line ?

      Answer: could assume that the name is always appended. If some compiler
      does not support it, there's always the possibility to use a wrapper,
      or use the Compute_Dependency attribute instead.

      If set, the Compute_Dependency attribute is ignored.

      If not set, gprmake assumes that a separate tool needs to be launched
      before the compilation in order to compute the dependencies (such as
      gcc -M, makedep, or a wrapper, etc...).

    - Compiler'Compute_Dependency (<language>): Command used to compute
      the dependency for a given language. This is a list of strings, the
      first string being the command itself, and the remaining strings are
      the options. The path to the filename will be appended to the command,
      and the source search path will be set via additional switches or
      environment variables.
      Defaults to:
      (Compiler_Driver (<language>), "-M") & Default_Switches (<language>)

      If set and Compiler'Dependency_Option isn't, this command is called right
      after a source file has been recompiled.

    -> If Dependency_Option and Compute_Dependency are both undefined or set
       to the empty value, gprmake will consider that sources for this language
       have no dependencies and will only compare the timestamp of the object
       and source file.

  TBC

- Specify how to handle dependencies
  TBC

  - investigate how dependencies are handled in other languages
    and verify that the proposed scheme would allow handling of these languages

    - fortran: apparently fortran does not really have the notion of
    dependencies between files (there is no 'with' nor '#include' in the C
    sense), so it's possible that the handling of dependencies is a simple
    matter of comparing the timestamp of the object file against the timestamp
    of the source file (correspond to having no
    Dependency_Option/Compute_Dependency attribute).

    - java: it seems that recompiling java files is handled either by IDEs
    directly or using tools such as 'ant', which is a make-like tool written in
    Java. Using 'ant' is in line with the Builder'Builder_Driver attribute
    proposed.

  - for simplicity, gprmake will, at least in a first step, only understand
    Makefile fragments.
    In the future, it would probably make sense to handle other formats
    directly, in particular ALI files, so that compilation of Ada files is
    handled without using gnatmake.

    Note: if some compiler (e.g. proprietary Ada compiler) does not provide
    one of the capabilities listed above, the idea would be to provide a
    helper tool (a wrapper) that would extract the proprietary information
    (from e.g. the Ada 83 library) and generate the information in one of the
    supported formats (typically a Makefile fragment). Another approach
    would be to use gcc -c -gnatc to generate .ali files, and gnatmake -M
    to generate corresponding Makefile fragments. In this case,
    Compiler'Compute_Dependency would be set to a wrapper that would
    first call gcc -c -gnatc, and then gnatmake -M on the resulting ali file.

  - switch added to the compiler to generate the dependency (optional)

  - post processing command to call to generate/update the dependency (optional)

- Ability to specify that a given project should not be compiled
  This is needed so that external scripts/makefiles can be provided
  instead, and have other gpr-related tools such as GPS still be able to
  take advantage of the source list associated to a given project (for
  instance, to provide source navigation in GPS).

  -> This can be achieved by specifying an empty or special value to
  Builder'Builder_Driver (e.g. "null").

- Specify how to handle bind phase between languages
  TBC

- Specify how to handle link phase between languages
  TBC

  Examples, to be generalized:
  - C: use Compiler_Driver ("c") (e.g. gcc)
  - C++: use Compiler_Driver ("c++") (e.g. g++)
  - Ada: use gnatlink with GNAT
  - C & C++: use Compiler_Driver ("c++")
  - C & Ada: use gnatlink with GNAT
  - Ada & C++: use gnatlink --LINK=Compiler_Command ("c++")

  Idea: could have some defaults built-in, as listed above, and have a way
  to specify the command to call for linking. Arguments passed to this command:
  for each language used in the project, provide name of the language compiler
  command, list of all objects for this language & associated linker options
  (such as libraries). This command will typically be a wrapper doing some
  tests and computation based on the language list.

- How to handle default values ?
  Lots of default values are suggested in this document.
  Would it be worth having a meta-configuration file used to set/change
  these default values ?

