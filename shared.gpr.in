with "gnatcoll";

project Shared is

   type OS_Type is ("unix", "osx", "Windows_NT");
   OS : OS_Type := External ("OS", "unix");

   type Build_Type is ("Debug", "Production");
   Build : Build_Type := External ("Build", "Debug");

   type Boolean_Type is ("true", "false");
   Enable_LTO : Boolean_Type := "false";
   --  Whether to enable link-time-optimization, and removal of
   --  unused subprograms

   Global_Objects_Root := External("GPS_OBJECTS_ROOT", "");

   for Source_Dirs use ();
   for Object_Dir use Global_Objects_Root &  "obj";
   for Library_Dir use "lib";

   package Documentation is
      for Documentation_Dir use Project'Object_Dir & "/html";
   end Documentation;

   package Compiler is
      Common := ("-g");
      Optimize := ();

      case OS is
         when "osx" | "Windows_NT" => null;
         when "unix" =>
            case Enable_LTO is
               when "true" =>
                  Optimize := ("-fdata-sections", "-ffunction-sections",
                               "-flto");
               when "false" =>
                  null;
            end case;
      end case;

      case Build is
         when "Debug" =>
            for Switches ("Ada") use Common &
              ("-O0", "-gnata", "-gnatVa", "-gnatQ", "-gnatygO",
               "-gnatwaCJe", "-gnateE");
            for Switches ("C") use ("-g", "-O1");

         when "Production" =>
            for Switches ("Ada") use Common & Optimize &
              ("-O2", "-gnatn",
               "-gnatT3", --  Temporary, L403-023.
               "-gnatws",
               "-gnatwaCJ",
               "-gnatygO"
               );
            for Switches ("C") use Optimize & ("-g", "-O2");
      end case;
   end Compiler;

   package Binder is
      for Switches ("Ada") use ("-E", "-shared");
   end Binder;

   Clang_Libs := (@CLANG_LIBS_GPR@);
   Gtk_Cflags := (@GTK_GCC_FLAGS_GPR@);
   Pygobject_Include := (@PYGOBJECT_INCLUDE_GPR@);
   Python_cflags := (@PYTHON_CFLAGS_GPR@);

   package Linker is
      --  ??? missing hack to force libiconv first (working around
      --  a faulty libiconv in macports)
      for Switches ("Ada") use Clang_Libs & ("-lstdc++");

      case Enable_LTO is
         when "true" =>
            case OS is
               when "osx" =>
                  for Switches ("Ada") use Linker'Switches ("Ada")
                     & ("-Wl,-dead_strip");
               when "unix" =>
                  for Switches ("Ada") use Linker'Switches ("Ada")
                     & ("-Wl,--gc-sections", "-Wl,--print-gc-sections");
               when others =>
                  null;
            end case;

         when "false" =>
            null;
      end case;
   end Linker;

end Shared;
